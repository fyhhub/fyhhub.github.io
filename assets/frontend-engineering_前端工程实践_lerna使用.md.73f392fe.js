import{_ as e,o as s,c as n,Q as a}from"./chunks/framework.3d945e71.js";const y=JSON.parse('{"title":"lerna 使用","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/前端工程实践/lerna使用.md","filePath":"frontend-engineering/前端工程实践/lerna使用.md","lastUpdated":1698287465000}'),l={name:"frontend-engineering/前端工程实践/lerna使用.md"},o=a(`<h1 id="lerna-使用" tabindex="-1">lerna 使用 <a class="header-anchor" href="#lerna-使用" aria-label="Permalink to &quot;lerna 使用&quot;">​</a></h1><h2 id="lerna-核心操作" tabindex="-1">lerna 核心操作 <a class="header-anchor" href="#lerna-核心操作" aria-label="Permalink to &quot;lerna 核心操作&quot;">​</a></h2><p>不知道的命令，建议 lerna xx -h</p><ul><li><p><strong>项目初始化</strong></p><ol><li><code>npm init -y</code>初始化</li><li><code>npm i lerna -D</code></li><li><code>lerna init</code></li></ol></li><li><p><strong>创建 package</strong></p><ol><li><code>lerna create</code> 创建 package</li><li><code>lerna add</code> 安装依赖</li><li><code>lerna link</code> 链接依赖</li></ol></li><li><p><strong>开发和测试</strong></p><ol><li><code>lerna exec</code> 执行 shell 脚本</li><li><code>lerna run</code> 执行<code>npm scripts</code></li><li><code>lerna clean</code> 清空所有依赖 node_modules</li><li><code>lerna bootstrap</code> 重装依赖</li></ol></li><li><p><strong>发布上线</strong></p><ol><li><code>lerna version</code> 提升版本号</li><li><code>lerna changed</code> 查看当前版本与上版本的所有变更</li><li><code>lerna diff</code> 查看 diff</li><li><code>lerna publish</code> 发布</li></ol></li></ul><h3 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h3><ul><li>lerna link：有两个库<code>A</code>和<code>B</code>,如果<code>A</code>引用<code>B包</code>, 需要在<code>A</code>的 package.json 中的<code>dependencies</code>提前声明好，然后再执行<code>lerna link</code></li><li>lerna exec: <code>lerna exec -- rm -rf node_modules</code>是在每个 packages 中执行的，而不是项目根目录</li></ul><h2 id="lerna-分析" tabindex="-1">lerna 分析 <a class="header-anchor" href="#lerna-分析" aria-label="Permalink to &quot;lerna 分析&quot;">​</a></h2><p><strong>本地开发依赖最佳实践</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;dependencies&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;@leek-cli-dev/utils&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;file:../utils&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 通过file: 可以让我们不需要npm link 直接可以本地开发</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;dependencies&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;@leek-cli-dev/utils&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;file:../utils&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 通过file: 可以让我们不需要npm link 直接可以本地开发</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>公共包提升</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;bootstrap&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;hoist&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;bootstrap&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;hoist&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div>`,11),p=[o];function c(t,r,i,d,u,E){return s(),n("div",null,p)}const g=e(l,[["render",c]]);export{y as __pageData,g as default};
