import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3d945e71.js";const d=JSON.parse('{"title":"Rust常用的库","description":"","frontmatter":{},"headers":[],"relativePath":"rust-learn/Rust常用的库.md","filePath":"rust-learn/Rust常用的库.md","lastUpdated":1700539672000}'),p={name:"rust-learn/Rust常用的库.md"},o=l(`<h1 id="rust常用的库" tabindex="-1">Rust常用的库 <a class="header-anchor" href="#rust常用的库" aria-label="Permalink to &quot;Rust常用的库&quot;">​</a></h1><h2 id="lazy-static" tabindex="-1"><a href="https://docs.rs/lazy_static/1.4.0/lazy_static" target="_blank" rel="noreferrer">lazy_static</a> <a class="header-anchor" href="#lazy-static" aria-label="Permalink to &quot;[lazy\\_static](https://docs.rs/lazy_static/1.4.0/lazy_static)&quot;">​</a></h2><p>用于定义全局变量的库，可读可写</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lazy_static</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">lazy_static;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">collections</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">sync</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">Arc</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Mutex</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">lazy_static!</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ref</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HASHMAP</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Arc</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Mutex</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">u32</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">&#39;</span><span style="color:#B392F0;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">&gt;&gt;&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashMap</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        m</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        m</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;baz&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Arc</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Mutex</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(m))</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HASHMAP</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    map</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">insert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;waz&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;map: {:?}&quot;</span><span style="color:#E1E4E8;">, map);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lazy_static</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">lazy_static;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">collections</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">sync</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">Arc</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Mutex</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">lazy_static!</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ref</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HASHMAP</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arc</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Mutex</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">u32</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">&#39;</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">&gt;&gt;&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        m</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        m</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        m</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;baz&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Arc</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Mutex</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(m))</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HASHMAP</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    map</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">insert</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;waz&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;map: {:?}&quot;</span><span style="color:#24292E;">, map);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="clap" tabindex="-1"><a href="https://docs.rs/clap/latest/clap/" target="_blank" rel="noreferrer">clap</a> <a class="header-anchor" href="#clap" aria-label="Permalink to &quot;[clap](https://docs.rs/clap/latest/clap/)&quot;">​</a></h2><p>用于定义命令行的工具</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cargo add clap </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">features derive</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cargo add clap </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">features derive</span></span></code></pre></div><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">clap</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Parser</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// Simple program to greet a person</span></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Parser</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Debug</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">#[command(author, version, about, long_about </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">None</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Args</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /// Name of the person to greet</span></span>
<span class="line"><span style="color:#E1E4E8;">    #[arg(short, long)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// Number of times to greet</span></span>
<span class="line"><span style="color:#E1E4E8;">    #[arg(short, long, default_value_t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 1)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> args </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Args</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">args</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">count {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello {}!&quot;</span><span style="color:#E1E4E8;">, args</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">name)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">clap</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Parser</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// Simple program to greet a person</span></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Parser</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Debug</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">#[command(author, version, about, long_about </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">None</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Args</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    /// Name of the person to greet</span></span>
<span class="line"><span style="color:#24292E;">    #[arg(short, long)]</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /// Number of times to greet</span></span>
<span class="line"><span style="color:#24292E;">    #[arg(short, long, default_value_t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> 1)]</span></span>
<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> args </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Args</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">args</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">count {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello {}!&quot;</span><span style="color:#24292E;">, args</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">name)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,8),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
