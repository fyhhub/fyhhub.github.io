import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.3d945e71.js";const _=JSON.parse('{"title":"每日学习","description":"","frontmatter":{},"headers":[],"relativePath":"informal/每日学习.md","filePath":"informal/每日学习.md","lastUpdated":1694138420000}'),p={name:"informal/每日学习.md"},o=l(`<h1 id="每日学习" tabindex="-1">每日学习 <a class="header-anchor" href="#每日学习" aria-label="Permalink to &quot;每日学习&quot;">​</a></h1><h2 id="_2023-09-06" tabindex="-1">2023-09-06 <a class="header-anchor" href="#_2023-09-06" aria-label="Permalink to &quot;2023-09-06&quot;">​</a></h2><ol><li>算法：移除链表元素</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">removeElements</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> h </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, head)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> h;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(h.next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (h.next.val </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      h.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> h.next.next</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">continue</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    h </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> h.next</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">removeElements</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">head</span><span style="color:#24292E;">, </span><span style="color:#E36209;">val</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ListNode</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, head)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> h;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(h.next) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (h.next.val </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> val) {</span></span>
<span class="line"><span style="color:#24292E;">      h.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> h.next.next</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">continue</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    h </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> h.next</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res.next;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>注意点：</p><ul><li>需要创建一个虚拟头结点，方便删除头部元素</li><li>while循环，判断h.next是否存在</li><li><code>h.next = h.next.next</code> 操作完成后，需要contine, 不能再继续往后移动指针了，因为可能删除后的链表，下一个元素还是目标元素</li></ul><ol start="2"><li>算法：<a href="https://leetcode.cn/problems/design-linked-list/" target="_blank" rel="noreferrer">707.设计链表</a></li></ol><h2 id="_2023-09-07" tabindex="-1">2023-09-07 <a class="header-anchor" href="#_2023-09-07" aria-label="Permalink to &quot;2023-09-07&quot;">​</a></h2><ol><li><p>算法：翻转链表</p></li><li><p>算法：交换两个链表的节点</p></li><li><p>算法：删除链表的倒数第 N 个结点</p></li><li><p>算法：环形链表</p></li><li><p>算法：相交链表</p></li></ol><h2 id="_2023-09-08" tabindex="-1">2023-09-08 <a class="header-anchor" href="#_2023-09-08" aria-label="Permalink to &quot;2023-09-08&quot;">​</a></h2><ol><li>环形链表 II</li></ol>`,11),e=[o];function t(c,r,E,i,y,h){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{_ as __pageData,u as default};
