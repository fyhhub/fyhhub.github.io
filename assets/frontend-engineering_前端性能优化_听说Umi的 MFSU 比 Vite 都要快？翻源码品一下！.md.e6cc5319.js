import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.968e3df4.js";const F=JSON.parse('{"title":"听说Umi的 MFSU 比 Vite 都要快？翻源码品一下！","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/前端性能优化/听说Umi的 MFSU 比 Vite 都要快？翻源码品一下！.md","filePath":"frontend-engineering/前端性能优化/听说Umi的 MFSU 比 Vite 都要快？翻源码品一下！.md","lastUpdated":1693379097000}'),l={name:"frontend-engineering/前端性能优化/听说Umi的 MFSU 比 Vite 都要快？翻源码品一下！.md"},o=p(`<h1 id="听说umi的-mfsu-比-vite-都要快-翻源码品一下" tabindex="-1">听说Umi的 MFSU 比 Vite 都要快？翻源码品一下！ <a class="header-anchor" href="#听说umi的-mfsu-比-vite-都要快-翻源码品一下" aria-label="Permalink to &quot;听说Umi的 MFSU 比 Vite 都要快？翻源码品一下！&quot;">​</a></h1><h1 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h1><p>大家好，由于最近在研究如何提高项目启动速度，项目是基于webpack的，也找了很多方法。 最后试下来，有这么几种方式可以明显提升构建速度：</p><ul><li>使用 webpack5</li><li>开启 webpack5 的持久化缓存（真的是相当快）</li><li>开启webpack5 的实验特性 lazyCompilation （有点像vite， 访问页面的时候再去编译）</li></ul><p>最后发现确实提升非常大， 项目从原本的<code>80s</code>直接降低到<code>20s</code>左右。但是，直到我看到了umi的mfsu，我就不淡定了：</p><p><a href="https://umijs.org/blog/mfsu-faster-than-vite" target="_blank" rel="noreferrer">文档地址</a></p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d1865d0e50449e0a4a57a76cdfe2a12~tplv-k3u1fbpfcp-watermark.image?" alt="" width="70%"><p>先说我自己试过后得出的结论（仅供参考）</p><ul><li><p>由于我们的项目比较大，感觉提升并不明显，与开启<code>cache</code>和<code>lazyCompilation</code> 感觉是差不多的，没有专业的计算过时间，但是基本都在<code>20s</code>左右构建完成。</p></li><li><p>从官方提供的demo来看，mfsu确实非常快，而且不像<code>lazyCompilation</code>那样，进了页面还要编译一下。大家可以下载demo试试。</p></li><li><p>比Vite快？说实话没感觉出来。</p></li></ul><p>言归正传，MFSU的设计思想还是挺新鲜的。借助了模块联邦，将三方模块提前打包。其实这一点与Vite的预编译挺像的。</p><p>好了，下面介绍下webpack5项目如何接入<code>mfsu</code> 以及 <code>mfsu</code>的原理。</p><h1 id="二、mfsu接入" tabindex="-1">二、MFSU接入 <a class="header-anchor" href="#二、mfsu接入" aria-label="Permalink to &quot;二、MFSU接入&quot;">​</a></h1><p>如何在没有使用umi的项目中接入呢？首先你的构建工具必须是<code>webpack5</code>。下面跟我一块配置吧：</p><h3 id="_1-安装" tabindex="-1">1. 安装 <a class="header-anchor" href="#_1-安装" aria-label="Permalink to &quot;1. 安装&quot;">​</a></h3><pre><code>npm i @umijs/mfsu -D
</code></pre><h3 id="_2-初始化实例" tabindex="-1">2. 初始化实例 <a class="header-anchor" href="#_2-初始化实例" aria-label="Permalink to &quot;2. 初始化实例&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">MFSU</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@umijs/mfsu&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mfsu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MFSU</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  implementor: webpack,</span></span>
<span class="line"><span style="color:#E1E4E8;">  buildDepWithESBuild: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 如果你项目装了esbuild, 可以开启，设置为true</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">MFSU</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@umijs/mfsu&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webpack</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;webpack&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mfsu</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MFSU</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  implementor: webpack,</span></span>
<span class="line"><span style="color:#24292E;">  buildDepWithESBuild: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 如果你项目装了esbuild, 可以开启，设置为true</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="_3-添加中间件" tabindex="-1">3. 添加中间件 <a class="header-anchor" href="#_3-添加中间件" aria-label="Permalink to &quot;3. 添加中间件&quot;">​</a></h3><pre><code>module.exports = {
  devServer: {
    // [mfsu] 2. add mfsu middleware
    setupMiddlewares(middlewares, devServer) {
      middlewares.unshift(
        ...mfsu.getMiddlewares()
      )
      return middlewares
    },
  }
}
</code></pre><h3 id="_4-配置babel插件" tabindex="-1">4. 配置babel插件 <a class="header-anchor" href="#_4-配置babel插件" aria-label="Permalink to &quot;4. 配置babel插件&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// handle javascript source loader</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#79B8FF;">[jt]</span><span style="color:#DBEDFF;">sx</span><span style="color:#F97583;">?$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          loader: </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#6A737D;">// [mfsu] 3. add mfsu babel plugins</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">mfsu.</span><span style="color:#B392F0;">getBabelPlugins</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// handle javascript source loader</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#005CC5;">[jt]</span><span style="color:#032F62;">sx</span><span style="color:#D73A49;">?$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: {</span></span>
<span class="line"><span style="color:#24292E;">          loader: </span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          options: {</span></span>
<span class="line"><span style="color:#24292E;">            plugins: [</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6A737D;">// [mfsu] 3. add mfsu babel plugins</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">mfsu.</span><span style="color:#6F42C1;">getBabelPlugins</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            ]</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_5-设置webpack配置" tabindex="-1">5. 设置Webpack配置 <a class="header-anchor" href="#_5-设置webpack配置" aria-label="Permalink to &quot;5. 设置Webpack配置&quot;">​</a></h3><p>注意：下面需要传入两个config, 一个是你的webpack配置，一个是depConfig 用来打包依赖的配置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">depConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    extensions: [</span><span style="color:#9ECBFF;">&#39;.ts&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.tsx&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;.jsx&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#79B8FF;">[jt]</span><span style="color:#DBEDFF;">sx</span><span style="color:#F97583;">?$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          loader: </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            presets: [</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&#39;@babel/preset-react&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&#39;@babel/preset-typescript&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            ],</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> mfsu.</span><span style="color:#B392F0;">setWebpackConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    config, </span><span style="color:#6A737D;">// 你的webpack配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    depConfig</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> config</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getConfig</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">depConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  output: {},</span></span>
<span class="line"><span style="color:#24292E;">  resolve: {</span></span>
<span class="line"><span style="color:#24292E;">    extensions: [</span><span style="color:#032F62;">&#39;.ts&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.tsx&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;.jsx&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#005CC5;">[jt]</span><span style="color:#032F62;">sx</span><span style="color:#D73A49;">?$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: {</span></span>
<span class="line"><span style="color:#24292E;">          loader: </span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          options: {</span></span>
<span class="line"><span style="color:#24292E;">            presets: [</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&#39;@babel/preset-env&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&#39;@babel/preset-react&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&#39;@babel/preset-typescript&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            ],</span></span>
<span class="line"><span style="color:#24292E;">          },</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [],</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> mfsu.</span><span style="color:#6F42C1;">setWebpackConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    config, </span><span style="color:#6A737D;">// 你的webpack配置</span></span>
<span class="line"><span style="color:#24292E;">    depConfig</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> config</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getConfig</span><span style="color:#24292E;">()</span></span></code></pre></div><p>OK，这样就配置好了，你以为可以运行了？然后各种坑就接踵而来，一个错仿佛连着下一个错。</p><p>下面列一下我在接入后踩得各种坑</p><h1 id="三、mfsu踩坑" tabindex="-1">三、MFSU踩坑 <a class="header-anchor" href="#三、mfsu踩坑" aria-label="Permalink to &quot;三、MFSU踩坑&quot;">​</a></h1><h3 id="cannot-found-xxx-module" tabindex="-1">cannot found &#39;./xxx&#39; module <a class="header-anchor" href="#cannot-found-xxx-module" aria-label="Permalink to &quot;cannot found &#39;./xxx&#39; module&quot;">​</a></h3><p>提示找不到模块，这是因为入口不能是相对路径，有人也提了<a href="https://github.com/umijs/umi/issues/9799" target="_blank" rel="noreferrer">issue</a></p><h3 id="loading-script-failed" tabindex="-1">Loading Script failed <a class="header-anchor" href="#loading-script-failed" aria-label="Permalink to &quot;Loading Script failed&quot;">​</a></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec38513fdfb8414e8cb62c8b2885552d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>这个情况基本无解，你会发现用webpack打包依赖，没有生成 <code>MFSU_CACHE.json</code> 和 <code>mf-va_remoteEntry.js</code>，所以必须用esbuild打包依赖。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MFSU</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  implementor: webpack,</span></span>
<span class="line"><span style="color:#E1E4E8;">  buildDepWithESBuild: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 使用esbuild打包依赖</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MFSU</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  implementor: webpack,</span></span>
<span class="line"><span style="color:#24292E;">  buildDepWithESBuild: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 使用esbuild打包依赖</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="排除external" tabindex="-1">排除external <a class="header-anchor" href="#排除external" aria-label="Permalink to &quot;排除external&quot;">​</a></h3><p>如果你的项目用到了<code>vue</code>, <code>vuex</code>, <code>vue-router</code>， 并且它们是CDN的方式引入，那肯定会报错的，为什么呢？因为模块联邦远程代码的加载是异步的，而CDN的代码在加载完成后，代码执行是同步的。你的远程模块还没加载过来，就执行过去了。</p><p>所以需要用<code>MFSU</code>的配置排除一下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MFSU</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    implementor: webpack,</span></span>
<span class="line"><span style="color:#E1E4E8;">    buildDepWithESBuild: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    unMatchLibs: [ </span><span style="color:#6A737D;">// 排除一下 lib</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">vue</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">vuex</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">vue-router</span><span style="color:#9ECBFF;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MFSU</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    implementor: webpack,</span></span>
<span class="line"><span style="color:#24292E;">    buildDepWithESBuild: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    unMatchLibs: [ </span><span style="color:#6A737D;">// 排除一下 lib</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">/vue/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">/vuex/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">/vue-router/</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span></code></pre></div><h1 id="四、mfsu的执行过程" tabindex="-1">四、MFSU的执行过程 <a class="header-anchor" href="#四、mfsu的执行过程" aria-label="Permalink to &quot;四、MFSU的执行过程&quot;">​</a></h1><p>MFSU的执行过程，可以分为两部分：</p><ul><li>本地应用构建（其实就是你的项目）</li><li>远程应用构建（你的项目所依赖的lib, 会被当做远程应用）</li></ul><h2 id="本地应用" tabindex="-1">本地应用 <a class="header-anchor" href="#本地应用" aria-label="Permalink to &quot;本地应用&quot;">​</a></h2><h3 id="_1-初始化阶段" tabindex="-1">1. 初始化阶段 <a class="header-anchor" href="#_1-初始化阶段" aria-label="Permalink to &quot;1. 初始化阶段&quot;">​</a></h3><h4 id="_1-初始化mfsu配置" tabindex="-1">（1）初始化MFSU配置 <a class="header-anchor" href="#_1-初始化mfsu配置" aria-label="Permalink to &quot;（1）初始化MFSU配置&quot;">​</a></h4><p>首先会创建<code>new MFSU</code>实例，在构造函数中会做这些事：</p><ul><li>从静态缓存文件<code>MFSU_CACHE.json</code> 中获取模块依赖配置</li><li>遍历<code>MFSU_CACHE.json</code> 直接生成模块树，这一步是为了跳过在你项目编译中的依赖收集的过程。</li></ul><h4 id="_2-设置babel插件" tabindex="-1">（2）设置babel插件 <a class="header-anchor" href="#_2-设置babel插件" aria-label="Permalink to &quot;（2）设置babel插件&quot;">​</a></h4><p>设置了babel插件，简单来讲，就是用来<code>收集三方模块依赖</code> 和 <code>替换模块资源路径</code>， 这一块我们下面讲。</p><h4 id="_3-设置中间件" tabindex="-1">（3）设置中间件 <a class="header-anchor" href="#_3-设置中间件" aria-label="Permalink to &quot;（3）设置中间件&quot;">​</a></h4><p>设置中间件，中间的作用是为了为了响应远程应用的资源，因为我们知道mfsu打包后会生成<code>mf-va_remoteEntry.js</code></p><h4 id="_4-设置webpack配置" tabindex="-1">（4）设置webpack配置 <a class="header-anchor" href="#_4-设置webpack配置" aria-label="Permalink to &quot;（4）设置webpack配置&quot;">​</a></h4><p>这一步就很关键了，主要分为以下几点：</p><ul><li><p><strong>创建虚拟入口模块</strong></p><p>用<code>import(&#39;src/index.ts&#39;)</code>作一个重新导入，这里为什么要把你的入口变成动态导入呢？原因也很简单：<strong>模块联邦的加载是异步的，而入口文件的执行是同步的</strong>。MFSU相当于创建了一个虚拟入口，然后动态导入了你的入口。</p><p>可以看到它使用<code>WebpackVirtualModules</code>这个插件来实现的。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f2d8387d48847fbb17d0dff53732b32~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li><li><p><strong>创建本地模块联邦应用</strong></p><p>在这里，musu给你的webpack配置注入了模块联邦插件，并且直接<code>把你的项目启动Server作为了远程应用的Server</code>.</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a66afb085b842bd80c50843c15794b3~tplv-k3u1fbpfcp-watermark.image?" alt="" width="70%"><p>它的远程路径为 <code>mf@/mf-va_remoteEntry.js</code>, <code>/</code>其实就是代表当前项目启动的<code>Server</code></p></li><li><p><strong>监听done事件</strong></p><p>下面mfsu继续注入了<code>BuildDepPlugin</code>, 目的是监听<code>done</code>事件，等你的项目编译完成后，就开始正式打包远程应用。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51ecd0ad939e46449fc35a70add2b681~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p></li></ul><h3 id="_2-构建阶段" tabindex="-1">2. 构建阶段 <a class="header-anchor" href="#_2-构建阶段" aria-label="Permalink to &quot;2. 构建阶段&quot;">​</a></h3><p>在上面，mfsu做了一系列的初始化操作，过程也非常简单。那么在项目构建过程中，又发生了什么呢？</p><h4 id="_1-替换依赖的source" tabindex="-1">（1）替换依赖的source <a class="header-anchor" href="#_1-替换依赖的source" aria-label="Permalink to &quot;（1）替换依赖的source&quot;">​</a></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68c1b7edad9f4989a7e89e3da8e24440~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到，babel在分析<code>Program</code>这个节点时，先获取到body上的ast节点，然后去修改了source</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">node.source.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> replaceValue;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">node.source.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> replaceValue;</span></span></code></pre></div><p>举个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span></code></pre></div><p>如果匹配到vue是一个三方模块，那么它的路径会被修改为</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;mf/vue&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;mf/vue&#39;</span></span></code></pre></div><p>最后访问页面时，实际会去请求<code>远程应用</code>的模块。</p><h4 id="_2-babel插件收集依赖" tabindex="-1">（2）babel插件收集依赖 <a class="header-anchor" href="#_2-babel插件收集依赖" aria-label="Permalink to &quot;（2）babel插件收集依赖&quot;">​</a></h4><p>在编译完成后的插件post方法中，将所有的依赖给收集起来。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa3d0afa3766446f92555ad4e3f2a34c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="远程应用" tabindex="-1">远程应用 <a class="header-anchor" href="#远程应用" aria-label="Permalink to &quot;远程应用&quot;">​</a></h2><h3 id="_1-触发依赖构建" tabindex="-1">1. 触发依赖构建 <a class="header-anchor" href="#_1-触发依赖构建" aria-label="Permalink to &quot;1. 触发依赖构建&quot;">​</a></h3><p>前面说到，在<code>BuildDepPlugin</code>插件中，监听了<code>done</code>事件，项目编译完成后，会触发依赖<code>build</code>。</p><p>但在构建前，需要判断<code>shouldBuild</code>， 如果依赖和缓存中的依赖对比，没有发生变化，可以直接<code>跳过依赖构建</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d316eabcc2434973afc1459dd81e8302~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>没有命中缓存，就重新构建依赖。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5b799aa84902407781bb7640c944cb6d~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"><p>可以看到，我们可以选择用<code>webpack</code>还是<code>esbuild</code>打包</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.buildDepWithESBuild) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">buildWithESBuild</span><span style="color:#E1E4E8;">(buildOpts);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">buildWithWebpack</span><span style="color:#E1E4E8;">(buildOpts);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.buildDepWithESBuild) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">buildWithESBuild</span><span style="color:#24292E;">(buildOpts);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">buildWithWebpack</span><span style="color:#24292E;">(buildOpts);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-webpack是如何打包依赖的" tabindex="-1">2. webpack是如何打包依赖的 <a class="header-anchor" href="#_2-webpack是如何打包依赖的" aria-label="Permalink to &quot;2. webpack是如何打包依赖的&quot;">​</a></h3><p>说到用webpack打包依赖，大家应该想起前面的<code>depConfigs</code>，它是用来打包依赖的webpack配置。</p><p>在<code>getWebpackConfig</code>方法中，mfsu 对配置做了一些修改。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">getWebpackConfig</span><span style="color:#E1E4E8;">(opts: { deps: Dep[] }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mfName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.mfName</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">depConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lodash.</span><span style="color:#B392F0;">cloneDeep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.depConfig</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 。。。其他</span></span>
<span class="line"><span style="color:#E1E4E8;">    depConfig.entry </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.tmpBase</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">MF_ENTRY</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 其他</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exposes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.deps.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;&gt;((</span><span style="color:#FFAB70;">memo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">dep</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      memo[</span><span style="color:#9ECBFF;">\`./\${</span><span style="color:#E1E4E8;">dep</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">file</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.tmpBase</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">, dep.filePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> memo;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {});</span></span>
<span class="line"><span style="color:#E1E4E8;">    depConfig.plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.implementor.container.</span><span style="color:#B392F0;">ModuleFederationPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        library: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          type: </span><span style="color:#9ECBFF;">&#39;global&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: mfName,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: mfName,</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename: </span><span style="color:#79B8FF;">REMOTE_FILE_FULL</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exposes,</span></span>
<span class="line"><span style="color:#E1E4E8;">        shared: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.shared </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> depConfig;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">getWebpackConfig</span><span style="color:#24292E;">(opts: { deps: Dep[] }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mfName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.mfName</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">depConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lodash.</span><span style="color:#6F42C1;">cloneDeep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.depConfig</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 。。。其他</span></span>
<span class="line"><span style="color:#24292E;">    depConfig.entry </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.tmpBase</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">MF_ENTRY</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ... 其他</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exposes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.deps.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;&gt;((</span><span style="color:#E36209;">memo</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dep</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      memo[</span><span style="color:#032F62;">\`./\${</span><span style="color:#24292E;">dep</span><span style="color:#032F62;">.</span><span style="color:#24292E;">file</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.tmpBase</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">, dep.filePath);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> memo;</span></span>
<span class="line"><span style="color:#24292E;">    }, {});</span></span>
<span class="line"><span style="color:#24292E;">    depConfig.plugins.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.implementor.container.</span><span style="color:#6F42C1;">ModuleFederationPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        library: {</span></span>
<span class="line"><span style="color:#24292E;">          type: </span><span style="color:#032F62;">&#39;global&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          name: mfName,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        name: mfName,</span></span>
<span class="line"><span style="color:#24292E;">        filename: </span><span style="color:#005CC5;">REMOTE_FILE_FULL</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        exposes,</span></span>
<span class="line"><span style="color:#24292E;">        shared: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.shared </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {},</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> depConfig;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div><p>可以看到，核心主要有两块</p><ul><li><p>设置了依赖构建的入口，也就是<code>.mfsu/mf_index.js</code>，这个文件其实没有任何作用，只是为了让webpack不报错。</p></li><li><p>注入了<code>ModuleFederationPlugin</code>, 并把依赖通过<code>exposes</code>暴露出来</p><p>可以看到，下面的代码中，遍历了所有三方依赖，并且生成了最终的<code>exposes</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exposes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> opts.deps.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;&gt;((</span><span style="color:#FFAB70;">memo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">dep</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    memo[</span><span style="color:#9ECBFF;">\`./\${</span><span style="color:#E1E4E8;">dep</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">file</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.opts.mfsu.opts.tmpBase</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">, dep.filePath);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> memo;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, {});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exposes</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> opts.deps.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Record</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">&gt;&gt;((</span><span style="color:#E36209;">memo</span><span style="color:#24292E;">, </span><span style="color:#E36209;">dep</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    memo[</span><span style="color:#032F62;">\`./\${</span><span style="color:#24292E;">dep</span><span style="color:#032F62;">.</span><span style="color:#24292E;">file</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.opts.mfsu.opts.tmpBase</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">, dep.filePath);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> memo;</span></span>
<span class="line"><span style="color:#24292E;">  }, {});</span></span></code></pre></div></li></ul><p>打包完成后可以看到下面的文件：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8085d991580847fd8f13470a701a7d9f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>随便打开一个：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75e601270a9f4c62926a593849a0f9b1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>发现仅仅是把模块导出来了。为什么会这样呢？</p><p>你可以把<code>.mfsu目录</code>想象成一个远程应用，如果你想暴露出模块，是不是必须这样写：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleFederationPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">   exposes: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;./button&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./src/button&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleFederationPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">   exposes: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;./button&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./src/button&quot;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>你得保证这个文件存在呀！那么打包后的代码在哪里呢？</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcb155fda4f2475a9dbf7087c337a89e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>其实全都在<code>mf-va_remoteEntry.js</code>这个文件里面。</p><h3 id="_3-esbuild是如何打包依赖的" tabindex="-1">3. esbuild是如何打包依赖的 <a class="header-anchor" href="#_3-esbuild是如何打包依赖的" aria-label="Permalink to &quot;3. esbuild是如何打包依赖的&quot;">​</a></h3><p>我们先来思考一个问题，esbuild 我们知道，是没有模块联邦插件的。也不可能实现这些功能，那么有没有可能模块联邦其实就是一堆代码模板。</p><p>没错~模块联邦的运行时代码，其实非常固定，我们能直接套过来。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85a884d61d2948f4a24d61dc47d2951e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a87e316c9f24342be8c6ecee781d0b0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fb787aad3afe43539088487ab1725bac~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"> 可以看到mfsu模拟实现了webpack打包模块联邦后的代码，esbuild只提供生成依赖模块的代码。</p><p>其详细实现，大家可以自行研究。</p><h1 id="五、mfsu概览和总结" tabindex="-1">五、MFSU概览和总结 <a class="header-anchor" href="#五、mfsu概览和总结" aria-label="Permalink to &quot;五、MFSU概览和总结&quot;">​</a></h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cef4446379ae44a7a8f60a0e0ae7b03b~tplv-k3u1fbpfcp-watermark.image?" alt="image2022-11-2513-59-40.png"></p><p>我们来总结一下过程</p><ul><li><p>本地应用</p><ul><li>首先加载缓存依赖树</li><li>注入babel插件</li><li>注入中间件</li><li>注入模块联邦插件（本地）</li><li>分析依赖（替换资源、收集依赖）</li><li>生成新的依赖树</li></ul></li><li><p>远程应用</p><ul><li>监听构建完成</li><li>判断是否命中缓存，可以跳过依赖构建</li><li>注入模块联邦插件（远程），根据依赖生成exposes。</li><li>写入缓存<code>MFSU_CACHE.json</code>, 打包生成<code>mf-va_remoteEntry.js</code></li></ul></li></ul><h1 id="六、结语" tabindex="-1">六、结语 <a class="header-anchor" href="#六、结语" aria-label="Permalink to &quot;六、结语&quot;">​</a></h1><p>在看了mfsu源码后，发现模块联邦竟然还能这么玩。</p><p><strong>但是坑感觉比较多。另外对项目的优化，目前没有感觉提升明显，或许是哪里配置有问题 或许使用姿势不正确 ?</strong></p><p>欢迎大家讨论和指正~</p>`,106),e=[o];function c(t,r,E,i,y,d){return a(),n("div",null,e)}const m=s(l,[["render",c]]);export{F as __pageData,m as default};
