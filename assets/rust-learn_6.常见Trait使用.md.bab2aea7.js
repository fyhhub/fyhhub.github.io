import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.3d945e71.js";const u=JSON.parse('{"title":"常见Trait使用","description":"","frontmatter":{},"headers":[],"relativePath":"rust-learn/6.常见Trait使用.md","filePath":"rust-learn/6.常见Trait使用.md","lastUpdated":1712455947000}'),p={name:"rust-learn/6.常见Trait使用.md"},o=l(`<h1 id="常见trait使用" tabindex="-1">常见Trait使用 <a class="header-anchor" href="#常见trait使用" aria-label="Permalink to &quot;常见Trait使用&quot;">​</a></h1><h2 id="fromstr" tabindex="-1">FromStr <a class="header-anchor" href="#fromstr" aria-label="Permalink to &quot;FromStr&quot;">​</a></h2><p>假设你有一个字符串&quot;42&quot;，你想要将它解析为i32类型的数字：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;42&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> num</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> num_str</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Parsed number: {}&quot;</span><span style="color:#E1E4E8;">, num);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;42&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> num</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> num_str</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Parsed number: {}&quot;</span><span style="color:#24292E;">, num);</span></span></code></pre></div><p>对于<strong>自定义类型</strong>，如果你想能够使用<code>parse</code>方法将字符串转换为该类型的实例，你需要手动实现<code>FromStr trait</code>。下面是一个简单的例子，展示了如何为自定义类型实现<code>FromStr</code>：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">str</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">FromStr</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FromStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">from_str</span><span style="color:#E1E4E8;">(s</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Self</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">Self</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parts</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vec</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">&amp;</span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> parts</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">len</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Input must be in the format &#39;x,y&#39;&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_string</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parts[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">&gt;()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">map_err</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Invalid integer&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parts[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">&gt;()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">map_err</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">_</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Invalid integer&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> { x, y })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> point_str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3,4&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> point</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> point_str</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Parsed point: ({}, {})&quot;</span><span style="color:#E1E4E8;">, point</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">x, point</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">y);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">str</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">FromStr</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FromStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">from_str</span><span style="color:#24292E;">(s</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Self</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">Self</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parts</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vec</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">&amp;</span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> parts</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">len</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Input must be in the format &#39;x,y&#39;&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_string</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parts[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">&gt;()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">map_err</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Invalid integer&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> y </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parts[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">&gt;()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">map_err</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">_</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Invalid integer&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> { x, y })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> point_str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3,4&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> point</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> point_str</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Parsed point: ({}, {})&quot;</span><span style="color:#24292E;">, point</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">x, point</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">y);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="add" tabindex="-1">Add <a class="header-anchor" href="#add" aria-label="Permalink to &quot;Add&quot;">​</a></h2><p>为Point结构体实现Add&lt;Size&gt;特征，以便可以将Point和Size相加：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Debug</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">PartialEq</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Debug</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">PartialEq</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Size</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    width</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    height</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">ops</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">impl</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Add</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Size</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Output</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, other</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Size</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Point</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> other</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">width,</span></span>
<span class="line"><span style="color:#E1E4E8;">            y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">self</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">y </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> other</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">height,</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Debug</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">PartialEq</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Debug</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">PartialEq</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Size</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    width</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    height</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">ops</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">impl</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Add</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Size</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Output</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, other</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Size</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Point</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> other</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">width,</span></span>
<span class="line"><span style="color:#24292E;">            y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">self</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">y </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> other</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">height,</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><p>需要注意的是，谁在前面，谁就要实现Add特征。</p></li><li><p>如果是 Point + Point 就不需要给Add传泛型参数</p></li></ul><h2 id="send" tabindex="-1">Send <a class="header-anchor" href="#send" aria-label="Permalink to &quot;Send&quot;">​</a></h2><ul><li>一个任务要实现 Send 特征，那它在 .await 调用的过程中所持有的全部数据都必须实现 Send 特征</li><li>若实现了 Send 特征(可以在线程间安全地移动)，那任务自然也就可以在线程间安全地移动。</li></ul>`,12),e=[o];function t(r,c,E,y,i,F){return n(),a("div",null,e)}const A=s(p,[["render",t]]);export{u as __pageData,A as default};
