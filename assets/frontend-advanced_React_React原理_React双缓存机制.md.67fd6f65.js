import{_ as e,o,c as r,Q as a}from"./chunks/framework.3d945e71.js";const t="/React双缓存机制1.drawio.png",c="/React双缓存机制2.drawio.png",d="/React双缓存机制3.drawio.png",n="/React双缓存机制4.drawio.png",g=JSON.parse('{"title":"React 双缓存机制","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-advanced/React/React原理/React双缓存机制.md","filePath":"frontend-advanced/React/React原理/React双缓存机制.md","lastUpdated":1697009760000}'),i={name:"frontend-advanced/React/React原理/React双缓存机制.md"},s=a('<h1 id="react-双缓存机制" tabindex="-1">React 双缓存机制 <a class="header-anchor" href="#react-双缓存机制" aria-label="Permalink to &quot;React 双缓存机制&quot;">​</a></h1><p>在<code>React</code>中存在，两个 fiber 树。当前屏幕上展示的<code>fiber树</code>是<code>current fiber树</code>，正在内存中构建的是<code>worInProgress fiber树</code></p><p><code>current fiber</code>节点和<code>worInProgress fiber</code>节点使用<code>alternate</code>连接</p><p>React 应用的根节点通过使<code>current</code>指针在不同 Fiber 树的 rootFiber 间切换来完成<code>current Fiber树</code>指向的切换。</p><h2 id="初次-mount-时" tabindex="-1">初次 mount 时 <a class="header-anchor" href="#初次-mount-时" aria-label="Permalink to &quot;初次 mount 时&quot;">​</a></h2><p>初次渲染时，<code>current</code>指向的 rootFiber 是没有子节点的，然后开始构建右边的<code>workInProgress树</code>, 通过<code>createWorkInProgress</code>, 创建<code>workInProgress树</code>的<code>rootFiber</code>, 也就是右边部分</p><p><img src="'+t+'" alt="React双缓存机制.drawio.png"></p><h2 id="初次-mount-完成" tabindex="-1">初次 mount 完成 <a class="header-anchor" href="#初次-mount-完成" aria-label="Permalink to &quot;初次 mount 完成&quot;">​</a></h2><p>当<code>workInProgress树</code>构建完成后，current 指针将指向<code>右侧的workInProgress树</code><img src="'+c+'" alt="React双缓存机制.drawio.png"></p><h2 id="更新时" tabindex="-1">更新时 <a class="header-anchor" href="#更新时" aria-label="Permalink to &quot;更新时&quot;">​</a></h2><p>更新状态下，current 已经存在，并且<code>alternate</code>上存在<code>workInProgress</code>, 那么会基于<code>current</code>树，再创建<code>workInProgress</code>自己的 fiber 节点，如下</p><p><img src="'+d+'" alt="React双缓存机制.drawio.png"></p><h2 id="更新完成" tabindex="-1">更新完成 <a class="header-anchor" href="#更新完成" aria-label="Permalink to &quot;更新完成&quot;">​</a></h2><p><img src="'+n+'" alt="React双缓存机制.drawio.png"></p><p>更新完成后 currnet 就指向了左边，那么在后续的过程中，双缓冲机制，会<code>不断切换current指向</code>，并复用之前已经创建好的 fiber 节点</p>',15),p=[s];function _(l,u,h,m,f,R){return o(),r("div",null,p)}const P=e(i,[["render",_]]);export{g as __pageData,P as default};
