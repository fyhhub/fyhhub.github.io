import{_ as e,o,c as t,Q as c}from"./chunks/framework.3d945e71.js";const h=JSON.parse('{"title":"什么是IOC,有什么优势","description":"","frontmatter":{},"headers":[],"relativePath":"backend/Nest/1.什么是IOC,有什么优势.md","filePath":"backend/Nest/1.什么是IOC,有什么优势.md","lastUpdated":1712884586000}'),a={name:"backend/Nest/1.什么是IOC,有什么优势.md"},_=c('<h1 id="什么是ioc-有什么优势" tabindex="-1">什么是IOC,有什么优势 <a class="header-anchor" href="#什么是ioc-有什么优势" aria-label="Permalink to &quot;什么是IOC,有什么优势&quot;">​</a></h1><p>IOC 中文名反转控制 （Inverse Of Control），在后端系统中，有很多对象，例如：</p><ul><li>Controller 对象：接收 http 请求，调用 Service，返回响应</li><li>Service 对象：实现业务逻辑</li><li>Repository 对象：实现对数据库的增删改查</li><li>DataSource对象等</li></ul><p>以上这些对象，存在依赖关系，需要按一定的顺序创建对象。<code>IOC</code>实现的就是，根据我声明的依赖，帮助我自动创建对象，并注入依赖的对象。</p><p>在<code>nest.js</code>中，可以通过<code>@Injectable</code> 来声明这个类是可以<code>被注入</code> 和 <code>注入</code> 的, 也可以使用<code>@Controller</code>来声明一个请求控制器，但是只能<code>被注入</code></p>',5),d=[_];function r(s,i,l,n,p,C){return o(),t("div",null,d)}const O=e(a,[["render",r]]);export{h as __pageData,O as default};
