import{_ as e,o,c as s,Q as a}from"./chunks/framework.3d945e71.js";const E=JSON.parse('{"title":"12.v-model 原理","description":"","frontmatter":{"order":12},"headers":[],"relativePath":"frontend-advanced/vue/Vue2/12.v-model原理.md","filePath":"frontend-advanced/vue/Vue2/12.v-model原理.md","lastUpdated":1712455947000}'),t={name:"frontend-advanced/vue/Vue2/12.v-model原理.md"},n=a('<h1 id="_12-v-model-原理" tabindex="-1">12.v-model 原理 <a class="header-anchor" href="#_12-v-model-原理" aria-label="Permalink to &quot;12.v-model 原理&quot;">​</a></h1><h2 id="核心答案" tabindex="-1">核心答案 <a class="header-anchor" href="#核心答案" aria-label="Permalink to &quot;核心答案&quot;">​</a></h2><p>v-model 最终会被模板编译成<code>value</code>和<code>input事件</code>(输入框)，如果是<code>checkbox</code>会被编译为<code>checked</code>和<code>change事件</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;_c(&#39;input&#39;,{directives:[{name:&quot;</span><span style="color:#E1E4E8;">model</span><span style="color:#9ECBFF;">&quot;,rawName:&quot;</span><span style="color:#E1E4E8;">v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">model</span><span style="color:#9ECBFF;">&quot;,value:(message),expression:&quot;</span><span style="color:#E1E4E8;">message</span><span style="color:#9ECBFF;">&quot;}],attrs:{&quot;</span><span style="color:#E1E4E8;">type</span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;">text</span><span style="color:#9ECBFF;">&quot;},domProps:{&quot;</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">&quot;:(message)},on:{&quot;</span><span style="color:#E1E4E8;">input</span><span style="color:#9ECBFF;">&quot;:function($event){if($event.target.composing)return;message=$event.target.value}}})&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;_c(&#39;input&#39;,{directives:[{name:&quot;</span><span style="color:#24292E;">model</span><span style="color:#032F62;">&quot;,rawName:&quot;</span><span style="color:#24292E;">v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">model</span><span style="color:#032F62;">&quot;,value:(message),expression:&quot;</span><span style="color:#24292E;">message</span><span style="color:#032F62;">&quot;}],attrs:{&quot;</span><span style="color:#24292E;">type</span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;">text</span><span style="color:#032F62;">&quot;},domProps:{&quot;</span><span style="color:#24292E;">value</span><span style="color:#032F62;">&quot;:(message)},on:{&quot;</span><span style="color:#24292E;">input</span><span style="color:#032F62;">&quot;:function($event){if($event.target.composing)return;message=$event.target.value}}})&quot;</span></span></code></pre></div><h2 id="补充回答" tabindex="-1">补充回答 <a class="header-anchor" href="#补充回答" aria-label="Permalink to &quot;补充回答&quot;">​</a></h2><p>然而 v-model 仅仅是起到合并语法，创建一个新的语法糖的意义吗？ 显然答案是否定的，对于需要使用输入法 (如中文、日文、韩文等) 的语言，会发现 v-model 不会在输入法组合文字过程中得到更新。这就是 v-model 的一个重要的特点。它会在事件处理这一层添加新的事件监听 compositionstart,compositionend，他们会分别在语言输入的开始和结束时监听到变化，只要借助$event.target.composing，就可以设计出只会在输入法组合文字的结束阶段才更新数据，这有利于提高用户的使用体验。</p><p>一句话：<strong>优化点，事件用$event.target.composing 属性来保证不会在输入法组合文字过程中更新数据</strong></p>',7),l=[n];function p(c,r,d,u,i,m){return o(),s("div",null,l)}const q=e(t,[["render",p]]);export{E as __pageData,q as default};
