import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.3d945e71.js";const F=JSON.parse('{"title":"性能监控","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/前端性能优化/前端监控/性能监控.md","filePath":"frontend-engineering/前端性能优化/前端监控/性能监控.md","lastUpdated":1699791552000}'),l={name:"frontend-engineering/前端性能优化/前端监控/性能监控.md"},o=p(`<h1 id="性能监控" tabindex="-1">性能监控 <a class="header-anchor" href="#性能监控" aria-label="Permalink to &quot;性能监控&quot;">​</a></h1><p><code>performance.timing</code>这个api已经被慢慢废弃了。</p><p><code>performance.timing</code>与<code>performance.getEntriesByType(&#39;navigation&#39;)[0]</code>两个时间统计会有点差异，前者是<code>绝对时间</code>，后者统计的时间都是相对本次请求开始作为起始时间，这点比较重要。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">performanceData</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> performance.</span><span style="color:#B392F0;">getEntriesByType</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;navigation&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;load&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">performanceData</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> performance.</span><span style="color:#6F42C1;">getEntriesByType</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;navigation&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="计算页面加载时间" tabindex="-1">计算页面加载时间 <a class="header-anchor" href="#计算页面加载时间" aria-label="Permalink to &quot;计算页面加载时间&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">performanceData.loadEventEnd </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> performanceData.domComplete</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">performanceData.loadEventEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> performanceData.domComplete</span></span></code></pre></div><h2 id="计算请求响应时间" tabindex="-1">计算请求响应时间 <a class="header-anchor" href="#计算请求响应时间" aria-label="Permalink to &quot;计算请求响应时间&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">performanceData.responseEnd </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> performanceData.requestStart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">performanceData.responseEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> performanceData.requestStart</span></span></code></pre></div><h2 id="计算dns查询时间" tabindex="-1">计算DNS查询时间 <a class="header-anchor" href="#计算dns查询时间" aria-label="Permalink to &quot;计算DNS查询时间&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">performanceData.domainLookupEnd </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> performanceData.domainLookupStart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">performanceData.domainLookupEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> performanceData.domainLookupStart</span></span></code></pre></div><h2 id="计算tcp连接时间" tabindex="-1">计算TCP连接时间 <a class="header-anchor" href="#计算tcp连接时间" aria-label="Permalink to &quot;计算TCP连接时间&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">performanceData.connectEnd </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> performanceData.connectStart;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">performanceData.connectEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> performanceData.connectStart;</span></span></code></pre></div><h2 id="计算白屏时间" tabindex="-1">计算白屏时间 <a class="header-anchor" href="#计算白屏时间" aria-label="Permalink to &quot;计算白屏时间&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">performanceData.domInteractive </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> performanceData.responseStart</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">performanceData.domInteractive </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> performanceData.responseStart</span></span></code></pre></div><h2 id="计算fcp" tabindex="-1">计算FCP <a class="header-anchor" href="#计算fcp" aria-label="Permalink to &quot;计算FCP&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fcpTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">fcpEntry</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> performance.</span><span style="color:#B392F0;">getEntriesByName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;first-contentful-paint&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (fcpEntry) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fcpTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fcpEntry.startTime;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fcpTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">fcpEntry</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> performance.</span><span style="color:#6F42C1;">getEntriesByName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;first-contentful-paint&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (fcpEntry) {</span></span>
<span class="line"><span style="color:#24292E;">  fcpTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fcpEntry.startTime;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="计算lcp" tabindex="-1">计算LCP <a class="header-anchor" href="#计算lcp" aria-label="Permalink to &quot;计算LCP&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> lcpTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lcpEntries</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> performance.</span><span style="color:#B392F0;">getEntriesByType</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;largest-contentful-paint&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (lcpEntries.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  lcpTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> lcpEntries[lcpEntries.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].renderTime </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> lcpEntries[lcpEntries.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].loadTime;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> lcpTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lcpEntries</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> performance.</span><span style="color:#6F42C1;">getEntriesByType</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;largest-contentful-paint&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (lcpEntries.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  lcpTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> lcpEntries[lcpEntries.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].renderTime </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> lcpEntries[lcpEntries.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].loadTime;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="计算-tbt、tti" tabindex="-1">计算 TBT、TTI <a class="header-anchor" href="#计算-tbt、tti" aria-label="Permalink to &quot;计算 TBT、TTI&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 监听长任务</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tti </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tbt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">observer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PerformanceObserver</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">entryList</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">entry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> entryList.</span><span style="color:#B392F0;">getEntries</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 计算 TBT</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (entry.duration </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      tbt </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> entry.duration </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 计算 TTI</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (tti </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> tbt </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    tti </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> performance.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">observer.</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">({ entryTypes: [</span><span style="color:#9ECBFF;">&quot;longtask&quot;</span><span style="color:#E1E4E8;">] });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 监听长任务</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tti </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tbt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">observer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PerformanceObserver</span><span style="color:#24292E;">((</span><span style="color:#E36209;">entryList</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">entry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> entryList.</span><span style="color:#6F42C1;">getEntries</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 计算 TBT</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (entry.duration </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      tbt </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> entry.duration </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 计算 TTI</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (tti </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> tbt </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    tti </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> performance.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">observer.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">({ entryTypes: [</span><span style="color:#032F62;">&quot;longtask&quot;</span><span style="color:#24292E;">] });</span></span></code></pre></div>`,20),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const g=s(l,[["render",t]]);export{F as __pageData,g as default};
