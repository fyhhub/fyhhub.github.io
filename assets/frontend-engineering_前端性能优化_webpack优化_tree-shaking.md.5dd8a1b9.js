import{_ as s,o as a,c as o,Q as e}from"./chunks/framework.3d945e71.js";const u=JSON.parse('{"title":"TreeShaking","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/前端性能优化/webpack优化/tree-shaking.md","filePath":"frontend-engineering/前端性能优化/webpack优化/tree-shaking.md","lastUpdated":1700360004000}'),n={name:"frontend-engineering/前端性能优化/webpack优化/tree-shaking.md"},l=e(`<h1 id="treeshaking" tabindex="-1">TreeShaking <a class="header-anchor" href="#treeshaking" aria-label="Permalink to &quot;TreeShaking&quot;">​</a></h1><ol><li>尽量使用export {} 导出代码</li></ol><p>使用这样的写法，webpack才能做tree-shaking</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  xxx</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li>不要使用babel将esm转为cjs</li></ol><p>若代码是<code>commonjs</code>代码，将失去tree-shaking优化，需要设置<code>baberc</code>配置中的<code>modules: false</code></p><ol start="3"><li>lib库酌情使用 sideEffects</li></ol><p>通过设置<code>package.json</code>中的<code>sideEffects</code>字段，可以告诉webpack哪些是纯的（无副作用）</p><ol start="4"><li><p>使用 unplugin-vue-components 或 babel-plugin-import 按需引入组件</p></li><li><p>可以使用 /*#<strong>PURE</strong> */ 标记哪些函数调用没有副作用，进而tree-shaking</p></li><li><p>异步模块标记哪些导出被使用</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackExports: [&quot;foo&quot;, &quot;default&quot;] */</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./foo&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.foo);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackExports: [&quot;foo&quot;, &quot;default&quot;] */</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./foo&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.foo);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div>`,10),p=[l];function t(c,r,i,d,E,y){return a(),o("div",null,p)}const h=s(n,[["render",t]]);export{u as __pageData,h as default};
