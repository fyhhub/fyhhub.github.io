import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.3d945e71.js";const u=JSON.parse('{"title":"第 2 章-框架设计的核心要素","description":"","frontmatter":{"order":1},"headers":[],"relativePath":"informal/读书笔记/Vuejs设计与实现/第2章-框架设计的核心要素.md","filePath":"informal/读书笔记/Vuejs设计与实现/第2章-框架设计的核心要素.md","lastUpdated":1694069271000}'),l={name:"informal/读书笔记/Vuejs设计与实现/第2章-框架设计的核心要素.md"},o=p(`<h1 id="第-2-章-框架设计的核心要素" tabindex="-1">第 2 章-框架设计的核心要素 <a class="header-anchor" href="#第-2-章-框架设计的核心要素" aria-label="Permalink to &quot;第 2 章-框架设计的核心要素&quot;">​</a></h1><h2 id="_2-1-提升用户的开发体验" tabindex="-1">2.1 提升用户的开发体验 <a class="header-anchor" href="#_2-1-提升用户的开发体验" aria-label="Permalink to &quot;2.1 提升用户的开发体验&quot;">​</a></h2><h3 id="vue-对-warn-的处理" tabindex="-1">Vue 对 warn 的处理 <a class="header-anchor" href="#vue-对-warn-的处理" aria-label="Permalink to &quot;Vue 对 warn 的处理&quot;">​</a></h3><p>提供友好的报错信息至关重要, 在 Vue 源码中我们经常看到<code>warn函数的调用</code>, 例如下面组件没有 template 的警告信息</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`Component \${</span></span>
<span class="line"><span style="color:#9ECBFF;">    </span><span style="color:#E1E4E8;">comp</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">comp</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">} \`</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">\`\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  </span><span style="color:#9ECBFF;">} is missing template or render function.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`Component \${</span></span>
<span class="line"><span style="color:#032F62;">    </span><span style="color:#24292E;">comp</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">?</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">comp</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">} \`</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">:</span><span style="color:#032F62;"> </span><span style="color:#032F62;">\`\`</span></span>
<span class="line"><span style="color:#032F62;">  </span><span style="color:#032F62;">} is missing template or render function.\`</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>那么 vue 是如何处理错误，进行警告呢，我们来看下 vue 源码的实现</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stack</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">msg</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> stack.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> stack[stack.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].component </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用户传入的警告统一处理函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">appWarnHandler</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.appContext.config.warnHandler;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取组件栈</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trace</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getComponentTrace</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果用户传入了自定义警告函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (appWarnHandler) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 调用 warnHandler 同时处理 warnHandler中可能出现的异常</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      appWarnHandler,</span></span>
<span class="line"><span style="color:#E1E4E8;">      instance,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ErrorCodes.</span><span style="color:#79B8FF;">APP_WARN_HANDLER</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span></span>
<span class="line"><span style="color:#E1E4E8;">        msg </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        instance </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> instance.proxy,</span></span>
<span class="line"><span style="color:#E1E4E8;">        trace</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ({ </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`at &lt;\${</span><span style="color:#B392F0;">formatComponentName</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">instance</span><span style="color:#9ECBFF;">, </span><span style="color:#E1E4E8;">vnode</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">type</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}&gt;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">          )</span></span>
<span class="line"><span style="color:#E1E4E8;">          .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">        trace,</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用户没有传入 warnHandler</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">warnArgs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">\`[Vue warn]: \${</span><span style="color:#E1E4E8;">msg</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      trace.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// avoid spamming console during tests</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">__TEST__</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      warnArgs.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">formatTrace</span><span style="color:#E1E4E8;">(trace));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// log 警告信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">warnArgs);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stack</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VNode</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">msg</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">[]) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> stack.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> stack[stack.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">].component </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用户传入的警告统一处理函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">appWarnHandler</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.appContext.config.warnHandler;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取组件栈</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trace</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getComponentTrace</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果用户传入了自定义警告函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (appWarnHandler) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 调用 warnHandler 同时处理 warnHandler中可能出现的异常</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      appWarnHandler,</span></span>
<span class="line"><span style="color:#24292E;">      instance,</span></span>
<span class="line"><span style="color:#24292E;">      ErrorCodes.</span><span style="color:#005CC5;">APP_WARN_HANDLER</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      [</span></span>
<span class="line"><span style="color:#24292E;">        msg </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        instance </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> instance.proxy,</span></span>
<span class="line"><span style="color:#24292E;">        trace</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            ({ </span><span style="color:#E36209;">vnode</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`at &lt;\${</span><span style="color:#6F42C1;">formatComponentName</span><span style="color:#032F62;">(</span><span style="color:#24292E;">instance</span><span style="color:#032F62;">, </span><span style="color:#24292E;">vnode</span><span style="color:#032F62;">.</span><span style="color:#24292E;">type</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}&gt;\`</span></span>
<span class="line"><span style="color:#24292E;">          )</span></span>
<span class="line"><span style="color:#24292E;">          .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">        trace,</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用户没有传入 warnHandler</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">warnArgs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">\`[Vue warn]: \${</span><span style="color:#24292E;">msg</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* istanbul ignore if */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      trace.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// avoid spamming console during tests</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">__TEST__</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      warnArgs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">\`</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">formatTrace</span><span style="color:#24292E;">(trace));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// log 警告信息</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">warnArgs);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="更加直观的查看-log" tabindex="-1">更加直观的查看 log <a class="header-anchor" href="#更加直观的查看-log" aria-label="Permalink to &quot;更加直观的查看 log&quot;">​</a></h3><p>正常打印一个 ref 是长这样 <img src="https://tvax1.sinaimg.cn/large/006vSZ9Ugy1gzhzhifed3j30x804kq47.jpg" alt="image"></p><p>但是我们可以通过一些设置，来直观的查看 log 数据 <img src="https://tva3.sinaimg.cn/large/006vSZ9Ugy1gzhzfr2ti7j30oc0kkq68.jpg" alt="image"><img src="https://tvax4.sinaimg.cn/large/006vSZ9Ugy1gzhzj4jdhyj30hk0223yo.jpg" alt="image"></p><h2 id="_2-2-控制框架代码的体积" tabindex="-1">2.2 控制框架代码的体积 <a class="header-anchor" href="#_2-2-控制框架代码的体积" aria-label="Permalink to &quot;2.2 控制框架代码的体积&quot;">​</a></h2><p>可以发现 vue 源码中，有很多 warn 都会配合<code>__DEV__</code>常量做检查</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__DEV__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPromise</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`data() returned a Promise - note data() cannot be async; If you \`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`intend to perform data fetching before component renders, use \`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`async setup() + &lt;Suspense&gt;.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__DEV__ </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPromise</span><span style="color:#24292E;">(data)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`data() returned a Promise - note data() cannot be async; If you \`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`intend to perform data fetching before component renders, use \`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`async setup() + &lt;Suspense&gt;.\`</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里的<code>__DEV__</code>是通过 rollup 来预定义全局变量，类似<code>webpack</code>的<code>DefinePlugin</code> 当 Vue.js 在开发环境被使用时，这里<code>__DEV__</code>会被直接编译为<code>true</code>，如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPromise</span><span style="color:#E1E4E8;">(data)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`data() returned a Promise - note data() cannot be async; If you \`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`intend to perform data fetching before component renders, use \`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">\`async setup() + &lt;Suspense&gt;.\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPromise</span><span style="color:#24292E;">(data)) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`data() returned a Promise - note data() cannot be async; If you \`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`intend to perform data fetching before component renders, use \`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">\`async setup() + &lt;Suspense&gt;.\`</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_2-3-框架要做到良好的tree-shaking" tabindex="-1">2.3 框架要做到良好的<code>Tree-Shaking</code> <a class="header-anchor" href="#_2-3-框架要做到良好的tree-shaking" aria-label="Permalink to &quot;2.3 框架要做到良好的\`Tree-Shaking\`&quot;">​</a></h2><p>首先要实现<code>tree-shaking</code>，必须要基于<code>esm</code>规范，因为需要静态分析代码，做<code>dead code</code>去除。</p><p>第二，tree-shaking 的关键是-----副作用, 什么是副作用呢 可以参考我的另一篇文章 <a href="/frontend/webpack/tree-shaking原理.html#什么是tree-shaking">tree-shaking</a></p><p>不过我们还是举个简单的例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> obj.foo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.foo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span></code></pre></div><p>上面的代码经过 rollup 编译后，并不会被去除，为什么呢？假如<code>obj</code>是一个<code>Proxy</code>对象，它有一个 get 函数，如果在 get 函数中产生了副作用，那这个函数也是有副作用的。</p><p>所以如果我们想指定这里函数调用，不会产生副作用，我们可以这么做</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> obj.foo;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  obj </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> obj.foo;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*#__PURE__*/</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span></code></pre></div><p>加上上面的注释后，该代码就会被 tree-shaking， 并且一般来讲<code>/*#__PURE__*/</code>都是用在顶层调用的。</p><p>我们可以看到在 Vue 源码中也有很多这样的代码 <img src="https://tva1.sinaimg.cn/large/006vSZ9Ugy1gzi032242xj30ic02y3zz.jpg" alt="image"></p><h2 id="_2-4-框架应该输出怎样的构建产物" tabindex="-1">2.4 框架应该输出怎样的构建产物 <a class="header-anchor" href="#_2-4-框架应该输出怎样的构建产物" aria-label="Permalink to &quot;2.4 框架应该输出怎样的构建产物&quot;">​</a></h2><p>细心的朋友会发现，vue 源码打包出来后的静态文件，类型非常多，那么它们又分别对应什么环境呢？ <img src="https://tvax3.sinaimg.cn/large/006vSZ9Ugy1gzi05x28dsj30dy07ddgk.jpg" alt="image"></p><table><thead><tr><th>产物</th><th>描述</th></tr></thead><tbody><tr><td>vue.cjs.js</td><td>遵循 commonjs 规范，开发环境使用</td></tr><tr><td>vue.cjs.prod.js</td><td>遵循 commonjs 规范，生产环境使用</td></tr><tr><td>vue.esm-browser.js</td><td>遵循 esm 规范， 用于 script 标签 type=&quot;module&quot;，开发环境使用</td></tr><tr><td>vue.esm-browser.prod.js</td><td>遵循 esm 规范，用于 script 标签 type=&quot;module&quot;，生产环境使用</td></tr><tr><td>vue.esm-bundler</td><td>遵循 esm 规范，开发环境使用</td></tr><tr><td>vue.global.js</td><td>iife 立即执行函数，开发环境使用</td></tr><tr><td>vue.runtime.esm-browser.js</td><td>遵循 esm 规范， 用于 script 标签 type=&quot;module&quot;，开发环境使用，只包含运行时</td></tr><tr><td>vue.runtime.esm-browser.prod.js</td><td>遵循 esm 规范， 用于 script 标签 type=&quot;module&quot;，生产环境使用，只包含运行时</td></tr><tr><td>vue.esm-bundler.js</td><td>遵循 esm 规范，开发环境使用，只包含运行时</td></tr><tr><td>vue.runtime.global.js</td><td>iife 立即执行函数，开发环境使用，只包含运行时</td></tr><tr><td>vue.runtime.global.prod.js</td><td>iife 立即执行函数，生产环境使用，只包含运行时</td></tr></tbody></table><p>那么 Vue 是如何区分不同的开发环境，引入不同的包呢, 我们不难发现，在 vue 的<code>index.js</code>中，有如下代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./dist/vue.cjs.prod.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./dist/vue.cjs.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./dist/vue.cjs.prod.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./dist/vue.cjs.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>另外，如何区分不同的模块规范？其实一般都是通过<code>package.json</code>中的<code>main</code>和<code>module</code>来指定的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;dist/vue.runtime.esm-bundler.js&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 优先使用module</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;dist/vue.runtime.esm-bundler.js&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 优先使用module</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_2-5-特性开关" tabindex="-1">2.5 特性开关 <a class="header-anchor" href="#_2-5-特性开关" aria-label="Permalink to &quot;2.5 特性开关&quot;">​</a></h2><p>在设计框架时，框架会给用户提供诸多特性（或功能），例如我们提供 A、B、C 三个特性给用户，同时还提供了 a、b、c 三个对应的特性开关，用户可以通过设置 a、b、c 为 true 或 false 来代表开启或关闭对应的特性，这将会带来很多益处。</p><p>那怎么实现特性开关呢？利用 rollup.js 的预定义常量插件来实现。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">__FEATURE_OPTIONS_API__</span><span style="color:#E1E4E8;">: isBundlerESMBuild </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`_<wbr>_VUE_OPTIONS_API__\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">__FEATURE_OPTIONS_API__</span><span style="color:#24292E;">: isBundlerESMBuild </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`_<wbr>_VUE_OPTIONS_API__\`</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>对于<code>非esm</code>的构建资源，<code>__FEATURE_OPTIONS_API__</code>会被直接替换成true, 例如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// support for 2.x options</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__FEATURE_OPTIONS_API__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pauseTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">applyOptions</span><span style="color:#E1E4E8;">(instance, Component)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resetTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 源码最终直接变成了true, 此处代码最终会被视为dead code 去除</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pauseTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">applyOptions</span><span style="color:#E1E4E8;">(instance, Component)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resetTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// support for 2.x options</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__FEATURE_OPTIONS_API__) {</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pauseTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">applyOptions</span><span style="color:#24292E;">(instance, Component)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resetTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 源码最终直接变成了true, 此处代码最终会被视为dead code 去除</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pauseTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">applyOptions</span><span style="color:#24292E;">(instance, Component)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resetTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果是<code>esm</code>的构建资源，<code>__FEATURE_OPTIONS_API__</code>会被替换成<code>_<wbr>_VUE_OPTIONS_API__</code>, 例如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__FEATURE_OPTIONS_API__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pauseTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">applyOptions</span><span style="color:#E1E4E8;">(instance, Component)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resetTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 最后变成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (_<wbr>_VUE_OPTIONS_API__) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> instance</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">pauseTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">applyOptions</span><span style="color:#E1E4E8;">(instance, Component)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resetTracking</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__FEATURE_OPTIONS_API__) {</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pauseTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">applyOptions</span><span style="color:#24292E;">(instance, Component)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resetTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 最后变成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (_<wbr>_VUE_OPTIONS_API__) {</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> instance</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">pauseTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">applyOptions</span><span style="color:#24292E;">(instance, Component)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resetTracking</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  currentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>替换成<code>_<wbr>_VUE_OPTIONS_API__</code>, 也就意味着，这个开关是交给用户控制的，例如你可以在你的项目中使用<code>webpack.DefinePlugin</code>来控制这个变量，进而控制是否支持vue 2.x的options</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack.DefinePlugin 插件配置</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">DefinePlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  _<wbr>_VUE_OPTIONS_API__: </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 开启特性</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack.DefinePlugin 插件配置</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> webpack.</span><span style="color:#6F42C1;">DefinePlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  _<wbr>_VUE_OPTIONS_API__: </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 开启特性</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="_2-6-错误处理" tabindex="-1">2.6 错误处理 <a class="header-anchor" href="#_2-6-错误处理" aria-label="Permalink to &quot;2.6 错误处理&quot;">​</a></h2><p>错误处理是框架开发过程中非常重要的环节。框架错误处理机制的好坏直接决定了用户应用程序的健壮性，还决定了用户开发时处理错误的心智负担。</p><p>当你写了一大堆try catch, 就会显得非常不优雅。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// utils.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fn </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e) {</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fn </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;">(e) {</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// utils.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fn </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e) {</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fn </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;">(e) {</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>封装统一的错误处理函数</strong>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// utils.js</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> handleError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(fn)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">foo1</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(fn)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用户可以调用该函数注册统一的错误处理函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">registerErrorHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    handleError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callWithErrorHandling</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    fn </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 将捕获到的错误传递给用户的错误处理程序</span></span>
<span class="line"><span style="color:#E1E4E8;">    handleError </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleError</span><span style="color:#E1E4E8;">(e) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// utils.js</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> handleError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(fn)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">foo1</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(fn)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用户可以调用该函数注册统一的错误处理函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">registerErrorHandler</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    handleError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callWithErrorHandling</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    fn </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 将捕获到的错误传递给用户的错误处理程序</span></span>
<span class="line"><span style="color:#24292E;">    handleError </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleError</span><span style="color:#24292E;">(e) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码中，我们不再需要try catch 并且用户可以自定义错误处理方法。</p><h2 id="_2-7-良好的-typescript-类型支持" tabindex="-1">2.7 良好的 TypeScript 类型支持 <a class="header-anchor" href="#_2-7-良好的-typescript-类型支持" aria-label="Permalink to &quot;2.7 良好的 TypeScript 类型支持&quot;">​</a></h2><p>TypeScript 是由微软开源的编程语言，简称 TS，它是 JavaScript 的超集，能够为 JavaScript 提供类型支持。现在越来越多的开发者和团队在项目中使用 TS。使用 TS 的好处有很多，如代码即文档、编辑器自动提示、一定程度上能够避免低级 bug、代码的可维护性更强等。因此对 TS 类型的支持是否完善也成为评价一个框架的重要指标。</p>`,51),e=[o];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const g=s(l,[["render",c]]);export{u as __pageData,g as default};
