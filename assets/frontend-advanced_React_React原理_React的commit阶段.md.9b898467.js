import{_ as e,o as t,c as o,Q as c}from"./chunks/framework.3d945e71.js";const p=JSON.parse('{"title":"React 的 commit 阶段","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-advanced/React/React原理/React的commit阶段.md","filePath":"frontend-advanced/React/React原理/React的commit阶段.md","lastUpdated":1694138900000}'),a={name:"frontend-advanced/React/React原理/React的commit阶段.md"},i=c('<h1 id="react-的-commit-阶段" tabindex="-1">React 的 commit 阶段 <a class="header-anchor" href="#react-的-commit-阶段" aria-label="Permalink to &quot;React 的 commit 阶段&quot;">​</a></h1><h2 id="flushpassiveeffects" tabindex="-1">flushPassiveEffects <a class="header-anchor" href="#flushpassiveeffects" aria-label="Permalink to &quot;flushPassiveEffects&quot;">​</a></h2><p>在一开始，react 会<code>异步执行</code>还没有执行的<code>useEffect回调</code> 和 <code>上次更新的useEffect的销毁函数</code></p><h2 id="beforemutation-阶段" tabindex="-1">beforeMutation 阶段 <a class="header-anchor" href="#beforemutation-阶段" aria-label="Permalink to &quot;beforeMutation 阶段&quot;">​</a></h2><ul><li>首先进行 dom 的 blur 和 focus 相关操作</li><li>执行<code>getSnapshotBeforeUpdate</code></li><li>scheduleCallback<code>异步调度</code>, <code>flushPassiveEffects</code>会执行<code>useEffect回调</code> 和 <code>上次更新的useEffect的销毁函数</code></li></ul><h2 id="mutation-阶段" tabindex="-1">mutation 阶段 <a class="header-anchor" href="#mutation-阶段" aria-label="Permalink to &quot;mutation 阶段&quot;">​</a></h2><ul><li>如果有直接的文本更新 Effect Tag(<code>ContentReset</code>), 更新节点的文本内容</li><li>如果存在<code>Ref</code>，更新 ref</li><li>如果存在<code>Placement</code>, 执行<code>commitPlacement</code>, 找到父节点 dom，将节点插入。</li><li>如果存在<code>PlacementAndUpdate</code>, 执行<code>commitPlacement</code>和<code>commitWork</code><ul><li>找到父节点 dom，将节点插入</li><li>调用<code>useLayoutEffect的销毁函数</code></li><li>更新 dom 属性</li></ul></li><li>如果存在<code>Deletion</code>，执行<code>commitDeletion</code><ul><li>删除 dom</li><li>删除 fiber</li><li>收集 useEffect 的销毁函数</li><li>执行<code>componentWillUnmount</code></li><li>解绑 ref</li></ul></li></ul><h2 id="layout-阶段" tabindex="-1">layout 阶段 <a class="header-anchor" href="#layout-阶段" aria-label="Permalink to &quot;layout 阶段&quot;">​</a></h2><ul><li>执行<code>useLayoutEffect回调</code></li><li>收集<code>useEffect的销毁函数</code></li><li>收集<code>useEffect的回调</code></li><li>执行<code>componentDidMount</code></li><li>执行<code>componentDidUpdate</code></li><li>执行<code>this.setState</code>的回调函数</li><li>执行<code>ReactDOM.render</code>的回调函数</li></ul><p>一段时间后。。。异步执行<code>useEffect的销毁函数和回调</code></p><h2 id="useeffect-和-uselayouteffect-的区别" tabindex="-1">useEffect 和 useLayoutEffect 的区别 <a class="header-anchor" href="#useeffect-和-uselayouteffect-的区别" aria-label="Permalink to &quot;useEffect 和 useLayoutEffect 的区别&quot;">​</a></h2><p><img src="http://tva1.sinaimg.cn/large/006vSZ9Ugy1gyfmj76zumj31110kjwjf.jpg" alt="image.png"></p>',12),l=[i];function d(f,s,n,u,r,m){return t(),o("div",null,l)}const _=e(a,[["render",d]]);export{p as __pageData,_ as default};
