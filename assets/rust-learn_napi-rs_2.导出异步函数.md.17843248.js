import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.3d945e71.js";const u=JSON.parse('{"title":"导出异步函数","description":"","frontmatter":{},"headers":[],"relativePath":"rust-learn/napi-rs/2.导出异步函数.md","filePath":"rust-learn/napi-rs/2.导出异步函数.md","lastUpdated":1700985994000}'),l={name:"rust-learn/napi-rs/2.导出异步函数.md"},o=p(`<h1 id="导出异步函数" tabindex="-1">导出异步函数 <a class="header-anchor" href="#导出异步函数" aria-label="Permalink to &quot;导出异步函数&quot;">​</a></h1><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[dependencies]</span></span>
<span class="line"><span style="color:#E1E4E8;">napi </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;2&quot;</span><span style="color:#E1E4E8;">, features </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;async&quot;</span><span style="color:#E1E4E8;">] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[dependencies]</span></span>
<span class="line"><span style="color:#24292E;">napi </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;2&quot;</span><span style="color:#24292E;">, features </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;async&quot;</span><span style="color:#24292E;">] }</span></span></code></pre></div><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">futures</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">bindgen_prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tokio</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">fs;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">#[napi]</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read_file_async</span><span style="color:#E1E4E8;">(path</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Buffer</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fs</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">read</span><span style="color:#E1E4E8;">(path)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">r</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> r {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(content) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(content</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(e) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Error</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Status</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">GenericFailure</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to read file, {}&quot;</span><span style="color:#E1E4E8;">, e),</span></span>
<span class="line"><span style="color:#E1E4E8;">      )),</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.await</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">futures</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">bindgen_prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tokio</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">fs;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">#[napi]</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read_file_async</span><span style="color:#24292E;">(path</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Buffer</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fs</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">read</span><span style="color:#24292E;">(path)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">r</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">match</span><span style="color:#24292E;"> r {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(content) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(content</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(e) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Error</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Status</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">GenericFailure</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">format!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to read file, {}&quot;</span><span style="color:#24292E;">, e),</span></span>
<span class="line"><span style="color:#24292E;">      )),</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.await</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,3),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const _=s(l,[["render",t]]);export{u as __pageData,_ as default};
