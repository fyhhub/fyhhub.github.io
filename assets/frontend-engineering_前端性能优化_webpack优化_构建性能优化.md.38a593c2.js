import{_ as e,o as a,c as o,Q as s}from"./chunks/framework.3d945e71.js";const b=JSON.parse('{"title":"构建性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/前端性能优化/webpack优化/构建性能优化.md","filePath":"frontend-engineering/前端性能优化/webpack优化/构建性能优化.md","lastUpdated":1697421979000}'),l={name:"frontend-engineering/前端性能优化/webpack优化/构建性能优化.md"},c=s(`<h1 id="构建性能优化" tabindex="-1">构建性能优化 <a class="header-anchor" href="#构建性能优化" aria-label="Permalink to &quot;构建性能优化&quot;">​</a></h1><h2 id="构建速度优化" tabindex="-1">构建速度优化 <a class="header-anchor" href="#构建速度优化" aria-label="Permalink to &quot;构建速度优化&quot;">​</a></h2><ol start="2"><li>使用 webpack5 持久化缓存，能明显提高构件速度</li><li>使用lazyCompilation 可以懒编译，能明显提高开发构建速度</li><li>约束loader的<code>include</code>和<code>exclude</code></li><li>使用<code>module.noParse</code> 可以跳过对某些文件的编译，因为有些三方库是已经编译过的</li><li>新版本组件 eslint-webpack-plugin 替代旧版 eslint-loader， 旧版出现错误会中断编译。</li><li>优化<code>source-map</code>的配置，使用<code>eval-cheap-source-map</code>可以提高构建速度</li><li>借助<code>swc</code>, <code>esbuild</code>等高性能编译器，优化构建速度, 例如terser插件可以指定使用<code>swc</code>或<code>esbuild</code>对代码进行压缩</li><li>采用并行压缩，例如：<code>thread-loader</code>、<code>terser</code>插件自带的<code>parallel</code>参数</li></ol><h2 id="构建体积优化" tabindex="-1">构建体积优化 <a class="header-anchor" href="#构建体积优化" aria-label="Permalink to &quot;构建体积优化&quot;">​</a></h2><ol><li>尽量使用export {} 导出代码 使用这样的写法，webpack才能做tree-shaking</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  xxx</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ol start="2"><li><p>不要使用babel将esm转为cjs 若代码是<code>commonjs</code>代码，将失去tree-shaking优化，需要设置<code>baberc</code>配置中的<code>modules: false</code></p></li><li><p>lib库酌情使用 sideEffects</p></li></ol><p>通过设置<code>package.json</code>中的<code>sideEffects</code>字段，可以告诉webpack哪些是纯的（无副作用）</p><ol start="4"><li><p>使用 unplugin-vue-components 或 babel-plugin-import 按需引入组件</p></li><li><p>可以使用 /*#<strong>PURE</strong> */ 标记哪些函数没有副作用，进而tree-shaking</p></li><li><p>合理配置<code>split-chunk-plugin</code>，例如其中的<code>maxInitialRequests</code>和<code>maxAsyncRequests</code>属性，用于控制异步模块和入口模块的拆分粒度。能有效减少重复打包的模块。</p></li><li><p>三方模块，尽量提取为CDN, 可以增加访问速度，突破HTTP 1.x 的请求并发限制。</p></li><li><p>使用http2，多路复用等特性，提高了访问速度</p></li></ol>`,9),n=[c];function i(t,p,d,r,h,u){return a(),o("div",null,n)}const m=e(l,[["render",i]]);export{b as __pageData,m as default};
