import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.3d945e71.js";const d=JSON.parse('{"title":"把JS 函数放到 Rust 中执行","description":"","frontmatter":{},"headers":[],"relativePath":"rust-learn/napi-rs/5.把JS 函数放到 Rust 中执行.md","filePath":"rust-learn/napi-rs/5.把JS 函数放到 Rust 中执行.md","lastUpdated":1713453121000}'),p={name:"rust-learn/napi-rs/5.把JS 函数放到 Rust 中执行.md"},o=l(`<h1 id="把js-函数放到-rust-中执行" tabindex="-1">把JS 函数放到 Rust 中执行 <a class="header-anchor" href="#把js-函数放到-rust-中执行" aria-label="Permalink to &quot;把JS 函数放到 Rust 中执行&quot;">​</a></h1><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">thread;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">napi</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">bindgen_prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">threadsafe_function</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">ErrorStrategy</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ThreadsafeFunction</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ThreadsafeFunctionCallMode</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 强制指定参数类型</span></span>
<span class="line"><span style="color:#E1E4E8;">#[napi(ts_args_type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;callback: (err: null | Error, result: number) =&gt; void&quot;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">pub</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">call_threadsafe_function</span><span style="color:#E1E4E8;">(callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JsFunction</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tsfn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ThreadsafeFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">u32</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ErrorStrategy</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">CalleeHandled</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> callback</span></span>
<span class="line"><span style="color:#6A737D;">    // ctx.value 即 Rust 调用 JS 函数时传递的入参，封装成 Vec 传递给 JS 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">create_threadsafe_function</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">ctx</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ctx</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">env</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">create_uint32</span><span style="color:#E1E4E8;">(ctx</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">value)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">v</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec!</span><span style="color:#E1E4E8;">[v]))</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tsfn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tsfn</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">thread</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 通过 tsfn.call 来调用 JS 函数</span></span>
<span class="line"><span style="color:#E1E4E8;">      tsfn</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(n), </span><span style="color:#B392F0;">ThreadsafeFunctionCallMode</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Blocking</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">thread;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">napi</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">bindgen_prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">threadsafe_function</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">ErrorStrategy</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ThreadsafeFunction</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ThreadsafeFunctionCallMode</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 强制指定参数类型</span></span>
<span class="line"><span style="color:#24292E;">#[napi(ts_args_type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;callback: (err: null | Error, result: number) =&gt; void&quot;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">pub</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">call_threadsafe_function</span><span style="color:#24292E;">(callback</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JsFunction</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tsfn</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ThreadsafeFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">u32</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">ErrorStrategy</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">CalleeHandled</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> callback</span></span>
<span class="line"><span style="color:#6A737D;">    // ctx.value 即 Rust 调用 JS 函数时传递的入参，封装成 Vec 传递给 JS 函数</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">create_threadsafe_function</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">ctx</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> ctx</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">env</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">create_uint32</span><span style="color:#24292E;">(ctx</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">value)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">v</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec!</span><span style="color:#24292E;">[v]))</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tsfn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tsfn</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">thread</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 通过 tsfn.call 来调用 JS 函数</span></span>
<span class="line"><span style="color:#24292E;">      tsfn</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(n), </span><span style="color:#6F42C1;">ThreadsafeFunctionCallMode</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Blocking</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,2),e=[o];function t(c,r,y,E,F,i){return n(),a("div",null,e)}const _=s(p,[["render",t]]);export{d as __pageData,_ as default};
