import{_ as n}from"./plugin-vueexport-helper.2444895f.js";import{o as s,c as a,e}from"./app.71a728e7.js";const p={},t=e(`<h1 id="_2-\u6D41\u7A0B\u63A7\u5236" tabindex="-1"><a class="header-anchor" href="#_2-\u6D41\u7A0B\u63A7\u5236" aria-hidden="true">#</a> 2. \u6D41\u7A0B\u63A7\u5236</h1><h2 id="if\u8BED\u53E5" tabindex="-1"><a class="header-anchor" href="#if\u8BED\u53E5" aria-hidden="true">#</a> if\u8BED\u53E5</h2><ol><li>\u7B2C\u4E00\u79CD</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">if</span> condition <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
    <span class="token comment">// A...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// B...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.\u7B2C\u4E8C\u79CD</p><p>\u6B64\u5904\u8FD4\u56DE\u7684 5 \u548C 6 \u5C31\u662F\u540C\u4E00\u4E2A\u7C7B\u578B\uFF0C\u5982\u679C\u8FD4\u56DE\u7C7B\u578B\u4E0D\u4E00\u81F4\u5C31\u4F1A\u62A5\u9519</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token keyword">if</span> condition <span class="token punctuation">{</span>
    <span class="token number">5</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token number">6</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="else-if" tabindex="-1"><a class="header-anchor" href="#else-if" aria-hidden="true">#</a> else if</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is divisible by 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;number is not divisible by 4, 3, or 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#for-\u5FAA\u73AF" aria-hidden="true">#</a> for \u5FAA\u73AF</h2><ol><li>\u5FAA\u73AF\u6570\u5B57</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// \u8FD9\u79CD\u5199\u6CD5\u5305\u542B5</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u8FD9\u79CD\u5199\u6CD5\u4E0D\u5305\u542B5</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>\u5FAA\u73AF\u5F15\u7528</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token operator">&amp;</span>container <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>\u5FAA\u73AF\u4E2D\u4FEE\u6539\u503C</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> collection <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>\u5FAA\u73AF\u4E2D\u4F7F\u7528\u7D22\u5F15</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// \`.iter()\` \u65B9\u6CD5\u628A \`a\` \u6570\u7EC4\u53D8\u6210\u4E00\u4E2A\u8FED\u4EE3\u5668</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\u7B2C{}\u4E2A\u5143\u7D20\u662F{}&quot;</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while-\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#while-\u5FAA\u73AF" aria-hidden="true">#</a> while \u5FAA\u73AF</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> n <span class="token operator">&lt;=</span> <span class="token number">5</span>  <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}!&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;\u6211\u51FA\u6765\u4E86\uFF01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loop-\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#loop-\u5FAA\u73AF" aria-hidden="true">#</a> loop \u5FAA\u73AF</h2><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">loop</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5EFA\u8BAE\u4F7F\u7528iter\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u5EFA\u8BAE\u4F7F\u7528iter\u904D\u5386" aria-hidden="true">#</a> \u5EFA\u8BAE\u4F7F\u7528iter\u904D\u5386</h2><p>\u5EFA\u8BAE\u4F7F\u7528iter()\u904D\u5386\uFF0C\u800C\u4E0D\u662F\u76F4\u63A5\u904D\u5386a</p><p><strong>a.iter() \u53EF\u4EE5\u8FD4\u56DE\u4E00\u4E2A\u8FED\u4EE3\u5668\uFF0C\u5B83\u53EF\u4EE5\u904D\u5386\u96C6\u5408 a \u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\u7684\u5F15\u7528\u3002\u5982\u679C\u4F60\u4E0D\u4F7F\u7528 iter() \u65B9\u6CD5\uFF0C\u800C\u662F\u76F4\u63A5\u4F7F\u7528 a\uFF0C\u5219\u4F1A\u53D1\u751F\u9690\u5F0F\u7684\u89E3\u5F15\u7528\u64CD\u4F5C\uFF0C\u5C06\u96C6\u5408\u4E2D\u7684\u5143\u7D20\u590D\u5236\u5230\u8FED\u4EE3\u5668\u4E2D\u3002\u4F7F\u7528 iter() \u65B9\u6CD5\u53EF\u4EE5\u907F\u514D\u5728\u8FED\u4EE3\u5668\u4E2D\u590D\u5236\u96C6\u5408\u4E2D\u7684\u5143\u7D20\uFF0C\u4ECE\u800C\u63D0\u9AD8\u6027\u80FD\u3002</strong></p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> element <span class="token keyword">in</span> a<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the value is: {}&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[t];function i(c,l){return s(),a("div",null,o)}const d=n(p,[["render",i],["__file","2.\u6D41\u7A0B\u63A7\u5236.html.vue"]]);export{d as default};
