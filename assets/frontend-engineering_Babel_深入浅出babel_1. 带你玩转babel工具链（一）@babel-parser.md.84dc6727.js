import{_ as s,o as a,c as e,Q as p}from"./chunks/framework.3d945e71.js";const y=JSON.parse('{"title":"带你玩转 babel 工具链（一）@babel/parser","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/Babel/深入浅出babel/1. 带你玩转babel工具链（一）@babel-parser.md","filePath":"frontend-engineering/Babel/深入浅出babel/1. 带你玩转babel工具链（一）@babel-parser.md","lastUpdated":1712558335000}'),n={name:"frontend-engineering/Babel/深入浅出babel/1. 带你玩转babel工具链（一）@babel-parser.md"},t=p(`<h1 id="带你玩转-babel-工具链-一-babel-parser" tabindex="-1">带你玩转 babel 工具链（一）@babel/parser <a class="header-anchor" href="#带你玩转-babel-工具链-一-babel-parser" aria-label="Permalink to &quot;带你玩转 babel 工具链（一）@babel/parser&quot;">​</a></h1><h2 id="一、前言" tabindex="-1">一、前言 <a class="header-anchor" href="#一、前言" aria-label="Permalink to &quot;一、前言&quot;">​</a></h2><p><code>@babel/parser</code>作为 babel 最核心的库，是我们学习 babel 最重要的一部分，对于后面插件的学习都很有帮助。本文将通过各种示例，帮大家理解 babel-laoder 在 babel 工具链中的作用。</p><h2 id="二、基础示例" tabindex="-1">二、基础示例 <a class="header-anchor" href="#二、基础示例" aria-label="Permalink to &quot;二、基础示例&quot;">​</a></h2><p>首先我们先学习下如何使用<code>@babel/parser</code></p><p>下面是一个简单用法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/parser&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;let a = 1&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sourceType: </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/parser&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;let a = 1&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  sourceType: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>上面的代码执行后，就会返回 ast 节点，我们可以通过<a href="https://astexplorer.net/" target="_blank" rel="noreferrer">AST explorer</a>这个站点查看 AST</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f93d3e5d828e454ebf2ed7203bba429d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="三、选项配置" tabindex="-1">三、选项配置 <a class="header-anchor" href="#三、选项配置" aria-label="Permalink to &quot;三、选项配置&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/parser&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;let a = 1&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  sourceType: </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/parser&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;let a = 1&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  sourceType: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>那 parser 除了上面的<code>sourceType</code>还有哪些参数呢？</p><p>下面我列出了所有的参数说明。方便大家理解</p><table><thead><tr><th>选项</th><th>说明</th><th>简介</th></tr></thead><tbody><tr><td>allowImportExportEverywhere</td><td>默认情况下，导入和导出声明只能出现在程序的顶层。如果将此选项设置为 true，则可以在允许语句的任何位置使用它们</td><td>允许任何地方写 import</td></tr><tr><td>allowAwaitOutsideFunction</td><td>默认情况下，仅允许在异步函数内部或在启用 topLevelAwait 插件时，在模块的顶级范围内使用 await，可以将该值设置为 true</td><td>允许顶层 await</td></tr><tr><td>allowReturnOutsideFunction</td><td>默认情况下，函数外的 return 语句会引发错误。将此设置为 true，不会报错</td><td>允许函数外面写 return</td></tr><tr><td>allowSuperOutsideMethod</td><td>默认情况下，在类和方法之外不允许使用。将此设置为 true，不会报错</td><td>允许其他地方写 super</td></tr><tr><td>allowUndeclaredExports</td><td>默认情况下，导出未在当前模块作用域中声明的标识符将引发错误。设置为 true 后将不会报错</td><td>允许导出一个未声明的变量</td></tr><tr><td>attachComment</td><td>默认情况下，Babel 将注释附加到相邻的 AST 节点。如果此选项设置为 false，则不会附加注释。当输入代码有许多注释时，它可以提供高达 30%的性能改进@babel/eslint 解析器将为您设置它。不建议在 Babel transform 中使用 attachComment:false，因为这样做会删除输出代码中的所有注释</td><td>是否保留注释</td></tr><tr><td>createParenthesizedExpressions</td><td>当此选项设置为 true 时，如果给表达式节点包了一层圆括号，会被保留，如果设置为 false，表达式的括号不会保留</td><td>是否保留包裹表达式的圆括号</td></tr><tr><td>errorRecovery</td><td>默认情况下，Babel 在发现一些无效代码时总是抛出错误。当此选项设置为 true 时，它将存储解析错误并尝试继续解析无效的输入文件。生成的 AST 将具有一个 errors 属性，表示所有解析错误的数组。请注意，即使启用此选项，@babel/parser 也可能抛出不可恢复的错误</td><td>是否出现错误后，不停止解析</td></tr><tr><td>plugins</td><td>包含要启用的插件的数组</td><td>插件数组</td></tr><tr><td>sourceType</td><td>指示应在其中解析代码的模式。可以是“script”、“module”或“unambiguous”之一。默认为“script”。“unambiguous”将使@babel/parser 根据 ES6 导入或导出语句的存在尝试猜测。带有 ES6 导入和导出的文件被视为“module”，否则为“script”。</td><td>解析代码模式，推荐 unambiguous</td></tr><tr><td>sourceFilename</td><td>将输出 AST 节点与其源文件名关联。从多个输入文件的 AST 生成代码和源映射时非常有用</td><td>ast 节点携带当前解析的文件名称</td></tr><tr><td>startColumn</td><td>默认情况下，解析的代码被视为从第 1 行第 0 列开始。您可以提供一个列编号，以供选择。用于与其他源工具集成。</td><td>可以选择从哪一列开始解析</td></tr><tr><td>startLine</td><td>默认情况下，解析的代码被视为从第 1 行第 0 列开始。您可以提供一个行号，以供选择。用于与其他源工具集成。</td><td>可以选择从哪一行开始解析</td></tr><tr><td>strictMode</td><td>默认情况下，ECMAScript 代码仅在“use strict”时解析为 strict；指令存在，或者如果解析的文件是 ECMAScript 模块。将此选项设置为 true 以始终在严格模式下解析文件</td><td>解析的文件都会加上 use strict</td></tr><tr><td>ranges</td><td>向每个节点添加范围属性：[node.start，node.end]</td><td>给 ast 节点添加 range</td></tr><tr><td>tokens</td><td>将所有已解析的令牌添加到文件节点上的令牌属性</td><td>为 File Ast 节点上的 tokens 属性，添加所有 token</td></tr></tbody></table><p>其中，大家注意一下<code>plugins</code>这个属性配置，babel 语法插件很多都通过这个字段实现。</p><h2 id="四、babel-是如何按需支持不同语法的" tabindex="-1">四、babel 是如何按需支持不同语法的？ <a class="header-anchor" href="#四、babel-是如何按需支持不同语法的" aria-label="Permalink to &quot;四、babel 是如何按需支持不同语法的？&quot;">​</a></h2><blockquote><p>@babel/parser 内部实现了所有可配置的语法，例如 typescript、top-level-await，本文只讨论如何配置并支持各种语法</p></blockquote><p>首先我们有如下代码, 我们写了一段<code>typescript代码</code>, 并用 parser 编译</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parser</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@babel/parser&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> parser.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  const a: number = 1</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {}</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">f;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ast);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parser</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@babel/parser&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parser.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  const a: number = 1</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  {}</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">f;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ast);</span></span></code></pre></div><p>但是结果并不是我们想要的那样，而是报了语法错误</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/341db69269124e038ecfddc2c81ea560~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>然后我们再加一个配置</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">const parser = require(&#39;@babel/parser&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">const ast = parser.parse(\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  const a: number = 1</span></span>
<span class="line"><span style="color:#E1E4E8;">\`, {</span></span>
<span class="line"><span style="color:#85E89D;">+  plugins: [&#39;typescript&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.log(ast);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">const parser = require(&#39;@babel/parser&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">const ast = parser.parse(\`</span></span>
<span class="line"><span style="color:#24292E;">  const a: number = 1</span></span>
<span class="line"><span style="color:#24292E;">\`, {</span></span>
<span class="line"><span style="color:#22863A;">+  plugins: [&#39;typescript&#39;]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.log(ast);</span></span></code></pre></div><p>发现可以正常打印结果了</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c5fe0e0bb214ed1956ca9b8b6f5281e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><strong>其实<code>@babel/parser</code>在支持不同语法时，需要我们手动添加<code>plugins</code>来进行支持，但是我们开发项目并不会去添加各种语法插件，那 babel 是如何帮我们添加的呢？</strong></p><p>我们打开<code>node_modules/@babel目录</code>,可以发现里面有一部分插件是这样的</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20c21fb73df644cf91b32cbc909a439d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>我们简单看一下<code>plugin-syntax-top-level-await</code> 的实现：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f8d5ced6f6f464690b7bbe123e3a5f5~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>源码实现非常简单，只是在 parser 选项添加了一个<code>topLevelAwait</code>,用于开启<code>top-level-await</code>。</p><p>然后~</p><p>我们再来安装下<code>@babel/preset-typescript</code>, 发现它竟然帮助我们安装了一个<code>plugin-syntax-typescript</code>插件</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43104f7560004b9d8a0b8dcaee304fff~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab3bde681d5941bdb59dba63ebb95124~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>源码一样非常简单，同时删除了 flow 和 jsx 语法支持</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><code>@babel/parser</code>基于 acron 做了进一步扩展，实现了很多语法</li><li><code>@babel/parser</code>提供了语法支持</li><li><code>plugin-syntax-xxx</code> 语法插件增加了<code>@babel/parser</code>的<code>plugins</code>配置</li></ul>`,38),l=[t];function o(r,c,d,i,b,E){return a(),e("div",null,l)}const g=s(n,[["render",o]]);export{y as __pageData,g as default};
