import{_ as t,o,c as e,Q as i}from"./chunks/framework.3d945e71.js";const b=JSON.parse('{"title":"git config介绍","description":"","frontmatter":{},"headers":[],"relativePath":"tools/Git/git-config实用指南.md","filePath":"tools/Git/git-config实用指南.md","lastUpdated":1712884586000}'),r={name:"tools/Git/git-config实用指南.md"},n=i(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本文摘抄自文章：<a href="https://juejin.cn/post/7350934681830686774" target="_blank" rel="noreferrer">https://juejin.cn/post/7350934681830686774</a></p></div><h1 id="git-config介绍" tabindex="-1">git config介绍 <a class="header-anchor" href="#git-config介绍" aria-label="Permalink to &quot;git config介绍&quot;">​</a></h1><p>作为现代软件开发中不可或缺的工具之一，Git 不仅提供了强大的版本控制功能，还允许用户根据自己的需求进行个性化配置。其中，<code>git config</code> 命令是我们最常用的管理 Git 配置的工具。</p><h3 id="git-config的作用域" tabindex="-1">git config的作用域 <a class="header-anchor" href="#git-config的作用域" aria-label="Permalink to &quot;git config的作用域&quot;">​</a></h3><p>Git 配置存储了用户和仓库的特定配置项，例如用户名、邮箱、默认编辑器、远程仓库地址等。这些配置信息存储在三个不同的地方，对不同的范围生效：</p><ul><li><strong>系统级别配置-system</strong>：适用于整个系统的配置，这个很少见。通常存储在 <code>/etc/gitconfig</code> 文件中。</li><li><strong>全局配置-global</strong>：适用于当前用户的配置，我们最常用的配置。通常存储在 <code>~/.gitconfig</code> 文件中。</li><li><strong>仓库级别配置-local</strong>：适用于当前 Git 仓库的配置，每个项目的仓库中都有一个。通常存储在仓库的 <code>.git/config</code> 文件中。</li></ul><blockquote><p>以上三个配置优先级：<strong>仓库级 &gt; 全局 &gt; 系统级</strong></p></blockquote><h3 id="git-config常用配置项" tabindex="-1">git config常用配置项 <a class="header-anchor" href="#git-config常用配置项" aria-label="Permalink to &quot;git config常用配置项&quot;">​</a></h3><ol><li><strong>user.name</strong>：这个配置项设置了提交代码时使用的用户名，它将被包含在每个提交记录中，以标识谁做了哪些更改。</li><li><strong>user.email</strong>：这个配置项设置了提交代码时使用的邮箱地址，用来与用户名一起标识提交者的身份。</li><li><strong>core.editor</strong>：设置默认的文本编辑器。当需要编辑提交消息或解决合并冲突时，Git 会自动调用这个编辑器。<strong>默认是nano,也可以设置为vim、gedit、notepad++、vscode等，nano我用起来不太习惯，vim、vscode都还可以</strong></li><li><strong>core.ignorecase</strong>：控制文件名在 Git 中的大小写敏感性。<strong>默认是False，如果设置为 true，Git 将会忽略文件名的大小写差异。</strong></li><li><strong>color.ui</strong>：启用或禁用 Git 输出的彩色显示，使得在终端中更易于区分不同部分。<strong>默认是False，通过设置 <code>color.ui</code> 为 <code>true</code>，就可以启用全局的 Git 控制台颜色，同时也支持自定义 Git 控制台的颜色方案。</strong></li><li><strong>alias.</strong>：通过设置别名，你可以为常用的 Git 命令创建简短的快捷方式，从而提高工作效率。<strong>默认没有，类似linux的alias</strong></li><li><strong>http.proxy</strong>：当需要通过代理服务器访问远程仓库时，可以使用此配置项指定 HTTP 代理。<strong>默认没有，这个貌似比较适合挂外网和公司的梯子，不过我没用过。</strong></li><li><strong>http.postBuffer</strong>：缓存区大小，如果文件过大rpc失败可以调大此配置。<strong>默认是1 MB，根本不够用的，推荐设置成1048576000，1个G</strong></li><li><strong>http.sslVerify</strong>：控制是否验证远程仓库的 SSL 证书。在一些情况下，可能<strong>默认是true,必要情况下需要禁用 SSL 验证也可以设置成false，但这会增加安全风险。</strong></li><li><strong>push.default</strong>：设置推送行为，默认情况下，它确定了在不指定分支名称时 Git 应该推送的分支。</li><li><strong>credential.helper</strong>：用于设置 Git 如何存储和检索认证信息，例如用户名和密码，以便于在与远程仓库通信时使用。<strong>默认NONE，可设置<code>cache</code>, <code>store</code>，<code>osxkeychai</code></strong></li><li><strong>fetch.prune</strong>：设置是否在拉取远程分支时删除本地不存在的远程分支。<strong>默认false</strong></li><li><strong>diff.tool</strong>：设置默认的文件差异比较工具，用于比较文件之间的差异。</li><li><strong>merge.tool</strong>：类似于 <code>diff.tool</code>，这个配置项设置了默认的合并工具，用于解决代码合并时的冲突。</li><li><strong>remote.origin.url</strong>：设置远程仓库的 URL，用于指定与之通信的远程地址。</li><li><strong>remote.origin.fetch</strong>：设置从远程仓库拉取的默认分支。</li><li><strong>init.defaultBranch</strong>：设置新建仓库时的默认分支名称。</li><li><strong>gc.auto</strong>：设置自动垃圾回收的触发条件。</li><li><strong>rerere.enabled</strong>：启用或禁用 Git 中的 Rerere 功能，它可以帮助自动重用先前解决的合并冲突。</li></ol><p><strong>以下是global和local的默认配置：</strong></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a52d63a34d8c4c899d6fadf29d9eeb5f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=297&amp;h=135&amp;s=22828&amp;e=png&amp;b=030303" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fa9af6ce0784bc480833a36b1381377~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=470&amp;h=342&amp;s=64553&amp;e=png&amp;b=010101" alt="image.png"></p><h3 id="git-config的操作指令" tabindex="-1">git config的操作指令 <a class="header-anchor" href="#git-config的操作指令" aria-label="Permalink to &quot;git config的操作指令&quot;">​</a></h3><blockquote><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2FHO1_K%2Farticle%2Fdetails%2F121038247" title="https://blog.csdn.net/HO1_K/article/details/121038247" target="_blank" rel="noreferrer">Git---git config操作大全 查看和操作配置参数_git config --list-CSDN博客</a></p></blockquote><p><code>git config</code> 命令是 Git 中用来配置参数的主要工具。通过它，你可以在全局、当前用户、或者当前仓库级别设置各种配置项。以下是一些常见的 <code>git config</code> 命令行操作示例：</p><ol><li>查看当前配置</li></ol><p>要查看当前 Git 配置的所有项及其对应的值，可以使用 <code>--list</code>或 <code>-l</code>参数。仅查看，不可编辑。<strong>对于nano编辑器，单击q可退出</strong></p><blockquote><p>查看默认配置，目录在哪里就显示哪里的配置。</p></blockquote><pre><code>git config --list
</code></pre><blockquote><p>查看系统配置</p></blockquote><pre><code>git config --system --list
</code></pre><blockquote><p>查看全局配置</p></blockquote><pre><code>git config --global --list
</code></pre><blockquote><p>查看本地配置</p></blockquote><pre><code>git config --local --list
</code></pre><ol start="2"><li>查看特定配置项</li></ol><p>如果只想查看特定的配置项，可以直接指定它的名称进行查看：</p><pre><code>git config user.name
</code></pre><ol start="3"><li>设置配置项</li></ol><p>也可以直接制定名称设置 Git 配置：</p><pre><code>git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;your.email@example.com&quot;\` 
</code></pre><ol start="4"><li>清除配置项</li></ol><p>如果想清除某个配置项的值：</p><pre><code>git config --unset user.name
</code></pre><ol start="5"><li>编辑配置项</li></ol><pre><code>git config --local -e
</code></pre><h2 id="常见的缓存区限制问题" tabindex="-1">常见的缓存区限制问题 <a class="header-anchor" href="#常见的缓存区限制问题" aria-label="Permalink to &quot;常见的缓存区限制问题&quot;">​</a></h2><p>事情的起因是我想要将一个接近<strong>800MB</strong>的数据上传的gitee的仓库中，但是报错如下：</p><pre><code>error: RPC failed; curl 56 Recv failure: Connection reset by peer fetch-pack: 
unexpected disconnect while reading sideband packet fatal: early EOF fatal: 
fetch-pack: invalid index-pack output
</code></pre><p><strong>&quot;error: RPC failed; curl 56 Recv failure&quot; 是一个常见的 Git 错误消息，通常表明 Git 在与远程仓库通信时发生了问题。这个错误的原因可能有很多，一般导致这个错误的原因就是以下几种：</strong></p><ol><li><strong>网络问题</strong>：这是最常见的原因之一。可能是网络连接不稳定或者与远程仓库之间存在防火墙或代理问题。</li><li><strong>远程服务器问题</strong>：远程仓库服务器可能存在问题，导致无法完成通信。在这种情况下，只能等待远程服务器恢复正常。</li><li><strong>SSL证书问题</strong>：可能是由于 SSL 证书的问题，导致无法建立安全连接。尝试在 Git 命令中使用 <code>-c http.sslVerify=false</code> 参数来禁用 SSL 验证，以查看问题是否与证书有关。</li><li><strong>文件大小限制</strong>：可能是由于 Git 客户端或服务器配置了文件大小限制，导致无法传输大文件。可以尝试增加 Git 客户端的缓冲区大小。</li></ol><blockquote><p>参考博客：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.csdn.net%2Fqq_31752115%2Farticle%2Fdetails%2F108118260" title="https://blog.csdn.net/qq_31752115/article/details/108118260" target="_blank" rel="noreferrer">git拉代码时报错error: RPC failed； curl 56 Recv failure: Connection reset by peer  fatal: The remote end hu_error: rpc failed; curl 56 recv failure: connectio_enoshxu的博客-CSDN博客</a></p></blockquote><p>根据我的排查，我在做小的变动时和这个仓库连接都没有问题，所以只可能是缓存区太小，不能传输过大的数据。 同样的，git clone代码时，如果项目总大小比较小时克隆代码没问题，占用内存比较大时就会如上报错。</p><pre><code>git config --global http.postBuffer
</code></pre><p>通过命令查看到当前缓存区过小 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9cf770aa2a5d41ec83fe4b752319ea7b~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=588&amp;h=64&amp;s=19586&amp;e=png&amp;b=010101" alt="image.png"></p><pre><code>git config --global http.postBuffer 1048576000
</code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc1b3fe7cbe44b19664060ee0a5fa65~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=670&amp;h=99&amp;s=37793&amp;e=png&amp;b=010101" alt="image.png"></p><p>此时再进行git push即可成功。</p>`,48),l=[n];function c(a,g,s,p,d,f){return o(),e("div",null,l)}const h=t(r,[["render",c]]);export{b as __pageData,h as default};
