import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3d945e71.js";const _=JSON.parse('{"title":"6.说一下 vue2 的模板编译有哪些优化","description":"","frontmatter":{"order":6},"headers":[],"relativePath":"frontend-advanced/vue/Vue2/6.说一下vue2的模板编译有哪些优化.md","filePath":"frontend-advanced/vue/Vue2/6.说一下vue2的模板编译有哪些优化.md","lastUpdated":1694499505000}'),o={name:"frontend-advanced/vue/Vue2/6.说一下vue2的模板编译有哪些优化.md"},p=l(`<h1 id="_6-说一下-vue2-的模板编译有哪些优化" tabindex="-1">6.说一下 vue2 的模板编译有哪些优化 <a class="header-anchor" href="#_6-说一下-vue2-的模板编译有哪些优化" aria-label="Permalink to &quot;6.说一下 vue2 的模板编译有哪些优化&quot;">​</a></h1><h2 id="核心答案" tabindex="-1">核心答案 <a class="header-anchor" href="#核心答案" aria-label="Permalink to &quot;核心答案&quot;">​</a></h2><h3 id="模板优化" tabindex="-1">模板优化 <a class="header-anchor" href="#模板优化" aria-label="Permalink to &quot;模板优化&quot;">​</a></h3><p>vue 模板会经过<code>parse</code>, <code>optimize</code>, <code>generate</code>三个阶段，optimize 阶段会标记静态节点，优化更新的性能。</p><p><strong>判断是静态节点的条件</strong></p><ul><li>表达式</li><li>静态文本</li><li>没有动态绑定</li><li>没有 if 或 for</li><li>不是组件</li><li>静态节点的父节点，不是带有 v-for 指令的 template 节点</li><li>子节点都是静态节点，如果有一个不是，那这个节点也不是静态节点</li></ul><h3 id="生成静态渲染函数" tabindex="-1">生成静态渲染函数 <a class="header-anchor" href="#生成静态渲染函数" aria-label="Permalink to &quot;生成静态渲染函数&quot;">​</a></h3><p>在编译流程走完后，会返回<code>staticRenderFns</code>, 它是一个数组会调用<code>renderStatus</code>, 拿到数组中的 Vnode, 缓存静态<code>render</code>的结果</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">_c</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">,[</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">_m</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">_v</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">_s</span><span style="color:#E1E4E8;">(a),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">_m</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">_c</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;div&#39;</span><span style="color:#24292E;">,[</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">_m</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">_v</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">_s</span><span style="color:#24292E;">(a),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">_m</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">])</span></span></code></pre></div><h3 id="更新优化" tabindex="-1">更新优化 <a class="header-anchor" href="#更新优化" aria-label="Permalink to &quot;更新优化&quot;">​</a></h3><p>在执行<code>patchVNode</code>时，会判断是否是静态节点，如果是静态节点就不会走后续的 diff 逻辑</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">(vnode.isStatic) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">(oldVnode.isStatic) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  vnode.key </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> oldVnode.key </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">(vnode.isCloned) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isTrue</span><span style="color:#E1E4E8;">(vnode.isOnce))</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  vnode.componentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldVnode.componentInstance;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">(vnode.isStatic) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">(oldVnode.isStatic) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  vnode.key </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> oldVnode.key </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">  (</span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">(vnode.isCloned) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isTrue</span><span style="color:#24292E;">(vnode.isOnce))</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  vnode.componentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldVnode.componentInstance;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,12),e=[p];function c(t,r,i,E,d,y){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{_ as __pageData,h as default};
