import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.3d945e71.js";const h=JSON.parse('{"title":"动态import加载动态路径模块","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/webpack/Webpack原理/动态import加载动态路径模块.md","filePath":"frontend-engineering/webpack/Webpack原理/动态import加载动态路径模块.md","lastUpdated":1694266382000}'),l={name:"frontend-engineering/webpack/Webpack原理/动态import加载动态路径模块.md"},o=p(`<h1 id="动态import加载动态路径模块" tabindex="-1">动态import加载动态路径模块 <a class="header-anchor" href="#动态import加载动态路径模块" aria-label="Permalink to &quot;动态import加载动态路径模块&quot;">​</a></h1><p>对于这样一段代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`./dynamic/\${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">}.js\`</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%c 🍩 res: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#E1E4E8;">, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`./dynamic/\${</span><span style="color:#24292E;">item</span><span style="color:#032F62;">}.js\`</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%c 🍩 res: &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>我们发现在动态import中，我们拼接了动态的字符串, 那么webpack怎么知道要打包这些文件的呢？</p><p>其实webpack会把<code>\${item}</code>替换成<code>/.*/</code>, 如果能在<code>dynamic</code>目录下匹配到该文件，就会将其打包。</p><p>webpack支持一些配置:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// wepback.config.js</span></span>
<span class="line"><span style="color:#B392F0;">module</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parser</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">javascript</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">wrappedContextRegExp</span><span style="color:#E1E4E8;">:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">wrappedContextRecursive</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// wepback.config.js</span></span>
<span class="line"><span style="color:#6F42C1;">module</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">parser</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">javascript</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">wrappedContextRegExp</span><span style="color:#24292E;">:</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">wrappedContextRecursive</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>wrappedContextRegExp</code>: 我们可以告诉 webpack 用什么替换表达式的动态部分</li><li><code>wrappedContextRecursive</code>: 指定是否应该遍历嵌套目录</li></ul><h2 id="webpackmode" tabindex="-1">webpackMode <a class="header-anchor" href="#webpackmode" aria-label="Permalink to &quot;webpackMode&quot;">​</a></h2><p>动态import存在几种模式，默认为<code>lazy</code>模式。在<code>lazy</code>模式下，动态模块会单独打包成chunk。</p><h3 id="lazy模式" tabindex="-1">lazy模式 <a class="header-anchor" href="#lazy模式" aria-label="Permalink to &quot;lazy模式&quot;">​</a></h3><p>在如下场景</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">├── dynamic</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── a.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── b.js</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── c.js</span></span>
<span class="line"><span style="color:#E1E4E8;">└── entry</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">a.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">├── dynamic</span></span>
<span class="line"><span style="color:#24292E;">│   ├── a.js</span></span>
<span class="line"><span style="color:#24292E;">│   ├── b.js</span></span>
<span class="line"><span style="color:#24292E;">│   └── c.js</span></span>
<span class="line"><span style="color:#24292E;">└── entry</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">a.js</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// entry-a.js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`./dynamic/\${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">}.js\`</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%c 🍩 res: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#E1E4E8;">, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// entry-a.js</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`./dynamic/\${</span><span style="color:#24292E;">item</span><span style="color:#032F62;">}.js\`</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%c 🍩 res: &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><strong>打包成功后：</strong></p><p>在打包的产物中有这么一段映射</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> map </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;./a.js&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 模块id</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// chunkid</span></span>
<span class="line"><span style="color:#E1E4E8;">	],</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> map </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;./a.js&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 模块id</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// chunkid</span></span>
<span class="line"><span style="color:#24292E;">	],</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>意思就是先<code>动态加载执行 chunkid为1</code> 的文件, 然后执行<code>1.js</code>chunk中的<code>moduleId为2</code>的代码</p><p><img src="https://raw.githubusercontent.com/fyhhub/imgs/main/imgs20220826113345.png" alt="20220826113345"></p><p><img src="https://raw.githubusercontent.com/fyhhub/imgs/main/imgs20220826113633.png" alt="20220826113633"></p><div class="info custom-block"><p class="custom-block-title">总结</p><p>会单独生成各自的chunk</p></div><h3 id="eager模式" tabindex="-1">eager模式 <a class="header-anchor" href="#eager模式" aria-label="Permalink to &quot;eager模式&quot;">​</a></h3><p>eager模式需要你添加魔法注释<code>/* webpackChunkName: &#39;mainFolder&#39;, webpackMode: &#39;eager&#39; */</code>, 在这种模式下代码将不会生成单独的<code>chunk</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &#39;mainFolder&#39;, webpackMode: &#39;eager&#39; */</span><span style="color:#9ECBFF;">\`./dynamic/\${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">}.js\`</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%c 🍩 res: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#E1E4E8;">, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &#39;mainFolder&#39;, webpackMode: &#39;eager&#39; */</span><span style="color:#032F62;">\`./dynamic/\${</span><span style="color:#24292E;">item</span><span style="color:#032F62;">}.js\`</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%c 🍩 res: &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>打包后的产物如下:</p><p><img src="https://raw.githubusercontent.com/fyhhub/imgs/main/imgs20220826113959.png" alt="20220826113959"></p><p><img src="https://raw.githubusercontent.com/fyhhub/imgs/main/imgs20220826114037.png" alt="20220826114037"></p><div class="info custom-block"><p class="custom-block-title">总结</p><p>不会生成各自单独的chunk，模块代码被合并到入口文件中</p></div><h3 id="lazy-once" tabindex="-1">lazy-once <a class="header-anchor" href="#lazy-once" aria-label="Permalink to &quot;lazy-once&quot;">​</a></h3><p>lazy-once模式需要你添加魔法注释<code>/* webpackChunkName: &#39;mainFolder&#39;, webpackMode: &#39;lazy-once&#39; */</code>, 在这种模式下, 本来的多个<code>chunk</code>会被<code>合并</code>成一个<code>chunk</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* webpackChunkName: &#39;mainFolder&#39;, webpackMode: &#39;eager&#39; */</span><span style="color:#9ECBFF;">\`./dynamic/\${</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">}.js\`</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;%c 🍩 res: &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#E1E4E8;">, res);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">list.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">import</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* webpackChunkName: &#39;mainFolder&#39;, webpackMode: &#39;eager&#39; */</span><span style="color:#032F62;">\`./dynamic/\${</span><span style="color:#24292E;">item</span><span style="color:#032F62;">}.js\`</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;%c 🍩 res: &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;font-size:20px;background-color: #7F2B82;color:#fff;&#39;</span><span style="color:#24292E;">, res);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/fyhhub/imgs/main/imgs20220826114338.png" alt="20220826114338"></p><p><img src="https://raw.githubusercontent.com/fyhhub/imgs/main/imgs20220826114414.png" alt="20220826114414"></p><div class="info custom-block"><p class="custom-block-title">总结</p><p>会生成单独的chunk，多个chunk被合并成一个</p></div>`,34),e=[o];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const g=s(l,[["render",c]]);export{h as __pageData,g as default};
