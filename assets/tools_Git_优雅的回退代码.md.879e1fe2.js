import{_ as s,o as a,c as p,Q as e}from"./chunks/framework.3d945e71.js";const g=JSON.parse('{"title":"一、危险操作","description":"","frontmatter":{},"headers":[],"relativePath":"tools/Git/优雅的回退代码.md","filePath":"tools/Git/优雅的回退代码.md","lastUpdated":1713452072000}'),n={name:"tools/Git/优雅的回退代码.md"},o=e(`<h1 id="一、危险操作" tabindex="-1">一、危险操作 <a class="header-anchor" href="#一、危险操作" aria-label="Permalink to &quot;一、危险操作&quot;">​</a></h1><h2 id="_1-拉取work、test、ut环境分支代码-❌" tabindex="-1">1. 拉取work、test、ut环境分支代码 ❌ <a class="header-anchor" href="#_1-拉取work、test、ut环境分支代码-❌" aria-label="Permalink to &quot;1. 拉取work、test、ut环境分支代码 ❌&quot;">​</a></h2><p>禁止拉取work、test、ut环境分支，如果合并到线上，可能会导致线上代码被污染出现Bug!</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">origin</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 错误操作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">origin</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 错误操作</span></span></code></pre></div><h2 id="_2-回退远程代码-⚠️" tabindex="-1">2. 回退远程代码 ⚠️ <a class="header-anchor" href="#_2-回退远程代码-⚠️" aria-label="Permalink to &quot;2. 回退远程代码 ⚠️&quot;">​</a></h2><p>通常我们在网上看到的回退操作，有不少是通过<code>git reset</code>进行完成的，但是这个操作是比较危险的，经常会出现你明明修改了代码，但是你merge上去之后，什么也没更改。 <strong>所以，在回退代码方面，推荐大家使用</strong><code>git revert</code><strong>操作。</strong></p><p>回退代码的原理，其实就是把你之前的代码修改，再进行反向修改。例如你进行了如下操作：</p><ol><li>基于master切了一个分支<code>feature-test</code></li><li>删除一行代码，然后提交产生了<code>Commit(C)</code></li><li>执行git revert xx之后，代码会自动反向修改，恢复那一行代码，产生Merge Commit(D)</li></ol><p>此时的git树如下: <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f9a6c0217284b67ae7794347896c687~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1189&amp;h=603&amp;s=31847&amp;e=jpg&amp;b=ffffff" alt=""></p><p>下面来介绍回退代码的几种操作</p><h3 id="_1-回退某一个commit" tabindex="-1">（1）回退某一个commit <a class="header-anchor" href="#_1-回退某一个commit" aria-label="Permalink to &quot;（1）回退某一个commit&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">产生新commit（推荐）</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">log</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 通过日志，找到你想回退代码的commitid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">425</span><span style="color:#9ECBFF;">e6dd10b86783</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 回退某个commit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">产生新commit（推荐）</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">log</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 通过日志，找到你想回退代码的commitid</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">425</span><span style="color:#032F62;">e6dd10b86783</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 回退某个commit</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9584d15f1a024b6091d9c81d0c1c2307~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=627&amp;h=234&amp;s=47074&amp;e=png&amp;b=25282e" alt="image.png"></p><p>在你执行<code>git revert</code>后，会产生一个新的commitId, 并且会出现一个message编辑器, 你可以修改revert产生的commit message</p><h3 id="_2-回退多个commit" tabindex="-1">（2）回退多个commit <a class="header-anchor" href="#_2-回退多个commit" aria-label="Permalink to &quot;（2）回退多个commit&quot;">​</a></h3><p>有如下两个commitid， <code>A</code>和<code>B</code></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dfb30bb45714ebc8237c9750bc1ae81~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=776&amp;h=184&amp;s=35688&amp;e=png&amp;b=25282e" alt="image.png"></p><p>可通过如下命令回退多个commit</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">OLDER_COMMIT^..NEWER_COMMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 回退几个commit就产生几个新commit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">OLDER_COMMIT^..NEWER_COMMIT</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 回退的commit, 合并成一个</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">OLDER_COMMIT^..NEWER_COMMIT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 回退几个commit就产生几个新commit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">OLDER_COMMIT^..NEWER_COMMIT</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 回退的commit, 合并成一个</span></span></code></pre></div><p>在上面的例子中，我们执行如下命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-n</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">82</span><span style="color:#9ECBFF;">e9029759976b9bbba6d47adf68f6a2eeafea88^..64b4646ec1ff9e3d608e583563fefd834a23b062</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-n</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">82</span><span style="color:#032F62;">e9029759976b9bbba6d47adf68f6a2eeafea88^..64b4646ec1ff9e3d608e583563fefd834a23b062</span></span></code></pre></div><p>然后你还需要重新commit, 这样你就回退了</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;revert: A, B&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;revert: A, B&quot;</span></span></code></pre></div><h3 id="_3-回退merge" tabindex="-1">（3）回退merge <a class="header-anchor" href="#_3-回退merge" aria-label="Permalink to &quot;（3）回退merge&quot;">​</a></h3><p>如果你按照上面学习到的，<code>git revert xxx</code>回退一个merge, 那么一定会出现如下问题：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">83</span><span style="color:#9ECBFF;">e2776</span></span>
<span class="line"><span style="color:#B392F0;">error:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">83</span><span style="color:#9ECBFF;">e2776adb7a47617fbd181228906e52ada396ac</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">but</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">no</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">option</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">was</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">given.</span></span>
<span class="line"><span style="color:#B392F0;">fatal:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">83</span><span style="color:#032F62;">e2776</span></span>
<span class="line"><span style="color:#6F42C1;">error:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">83</span><span style="color:#032F62;">e2776adb7a47617fbd181228906e52ada396ac</span><span style="color:#24292E;"> </span><span style="color:#032F62;">is</span><span style="color:#24292E;"> </span><span style="color:#032F62;">a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">but</span><span style="color:#24292E;"> </span><span style="color:#032F62;">no</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">option</span><span style="color:#24292E;"> </span><span style="color:#032F62;">was</span><span style="color:#24292E;"> </span><span style="color:#032F62;">given.</span></span>
<span class="line"><span style="color:#6F42C1;">fatal:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span></span></code></pre></div><p>为什么呢？因为此时git不知道要做什么。merge commit是两个分支的汇合点。本质上这两个分支地位是完全相等的。例如下面的图中，master在合并后，从<code>Commit(B)</code>移动到了<code>Commit(Merge)</code>, 此时的指针是与<code>feature-test</code>重叠的。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/623f24b8c0914df18beb91f026498836~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1798&amp;h=634&amp;s=52297&amp;e=jpg&amp;b=ffffff" alt=""></p><p>然后继续执行如下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">revert</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">83</span><span style="color:#9ECBFF;">e2776</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">revert</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">83</span><span style="color:#032F62;">e2776</span></span></code></pre></div><p>这里<code>-m 1</code>其实就是保留目标分支，回退<code>feature分支</code>上的代码。所以，一般来讲，我们都用<code>-m 1</code>即可。</p><h2 id="_3-回退本地代码-⚠️" tabindex="-1">3. 回退本地代码 ⚠️ <a class="header-anchor" href="#_3-回退本地代码-⚠️" aria-label="Permalink to &quot;3. 回退本地代码 ⚠️&quot;">​</a></h2><h3 id="_1-git-reset" tabindex="-1">（1）git reset <a class="header-anchor" href="#_1-git-reset" aria-label="Permalink to &quot;（1）git reset&quot;">​</a></h3><p>此处有三个<code>commit</code>, 如果我想回退掉<code>前面两个commit</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13cade351ddb48d59a2ab6197f918e88~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=733&amp;h=412&amp;s=55760&amp;e=png&amp;b=25282e" alt="image.png"></p><p>获取最下面的<code>commitid</code>, 然后执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">reset</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--soft</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#9ECBFF;">ffc7c6856e207d45ee71d4dd1fd53f215c9d008</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 先回退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">reset</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--soft</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#032F62;">ffc7c6856e207d45ee71d4dd1fd53f215c9d008</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 先回退</span></span></code></pre></div><p>回退完成后，你会发现你的工作区多出了被回退的代码，此时如果你想push上去，是不行的，需要强制push。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--force</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--force</span></span></code></pre></div><p>如果你后悔了刚才的回退操作, 就需要重新commit工作区的代码。</p><h3 id="_2-git-rebase-方式" tabindex="-1">（2）git rebase 方式 <a class="header-anchor" href="#_2-git-rebase-方式" aria-label="Permalink to &quot;（2）git rebase 方式&quot;">​</a></h3><p>请参考后面 <code>git rebase</code>的相关用法</p><h1 id="二、git-rebase-vs-git-merge" tabindex="-1">二、git rebase VS git merge <a class="header-anchor" href="#二、git-rebase-vs-git-merge" aria-label="Permalink to &quot;二、git rebase VS git merge&quot;">​</a></h1><p>不知怎么，<code>git rebase</code> 一直被认为初学者不应该学习它，但它实际上可以让开发团队在使用时更加轻松。我们将 <code>git rebase</code> 与 <code>git merge</code> 命令进行比较。在 Git 工作流中，说明所有可以使用 rebase 的场景</p><h2 id="_1-git-merge" tabindex="-1">1. git merge <a class="header-anchor" href="#_1-git-merge" aria-label="Permalink to &quot;1. git merge&quot;">​</a></h2><p><strong>注意：一般我们合并代码，直接使用Gitlab可视界面即可。</strong> 最简单的方式是通过以下命令将 master 分支合并到 feature 分支中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre></div><p>或者，你可以将其浓缩为一行命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre></div><p>这会在 feature 分支中创建一个新的 <strong>merge commit</strong>，它将两个分支的历史联系在一起，请看如下所示的分支结构：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f76bb7ab03fb43c2ad06b30f44b10420~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1919&amp;h=928&amp;s=50526&amp;e=jpg&amp;b=ffffff" alt=""></p><p>使用 merge 是很好的方式，因为它是一种 <strong>非破坏性的</strong> 操作。现有分支不会以任何方式被更改。这避免了 rebase 操作所产生的潜在缺陷（下面讨论）。 另一方面，这也意味着 feature 分支每次需要合并上游更改时，它都将产生一个额外的合并提交。如果master 提交非常活跃，这可能会严重污染你的 feature 分支历史记录。尽管可以使用高级选项 git log 缓解此问题，<strong>但它可能使其他开发人员难以理解项目的历史记录（此处仅做讨论，组内规范仍然使用merge流程）</strong></p><h2 id="_2-git-rebase" tabindex="-1">2. git rebase <a class="header-anchor" href="#_2-git-rebase" aria-label="Permalink to &quot;2. git rebase&quot;">​</a></h2><p>可以理解为“重新设置基线”（重新设置分支比较的起点commit），并将“新基线”以后的commit拷贝到指定的分支上。所有当前分支上在“新基线”以后的commit会被copy一份存储到一个临时区域，然后按顺序应用到指定分支上</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80295d6d477a4943950832fe379d1f64~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1818&amp;h=855&amp;s=45574&amp;e=jpg&amp;b=ffffff" alt=""></p><p>大家可能注意到了，<code>master</code>是落后于<code>feature</code>的，需要我们在<code>master</code> 上将<code>feature</code>分支合并过来。当然，你也可以使用Gitlab可视界面合并。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">merge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">master</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">merge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature</span></span></code></pre></div><h1 id="三、强大的git-rebase" tabindex="-1">三、强大的git rebase <a class="header-anchor" href="#三、强大的git-rebase" aria-label="Permalink to &quot;三、强大的git rebase&quot;">​</a></h1><h2 id="_1-git-rebase-注意事项-⚠️" tabindex="-1">1. git rebase 注意事项 ⚠️ <a class="header-anchor" href="#_1-git-rebase-注意事项-⚠️" aria-label="Permalink to &quot;1. git rebase 注意事项 ⚠️&quot;">​</a></h2><p>使用git rebase的注意事项，请一定遵守。</p><ol><li><strong>公共分支不rebase</strong></li><li><strong>已经push的部分不rebase</strong></li></ol><p>线上提交执行变基会导致什么结果： （1）你在本地对部分线上提交进行了变基，这部分提交我们称之为a，a在变基之后commit id 发生了变化 （2）你在本地改变的这些提交有可能存在于你的同事的开发分支中，我们称之为b，他们与a的内容相同，commit id 不同 （3）如果你把变基结果强行push 到远程仓库后，你的同事在本地执行git pull 的时候会导致a 和b 发生融合，且都出现在了历史提交中，导致你的变基行为无效</p><h2 id="_2-修改commit顺序" tabindex="-1">2. 修改commit顺序 <a class="header-anchor" href="#_2-修改commit顺序" aria-label="Permalink to &quot;2. 修改commit顺序&quot;">​</a></h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d90e89114f96405a850462bf7a32c4ca~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=865&amp;h=372&amp;s=90599&amp;e=png&amp;b=25272d" alt="image.png"></p><p>如果你想处理从 commit A 到最新的commit, 你需要获取这个范围外的第一条，也就是图上的最后一条commit</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">086</span><span style="color:#9ECBFF;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">086</span><span style="color:#032F62;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre></div><p>第一条是最老的commit记录。最后一条是最新的。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0b81d3873ac4d40bf4bd265a6de8584~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1358&amp;h=626&amp;s=195006&amp;e=png&amp;b=292c33" alt="image.png"> 然后交换位置后， <code>:wq</code>保存。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a5252a65796498ebc4a17ab8af9f47e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1358&amp;h=626&amp;s=184452&amp;e=png&amp;b=292c33" alt="image.png"></p><p>可以看到，两条commit顺序变了。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4dbb7b2ee03494893058d8b29c6ab30~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=861&amp;h=233&amp;s=53275&amp;e=png&amp;b=25272d" alt="image.png"></p><h2 id="_3-回退commit" tabindex="-1">3. 回退commit <a class="header-anchor" href="#_3-回退commit" aria-label="Permalink to &quot;3. 回退commit&quot;">​</a></h2><p>注意：日常不推荐使用，会导致落后于master分支，你的更改将不会产生新的merge。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">086</span><span style="color:#9ECBFF;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">086</span><span style="color:#032F62;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f01e4cd416f34a9b87574b90e1c197bf~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=578&amp;h=102&amp;s=16391&amp;e=png&amp;b=292c33" alt="image.png"></p><p>与上面的操作一样，你需要把<code>pick</code>改成<code>d</code>或者<code>drop</code>, 你也可以直接删除这一行，保存之后就会回退commit, 但是这条commit会被删除，请谨慎操作。</p><h2 id="_4-修改commit" tabindex="-1">4. 修改commit <a class="header-anchor" href="#_4-修改commit" aria-label="Permalink to &quot;4. 修改commit&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">086</span><span style="color:#9ECBFF;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">086</span><span style="color:#032F62;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0b286e3593fb4835bfbfa20f3890089c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=454&amp;h=110&amp;s=15782&amp;e=png&amp;b=292c33" alt="image.png"></p><p>将<code>pick</code>改成<code>e</code>或<code>edit</code>。然后<code>:wq</code>保存和退出编辑。 控制台会打印如下内容： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b62aaca53f740e69ea1d75af1dd2e19~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=992&amp;h=338&amp;s=68104&amp;e=png&amp;b=292c33" alt="image.png"> 此时你会进入编辑commit的状态，这时候你修改代码。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1aaf38473a844a20976d2fc1516aa14b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1476&amp;h=204&amp;s=40685&amp;e=png&amp;b=2a2d34" alt="image.png"> 再执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--continue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--continue</span></span></code></pre></div><p>然后会进入编辑commit message的状态, 在这一步你可以修改commit message <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56f23370c0504d9e953caa71bef289a9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1212&amp;h=566&amp;s=137422&amp;e=png&amp;b=292c33" alt="image.png"> 保存后，你的commit就被修改了。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea286bdfa2f84366989a90ae6b1dac4e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1098&amp;h=166&amp;s=50062&amp;e=png&amp;b=292c33" alt="image.png"></p><h2 id="_5-合并commit" tabindex="-1">5. 合并commit <a class="header-anchor" href="#_5-合并commit" aria-label="Permalink to &quot;5. 合并commit&quot;">​</a></h2><p>如果你想让自己的commit好看一点，你可以把你这次需求所有的commit进行合并。有如下三个commit</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dc77096dc16048698cf62fde35759e48~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=829&amp;h=367&amp;s=82704&amp;e=png&amp;b=25272d" alt="image.png"></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rebase</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-i</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">086</span><span style="color:#9ECBFF;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rebase</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-i</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">086</span><span style="color:#032F62;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4eeefc284564417e804c8393ece79d93~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1386&amp;h=720&amp;s=226865&amp;e=png&amp;b=292c33" alt="image.png"></p><p>修改一下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a99f6efffe3f4fa086d2d4c7bf61419c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=522&amp;h=128&amp;s=22204&amp;e=png&amp;b=292c33" alt="image.png"></p><p>将<code>pick</code>改成<code>s</code>或<code>squash</code>, 这个意思是把commit合并到前一个commit。在上面的例子中，都被合并到了commit A git会将三个commit 的message也进行合并, 你也可以编辑commit A的 message</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dc2b7b592be4084820da305a86a5c53~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1190&amp;h=458&amp;s=61244&amp;e=png&amp;b=292c33" alt="image.png"></p><p>最后只剩下一个 commit</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/63f61ede84364eb1994140ccad8b6a7b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=823&amp;h=194&amp;s=34357&amp;e=png&amp;b=25272d" alt="image.png"></p><p>如果你闲麻烦，想直接合并，省略掉编辑message的过程，可以这样：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xxx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feat:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 改成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">xxx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feat:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xxx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feat:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 改成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">xxx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feat:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A</span></span></code></pre></div><h1 id="四、git-cherry-pick" tabindex="-1">四、git cherry-pick <a class="header-anchor" href="#四、git-cherry-pick" aria-label="Permalink to &quot;四、git cherry-pick&quot;">​</a></h1><p><code>git cherry-pick</code>命令的作用，就是将指定的提交（commit）应用于其他分支。 比如，你的<code>feature-A</code>分支上产生了一个commit (086cbb47628be91b3cc2407056d231fe8c75a120) 另一位同学<code>feature-B</code>也想用你的这份代码，但是其他的代码并不想要，可以这么操作</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature-B</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cherry-pick</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">086</span><span style="color:#9ECBFF;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature-B</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cherry-pick</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">086</span><span style="color:#032F62;">cbb47628be91b3cc2407056d231fe8c75a120</span></span></code></pre></div><p>也支持同时多个cmmit</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cherry-pick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">B</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">C</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cherry-pick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A</span><span style="color:#24292E;"> </span><span style="color:#032F62;">B</span><span style="color:#24292E;"> </span><span style="color:#032F62;">C</span></span></code></pre></div><p>支持某个范围</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cherry-pick</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">A^..B</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># A是最老的commit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cherry-pick</span><span style="color:#24292E;"> </span><span style="color:#032F62;">A^..B</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># A是最老的commit</span></span></code></pre></div><h1 id="五、git-stash" tabindex="-1">五、git stash <a class="header-anchor" href="#五、git-stash" aria-label="Permalink to &quot;五、git stash&quot;">​</a></h1><p>你可能会遇到这样的场景：在<code>feature-A</code>分支上开发，突然来了另一个需求，但是我不想 commit提交我的代码，想直接进入<code>feature-B</code>的开发。正常来讲这肯定是不行的，但是我们可以用<code>git stash</code>临时将代码存放起来。</p><p><code>git stash</code>的用法相当简单：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stash</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 先临时存起来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature-B</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 切换到另外的分支</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 先临时存起来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature-B</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 切换到另外的分支</span></span></code></pre></div><p>开发完成后，再恢复过来:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">checkout</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">feature-A</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 切换回来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">list</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 可以查看stash 记录</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stash</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">apply</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 恢复代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">checkout</span><span style="color:#24292E;"> </span><span style="color:#032F62;">feature-A</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 切换回来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">list</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 可以查看stash 记录</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stash</span><span style="color:#24292E;"> </span><span style="color:#032F62;">apply</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 恢复代码</span></span></code></pre></div><p>当然，你也可以用可视界面操作：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27c1763cd7d74298b694e8b3e493f0db~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=827&amp;h=228&amp;s=68198&amp;e=png&amp;b=272a30" alt="image.png"></p><h1 id="六、vscode插件推荐" tabindex="-1">六、VSCode插件推荐 <a class="header-anchor" href="#六、vscode插件推荐" aria-label="Permalink to &quot;六、VSCode插件推荐&quot;">​</a></h1><h2 id="_1-gitlen" tabindex="-1">1. Gitlen <a class="header-anchor" href="#_1-gitlen" aria-label="Permalink to &quot;1. Gitlen&quot;">​</a></h2><p>非常推荐安装</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/315ef9a492574548a3b06897375fdd89~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=357&amp;h=71&amp;s=15852&amp;e=png&amp;b=202227" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db39c6b199cc4811b2d7a75676180f0b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=366&amp;h=210&amp;s=14027&amp;e=png&amp;b=2e3139" alt="image.png"></p><p>可以看到每一行，每一个文件的commit记录。鼠标放在代码上也可以看到最近谁更改了这一行</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66be2ed764fc471dbc8f03ca46f08420~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=435&amp;h=73&amp;s=7956&amp;e=png&amp;b=262930" alt="image.png"></p><h2 id="_2-gitlab-workflow" tabindex="-1">2. Gitlab Workflow <a class="header-anchor" href="#_2-gitlab-workflow" aria-label="Permalink to &quot;2. Gitlab Workflow&quot;">​</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86979707c01f426db4c061d8283f1de2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=367&amp;h=75&amp;s=11581&amp;e=png&amp;b=24262c" alt="image.png"></p><p>可以一键创建MR</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15ac89c4bf544232a0e227c03b8c9cc8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=153&amp;h=54&amp;s=3610&amp;e=png&amp;b=24272d" alt="image.png"></p><p>并且支持在VSCode上看MR记录</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1873adf5dc6c49a0b8b4531f3541c567~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=367&amp;h=256&amp;s=22706&amp;e=png&amp;b=202227" alt="image.png"></p>`,122),l=[o];function t(c,r,i,y,d,m){return a(),p("div",null,l)}const b=s(n,[["render",t]]);export{g as __pageData,b as default};
