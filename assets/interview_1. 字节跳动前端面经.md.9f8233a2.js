import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3da76edf.js";const u=JSON.parse('{"title":"字节跳动前端面经","description":"","frontmatter":{},"headers":[],"relativePath":"interview/1. 字节跳动前端面经.md","filePath":"interview/1. 字节跳动前端面经.md","lastUpdated":1694057540000}'),p={name:"interview/1. 字节跳动前端面经.md"},o=l(`<h1 id="字节跳动前端面经" tabindex="-1">字节跳动前端面经 <a class="header-anchor" href="#字节跳动前端面经" aria-label="Permalink to &quot;字节跳动前端面经&quot;">​</a></h1><p><a href="https://www.nowcoder.com/discuss/702216?type=all&amp;order=recall&amp;pos=&amp;page=1&amp;ncTraceId=&amp;channel=-1&amp;source_id=search_all_nctrack&amp;gio_id=20F1EB59F6FD31FAD435BEE8B652A731-1641826247965" target="_blank" rel="noreferrer">面经链接</a></p><h2 id="一面" tabindex="-1">一面 <a class="header-anchor" href="#一面" aria-label="Permalink to &quot;一面&quot;">​</a></h2><h3 id="算法题-路径总和" tabindex="-1">算法题：路径总和 <a class="header-anchor" href="#算法题-路径总和" aria-label="Permalink to &quot;算法题：路径总和&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">root</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">targetSum</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{boolean}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasPathSum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">targetSum</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 空节点 没找到这条路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 找到</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.left </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">root.right </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> targetSum </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> root.val) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hasPathSum</span><span style="color:#E1E4E8;">(root.left, targetSum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> root.val) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hasPathSum</span><span style="color:#E1E4E8;">(root.right, targetSum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> root.val)</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">root</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">targetSum</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{boolean}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasPathSum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">targetSum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 空节点 没找到这条路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 找到</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.left </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">root.right </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> targetSum </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> root.val) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hasPathSum</span><span style="color:#24292E;">(root.left, targetSum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> root.val) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hasPathSum</span><span style="color:#24292E;">(root.right, targetSum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> root.val)</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="手写-reduce" tabindex="-1">手写 reduce <a class="header-anchor" href="#手写-reduce" aria-label="Permalink to &quot;手写 reduce&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">pre</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pre;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(res, item, index, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">, </span><span style="color:#E36209;">pre</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pre;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    res </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(res, item, index, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="讲一下浏览器缓存" tabindex="-1">讲一下浏览器缓存 <a class="header-anchor" href="#讲一下浏览器缓存" aria-label="Permalink to &quot;讲一下浏览器缓存&quot;">​</a></h3><p>浏览器缓存，从请求的优先级依次为</p><ol><li>Memory Cache</li><li>Service Worker Cache</li><li>HTTP Cache</li><li>Push Cache</li></ol><h4 id="http-缓存" tabindex="-1">HTTP 缓存 <a class="header-anchor" href="#http-缓存" aria-label="Permalink to &quot;HTTP 缓存&quot;">​</a></h4><p>强缓存</p><ul><li>expires <ul><li>通过 <code>绝对的时间戳</code> 来控制缓存过期时间</li></ul></li><li>cache-control <ul><li>max-age 字段通过 <code>相对的时间长度</code> 来控制缓存过期时间</li><li>s-maxage 优先级比 max-age 更高，用于<code>代理服务器的缓存</code>（并且<code>只在代理服务器中生效</code>，客户端不考虑该字段）</li><li>如果设置了 public 字段，它<code>既可以被浏览器缓存，也可以被代理服务器缓存</code></li><li>如果设置了 private 字段，<code>只能被浏览器缓存</code></li><li>no-cache 字段会跳过<code>强缓存</code></li><li>no-store 字段会跳过<code>强缓存</code>和<code>协商缓存</code></li></ul></li></ul><p>协商缓存</p><ul><li><p>Last-Modified 和 If-Modified-Since</p><ul><li>如果响应的前后时间发生变化，代表资源有变化，重新返回新数据</li><li>缺点：编辑了文件，但是没有改变内容，例如改变后又撤回。服务器无法知道是否真的改变，还是会返回新资源</li><li>缺点：修改文件太快，服务器无法监听到文件变化</li></ul></li><li><p>ETag 和 If-None-Match</p><ul><li>Etag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准</li><li>缺点：Etag 的生成过程需要服务器额外付出开销, 会影响服务端的性能</li></ul></li></ul><h3 id="vue-和-react-的区别" tabindex="-1">vue 和 react 的区别 <a class="header-anchor" href="#vue-和-react-的区别" aria-label="Permalink to &quot;vue 和 react 的区别&quot;">​</a></h3><p>以下出自 <code>@尤雨溪</code> 尤大的观点：</p><ul><li><p>Vue 使用的是 web 开发者更熟悉的模板与特性，React 的特色在于<code>函数式编程</code>的理念和丰富的技术选型，Vue 比起 React 更容易被前端工程师接受。</p></li><li><p>实现上，Vue 跟 React 的<code>最大区别</code>在于数据的 reactivity，就是<code>响应式系统</code>上。</p><ul><li>Vue 提供反应式的数据，当数据改动时，界面就会自动更新，而 React 里面需要调用方法 SetState。我把两者分别称为<code>Push-based</code>和<code>Pull-based</code></li><li>所谓<code>Push-based</code>就是说，改动数据之后，<code>数据本身会把这个改动推送出去</code>，告知渲染系统自动进行渲染。在 React 里面，它是一个 Pull 的形式，<code>用户要给系统一个明确的信号说明现在需要重新渲染了</code>，这个系统才会重新渲染。</li></ul></li></ul><p>当然以上的回答，只是两者的一部分区别，我认为还有下面这些区别</p><ul><li>API 差异，vue 的 api 非常多，而 react 相对少很多</li><li>vue 可以在编译时阶段优化，但是 react 只能优化运行时</li><li>架构层面的区别：vue 包含<code>响应式系统</code>, <code>compiler</code>，<code>运行时过程</code>。react 包含，<code>调度器</code>，<code>协调器</code>,<code>渲染器</code></li></ul><h3 id="hooks-用过吗-聊聊-react-中-class-组件和函数组件的区别" tabindex="-1">hooks 用过吗？聊聊 react 中 class 组件和函数组件的区别 <a class="header-anchor" href="#hooks-用过吗-聊聊-react-中-class-组件和函数组件的区别" aria-label="Permalink to &quot;hooks 用过吗？聊聊 react 中 class 组件和函数组件的区别&quot;">​</a></h3><p><strong>从 API 层面来讲</strong>，class 组件是个类，需要继承<code>React.Component</code>, 上包含很多声明周期，以及方法，并且需要保存状态。 而函数式组件，是一个函数，没有像类组件那么多的声明周期，方法和属性，不需要保存状态</p><p><strong>从使用层面来讲</strong>，函数式组件能够更好的<code>拆分和复用逻辑</code></p><p><strong>从源码层面来讲</strong></p><h3 id="前端性能优化你会怎么做" tabindex="-1">前端性能优化你会怎么做 <a class="header-anchor" href="#前端性能优化你会怎么做" aria-label="Permalink to &quot;前端性能优化你会怎么做&quot;">​</a></h3><ul><li>网络：图片懒加载，雪碧图，gzip, http 缓存，cdn</li><li>webpack: splitChunk, tree-shaking, terser 压缩，dll</li><li>其他：减少回流重绘</li></ul><h2 id="二面" tabindex="-1">二面 <a class="header-anchor" href="#二面" aria-label="Permalink to &quot;二面&quot;">​</a></h2><h3 id="算法题" tabindex="-1">算法题 <a class="header-anchor" href="#算法题" aria-label="Permalink to &quot;算法题&quot;">​</a></h3><p>fn([[&#39;a&#39;, &#39;b&#39;], [&#39;n&#39;, &#39;m&#39;], [&#39;0&#39;, &#39;1&#39;]]) =&gt; [&#39;an0&#39;, &#39;am0&#39;, &#39;an1&#39;, &#39;am1&#39;, &#39;bn0&#39;, &#39;bm0&#39;, &#39;bn1&#39;, &#39;bm0&#39;]</p><p>一道简单的回溯题，有点像电话号码组合那道题</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">path</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (path.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">path]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr[index].</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(index </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, path.</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(arr[index][i]));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">index</span><span style="color:#24292E;">, </span><span style="color:#E36209;">path</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (path.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">([</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">path]);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr[index].</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(index </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, path.</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(arr[index][i]));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="事件代理是什么" tabindex="-1">事件代理是什么 <a class="header-anchor" href="#事件代理是什么" aria-label="Permalink to &quot;事件代理是什么&quot;">​</a></h3><p>事件代理就是利用了冒泡事件，例如 click 事件，只需要在父节点上绑定，触发了子节点的 click 时间，就会冒泡到父节点，减少事件绑定。 好处：</p><ol><li>减少 dom 操作，提高性能</li><li>添加子元素，自动会有处理事件</li></ol><h3 id="tcp-和-udp-的区别" tabindex="-1">Tcp 和 Udp 的区别 <a class="header-anchor" href="#tcp-和-udp-的区别" aria-label="Permalink to &quot;Tcp 和 Udp 的区别&quot;">​</a></h3><p><a href="/basic/计算机网络/TCP/TCP和UDP区别.html">Tcp 和 Udp 的区别</a></p>`,36),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{u as __pageData,F as default};
