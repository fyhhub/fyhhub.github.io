import{_ as a,o as e,c as l,Q as o}from"./chunks/framework.3d945e71.js";const g=JSON.parse('{"title":"什么是跨域，有哪些解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"basic/计算机网络/HTTP/什么是跨域资源共享.md","filePath":"basic/计算机网络/HTTP/什么是跨域资源共享.md","lastUpdated":1697507502000}'),t={name:"basic/计算机网络/HTTP/什么是跨域资源共享.md"},i=o('<h1 id="什么是跨域-有哪些解决方案" tabindex="-1">什么是跨域，有哪些解决方案 <a class="header-anchor" href="#什么是跨域-有哪些解决方案" aria-label="Permalink to &quot;什么是跨域，有哪些解决方案&quot;">​</a></h1><p>域名、协议、端口，有一个不同，发送的请求就算跨域</p><h2 id="_1-cors" tabindex="-1">1. CORS <a class="header-anchor" href="#_1-cors" aria-label="Permalink to &quot;1. CORS&quot;">​</a></h2><ol><li><p>简称 <code>CORS</code> 是 W3C 标准，它允许浏览器向跨源服务器发送请求（域名协议端口有不相同的服务器，都算跨源）</p></li><li><p>浏览器将 <code>CORS</code> 分为两类：简单请求 和 非简单请求</p></li></ol><ul><li><p><strong>简单请求</strong></p><ul><li>请求方法：<strong>HEAD、GET、POST</strong></li></ul></li><li><p><strong>非简单请求</strong></p><ul><li>会发送预检请求</li><li>预检请求的请求方法是 <code>OPTIONS</code></li><li><strong>Content-Type：application/json 都是非简单请求</strong></li></ul></li><li><p>请求时会携带 <code>origin</code> 头字段</p></li><li><p>简单请求头信息不超出以下字段</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain</li></ul></li></ul><ol start="3"><li>后端关于响应头返回</li></ol><ul><li><p><strong>Access-Control-Allow-Origin: <a href="http://api.bob.com" target="_blank" rel="noreferrer">http://api.bob.com</a></strong></p><p>允许请求的源</p></li><li><p><strong>Access-Control-Allow-Credentials: true</strong></p><p>允许请求携带 cookie, xhr.withCredentials = true; 可以设置</p></li><li><p><strong>Access-Control-Request-Methods: POST, GET</strong></p><p>允许请求的方法</p></li><li><p><strong>Access-Control-Expose-Headers: FooBar</strong></p><p>允许前端获取的响应头字段</p></li><li><p><strong>Access-Control-Max-Age: 3000</strong></p><p>控制预检请求缓存时间，不用每次都预检</p></li></ul><h2 id="_2-jsonp" tabindex="-1">2. jsonp <a class="header-anchor" href="#_2-jsonp" aria-label="Permalink to &quot;2. jsonp&quot;">​</a></h2><p>JSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是<code>仅支持get方法</code>具有局限性</p><p>实现方案：</p><ul><li>声明一个回调函数</li><li>创建一个&lt;script&gt;标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）</li><li>服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串, 例如 callback(data)</li><li>客户端获取到<code>callback(data)</code>这段脚本，最后执行 callback</li></ul><h2 id="_3-代理服务" tabindex="-1">3. 代理服务 <a class="header-anchor" href="#_3-代理服务" aria-label="Permalink to &quot;3. 代理服务&quot;">​</a></h2><p>通过 nginx 或 node 服务转发请求</p><h2 id="_4-iframe" tabindex="-1">4. iframe <a class="header-anchor" href="#_4-iframe" aria-label="Permalink to &quot;4. iframe&quot;">​</a></h2><h2 id="_5-postmessage" tabindex="-1">5. postMessage <a class="header-anchor" href="#_5-postmessage" aria-label="Permalink to &quot;5. postMessage&quot;">​</a></h2><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noreferrer">跨域资源共享 CORS 详解</a></p>',17),r=[i];function s(n,c,p,d,h,_){return e(),l("div",null,r)}const m=a(t,[["render",s]]);export{g as __pageData,m as default};
