import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.3d945e71.js";const h=JSON.parse('{"title":"module 模块使用","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-advanced/node/module模块使用.md","filePath":"frontend-advanced/node/module模块使用.md","lastUpdated":1712883902000}'),o={name:"frontend-advanced/node/module模块使用.md"},p=l(`<h1 id="module-模块使用" tabindex="-1">module 模块使用 <a class="header-anchor" href="#module-模块使用" aria-label="Permalink to &quot;module 模块使用&quot;">​</a></h1><h2 id="resolvefilename" tabindex="-1">_resolveFilename <a class="header-anchor" href="#resolvefilename" aria-label="Permalink to &quot;\\_resolveFilename&quot;">​</a></h2><p><strong>作用：解析模块的真实路径，例如相对路径解析为绝对路径。</strong></p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">flowchart</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TB</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">Module._resolveFilename</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">{</span><span style="color:#9ECBFF;">是否为内置模块</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">否</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">Module._resolveLookupPaths, 将paths和环境变量node_modules合并</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">是</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">c</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">End</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">d </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">Module._findPath,在paths中解析模块的真实路径</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">f </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">flowchart</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TB</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">Module._resolveFilename</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">{</span><span style="color:#032F62;">是否为内置模块</span><span style="color:#D73A49;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">否</span><span style="color:#24292E;">|</span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">Module._resolveLookupPaths, 将paths和环境变量node_modules合并</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">是</span><span style="color:#24292E;">|</span><span style="color:#E36209;">c</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">End</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">d </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">f</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">Module._findPath,在paths中解析模块的真实路径</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">f </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parent</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: fromFile, </span><span style="color:#6A737D;">// 文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  filename: fromFile, </span><span style="color:#6A737D;">// 文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  paths: Module.</span><span style="color:#B392F0;">_nodeModulePaths</span><span style="color:#E1E4E8;">(fromDir), </span><span style="color:#6A737D;">// 获取所有node_modules可能的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二个参数实际上是父模块对象</span></span>
<span class="line"><span style="color:#E1E4E8;">Module.</span><span style="color:#B392F0;">_resolveFilename</span><span style="color:#E1E4E8;">(moduleId, parent);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parent</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: fromFile, </span><span style="color:#6A737D;">// 文件路径</span></span>
<span class="line"><span style="color:#24292E;">  filename: fromFile, </span><span style="color:#6A737D;">// 文件路径</span></span>
<span class="line"><span style="color:#24292E;">  paths: Module.</span><span style="color:#6F42C1;">_nodeModulePaths</span><span style="color:#24292E;">(fromDir), </span><span style="color:#6A737D;">// 获取所有node_modules可能的位置</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二个参数实际上是父模块对象</span></span>
<span class="line"><span style="color:#24292E;">Module.</span><span style="color:#6F42C1;">_resolveFilename</span><span style="color:#24292E;">(moduleId, parent);</span></span></code></pre></div><h2 id="nodemodulepaths" tabindex="-1">_nodeModulePaths <a class="header-anchor" href="#nodemodulepaths" aria-label="Permalink to &quot;\\_nodeModulePaths&quot;">​</a></h2><p>作用：生成 node_modules 可能的路径，例如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Module.</span><span style="color:#B392F0;">_nodeModulePaths</span><span style="color:#E1E4E8;">(fromDir);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// fromDir: /home/yuangong/tmp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// [ &#39;/home/yuangong/tmp/node_modules&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;/home/yuangong/node_modules&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;/home/node_modules&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;/node_modules&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Module.</span><span style="color:#6F42C1;">_nodeModulePaths</span><span style="color:#24292E;">(fromDir);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// fromDir: /home/yuangong/tmp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// [ &#39;/home/yuangong/tmp/node_modules&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;/home/yuangong/node_modules&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;/home/node_modules&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;/node_modules&#39; ]</span></span></code></pre></div><h2 id="findpath" tabindex="-1">_findPath <a class="header-anchor" href="#findpath" aria-label="Permalink to &quot;\\_findPath&quot;">​</a></h2><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">flowchart</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TB</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">Module._findPath</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">{</span><span style="color:#9ECBFF;">查询缓存</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">是</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">c</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">直接返回结果</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">c </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">End</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">否</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">遍历paths,合并path和request</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">e </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">{</span><span style="color:#9ECBFF;">文件是否存在</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">f </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">否</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">e</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">f </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">是</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">g</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">调用toRealPath生成真实路径</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">g </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">h</span><span style="color:#F97583;">{</span><span style="color:#9ECBFF;">路径是否存在</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">h </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">是</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">d</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">h </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">否</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">e</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">flowchart</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TB</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">Module._findPath</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">{</span><span style="color:#032F62;">查询缓存</span><span style="color:#D73A49;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">是</span><span style="color:#24292E;">|</span><span style="color:#E36209;">c</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">直接返回结果</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">c </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">End</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">否</span><span style="color:#24292E;">|</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">遍历paths,合并path和request</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">e </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">f</span><span style="color:#D73A49;">{</span><span style="color:#032F62;">文件是否存在</span><span style="color:#D73A49;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">f </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">否</span><span style="color:#24292E;">|</span><span style="color:#E36209;">e</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">f </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">是</span><span style="color:#24292E;">|</span><span style="color:#E36209;">g</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">调用toRealPath生成真实路径</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">g </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">h</span><span style="color:#D73A49;">{</span><span style="color:#032F62;">路径是否存在</span><span style="color:#D73A49;">}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">h </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">是</span><span style="color:#24292E;">|</span><span style="color:#E36209;">d</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">h </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">否</span><span style="color:#24292E;">|</span><span style="color:#E36209;">e</span></span></code></pre></div><h2 id="node-模块解析流程" tabindex="-1">Node 模块解析流程 <a class="header-anchor" href="#node-模块解析流程" aria-label="Permalink to &quot;Node 模块解析流程&quot;">​</a></h2><ul><li><p>Nodejs 项目模块路径解析是通过<code>require.resolve</code>方法来实现的</p></li><li><p><code>require.resolve</code>就是通过<code>Module.resolveFileName</code> 方法实现的</p></li><li><p><code>require.resolve</code>实现原理:</p><ul><li><p><code>Module.resolveFileName</code>方法核心流程有 3 点:</p><ul><li>判断是否为内置模块</li><li>通过<code>ModuleresolveLookupPaths</code>方法生成<code>node_modules</code>可能存在的路径</li><li>通过<code>Module.findPath</code>查询模块的真实路径</li></ul></li><li><p><code>Module.findPath</code>核心流程有 4 点:</p><ul><li>查询缓存(将<code>request和paths</code>通过<code>\\x00</code>合并成 cacheKey)</li><li>遍历 paths 将<code>path与request</code>组成文件路径<code>basePath</code></li><li>如果<code>basePath</code>存在则调用<code>fs.realPathSync</code>获取文件真实路径</li><li>将文件真实路径缓存到<code>Module.pathCache</code>(key 就是前面生成的 cacheKey)。</li></ul></li><li><p><code>fs.realPathSync</code>核心流程有 3 点:</p><ul><li>查询缓存(缓存的 key 为 p 即<code>Module.findPath</code>中生成的文件路径) 更多课程街</li><li>从左往右遍历路径字符串，查询到<code>/</code>时，拆分路径，判断该路径是否为软链接，如果是软链接则查询真实链接，并生成新路径 p 然后继续往后遍历，这里有 1 个细节需要特别注意: <ul><li>遍历过程中生成的子路径 base 会缓存在 knownHard 和 cache 中，避免重复查询</li></ul></li><li>遍历完成得到模块对应的真实路径，此时会将原始路路径 original 作为 key，真实路径作为 value，保存到缓存中</li></ul></li></ul></li><li><p><code>require.resolve.paths</code>等价于<code>Module.resolveLookupPaths</code>，该方法用于获取所有<code>node_modules</code></p><ul><li>如果路径为/(根目录)，直接返回<code>[&#39;/node_modules&#39;]</code></li><li>否则，将路径字符串从后往前遍历，查询到/时，拆分路径，在后面加上<code>node_modules</code>，并传入一个<code>paths</code>数组，直至查询不到<code>/</code>后返回<code>paths</code>数组</li></ul></li></ul>`,12),e=[p];function c(t,r,y,E,d,i){return a(),n("div",null,e)}const u=s(o,[["render",c]]);export{h as __pageData,u as default};
