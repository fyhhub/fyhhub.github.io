import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.968e3df4.js";const u=JSON.parse('{"title":"Webpack 原理系列之彻底搞懂 loader 原理","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/webpack/Webpack Loader/Webpack原理系列之彻底搞懂loader原理.md","filePath":"frontend-engineering/webpack/Webpack Loader/Webpack原理系列之彻底搞懂loader原理.md","lastUpdated":1693815018000}'),p={name:"frontend-engineering/webpack/Webpack Loader/Webpack原理系列之彻底搞懂loader原理.md"},o=l(`<h1 id="webpack-原理系列之彻底搞懂-loader-原理" tabindex="-1">Webpack 原理系列之彻底搞懂 loader 原理 <a class="header-anchor" href="#webpack-原理系列之彻底搞懂-loader-原理" aria-label="Permalink to &quot;Webpack 原理系列之彻底搞懂 loader 原理&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>loader 是 webpack 打包过程中非常重要的一环，通过了解 loader 的执行过程，不仅可以学习到很多设计思想，还可以在以后遇到 webpack 配置问题，处理起来得心应手</p><h2 id="如何写一个-loader" tabindex="-1">如何写一个 loader <a class="header-anchor" href="#如何写一个-loader" aria-label="Permalink to &quot;如何写一个 loader&quot;">​</a></h2><p>loader 本质是一个函数，接收文件内容，返回处理过后的源码，下面是一个简单的 loader 示例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(source); </span><span style="color:#6A737D;">// 在这里你可以对文件内容进行转换或处理</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(source); </span><span style="color:#6A737D;">// 在这里你可以对文件内容进行转换或处理</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>以上实现了一个简单的 loader, 看起来是不是很简单。下面稍微升级一点难度。实现一个简单的<code>style-loader</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`let style = document.createElement(&quot;style&quot;);</span></span>
<span class="line"><span style="color:#9ECBFF;">    style.innerHTML = \${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">      </span><span style="color:#E1E4E8;">source</span></span>
<span class="line"><span style="color:#9ECBFF;">    )</span><span style="color:#9ECBFF;">}; document.head.appendChild(style); \`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> script;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`let style = document.createElement(&quot;style&quot;);</span></span>
<span class="line"><span style="color:#032F62;">    style.innerHTML = \${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span></span>
<span class="line"><span style="color:#032F62;">      </span><span style="color:#24292E;">source</span></span>
<span class="line"><span style="color:#032F62;">    )</span><span style="color:#032F62;">}; document.head.appendChild(style); \`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> script;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader;</span></span></code></pre></div><p>当我们配置上<code>style-loader</code>后，遇到<code>import &#39;a.css&#39;</code>时会将其原本的内容替换成一段 JS 脚本，并将样式代码插入到<code>head</code>标签中</p><h2 id="loader-的种类" tabindex="-1">loader 的种类 <a class="header-anchor" href="#loader-的种类" aria-label="Permalink to &quot;loader 的种类&quot;">​</a></h2><p>虽说要实现一个 loader 很简单，但是需要注意的是，在 webpack 中 loader 可以分以下几种类型：</p><ul><li><strong>pre loader</strong></li><li><strong>normal loader</strong></li><li><strong>inline loader</strong></li><li><strong>post loader</strong></li></ul><p>以上 loader 的执行是<code>从上到下</code>执行的。也就是 <code>pre-loader =&gt; normal loader =&gt; inline loader =&gt; post loader</code>，我们先来看一个例子。</p><p>代码包含两个文件<code>index.js</code>和<code>test.js</code>, 在导入<code>test.js</code>时使用了<code>inline-loader</code>, 我们先不关心各种 Loader 是怎么写的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;inline-loader2!inline-loader1!./test&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> test</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;inline-loader2!inline-loader1!./test&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> test</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><p>下面的代码配置了另外三种 loader</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loaderPath</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">loaders</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaders.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;loaders&quot;</span><span style="color:#E1E4E8;">, loader </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.js&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&quot;development&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&quot;./src/index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&quot;bundle.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// pre loader</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        enforce: </span><span style="color:#9ECBFF;">&quot;pre&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: </span><span style="color:#B392F0;">loaderPath</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;pre-loader1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;pre-loader2&quot;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// normal loader</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: </span><span style="color:#B392F0;">loaderPath</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;normal-loader1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;normal-loader2&quot;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// post loader</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        enforce: </span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: </span><span style="color:#B392F0;">loaderPath</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&quot;post-loader1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;post-loader2&quot;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loaderPath</span><span style="color:#24292E;">(</span><span style="color:#E36209;">loaders</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaders.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;loaders&quot;</span><span style="color:#24292E;">, loader </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.js&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mode: </span><span style="color:#032F62;">&quot;development&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  entry: </span><span style="color:#032F62;">&quot;./src/index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  output: {</span></span>
<span class="line"><span style="color:#24292E;">    filename: </span><span style="color:#032F62;">&quot;bundle.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  module: {</span></span>
<span class="line"><span style="color:#24292E;">    rules: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// pre loader</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        enforce: </span><span style="color:#032F62;">&quot;pre&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: </span><span style="color:#6F42C1;">loaderPath</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;pre-loader1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;pre-loader2&quot;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// normal loader</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: </span><span style="color:#6F42C1;">loaderPath</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;normal-loader1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;normal-loader2&quot;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// post loader</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        test:</span><span style="color:#032F62;"> /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        enforce: </span><span style="color:#032F62;">&quot;post&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        use: </span><span style="color:#6F42C1;">loaderPath</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&quot;post-loader1&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;post-loader2&quot;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>看下运行结果</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.js 执行的loader</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span>
<span class="line"><span style="color:#E1E4E8;">normal </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">normal </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span>
<span class="line"><span style="color:#E1E4E8;">post </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">post </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// test.js 执行的loader</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">pre </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span>
<span class="line"><span style="color:#E1E4E8;">normal </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">normal </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span>
<span class="line"><span style="color:#E1E4E8;">inline </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">inline </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span>
<span class="line"><span style="color:#E1E4E8;">post </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader2;</span></span>
<span class="line"><span style="color:#E1E4E8;">post </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> loader1;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.js 执行的loader</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span>
<span class="line"><span style="color:#24292E;">normal </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">normal </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span>
<span class="line"><span style="color:#24292E;">post </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">post </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// test.js 执行的loader</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">pre </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span>
<span class="line"><span style="color:#24292E;">normal </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">normal </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span>
<span class="line"><span style="color:#24292E;">inline </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">inline </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span>
<span class="line"><span style="color:#24292E;">post </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader2;</span></span>
<span class="line"><span style="color:#24292E;">post </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> loader1;</span></span></code></pre></div><h3 id="inline-loader-的写法" tabindex="-1">inline loader 的写法 <a class="header-anchor" href="#inline-loader-的写法" aria-label="Permalink to &quot;inline loader 的写法&quot;">​</a></h3><p>通过上面的示例，我们大体了解了 loader 的执行顺序，大家先留个印象。但是大家可能比较疑惑，<code>inline-loader</code>的写法怎么这么奇怪。有时候我们项目在编译的时候经常会看到类似的 log, 比如 vue 编译的时候, 有这么一长串：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-!</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loaders</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">templateLoader.js</span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">options</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.js</span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">options</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">app.vue</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">5ef48958</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">scoped</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-!</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loaders</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">templateLoader.js</span><span style="color:#D73A49;">??</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">options</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.js</span><span style="color:#D73A49;">??</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">options</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">app.vue</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">5ef48958</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">scoped</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#D73A49;">&amp;</span></span></code></pre></div><p>上面的内容其实可以分为四部分</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">-!</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">loaders</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">templateLoader.js</span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">..</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">lib</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">index.js</span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">app.vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">vue</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">type</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">template</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">5ef48958</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">scoped</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">true</span><span style="color:#F97583;">&amp;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">-!</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">loaders</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">templateLoader.js</span><span style="color:#D73A49;">??</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#24292E;">..</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">lib</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">index.js</span><span style="color:#D73A49;">??</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">app.vue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;">vue</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">type</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">template</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">5ef48958</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">scoped</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">true</span><span style="color:#D73A49;">&amp;</span></span></code></pre></div><p><code>inline-loader</code>其实是通过<code>!</code>将 loader 进行分割，例如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;inline-loader2!inline-loader1!./test&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 包含 inline-loader2 和 inline-loader1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;inline-loader2!inline-loader1!./test&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 包含 inline-loader2 和 inline-loader1</span></span></code></pre></div><p>那么<code>-!</code>这个前缀又是什么呢，其实前缀有多种写法： <a href="https://webpack.js.org/concepts/loaders/#configuration" target="_blank" rel="noreferrer">Webpack 中文文档</a></p><table><thead><tr><th>符号</th><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>-!</td><td>noPreAutoLoaders</td><td>不要前置和普通 loader</td></tr><tr><td>!</td><td>noAutoLoaders</td><td>不要普通 loader</td></tr><tr><td>!!</td><td>noPrePostAutoLoaders</td><td>其他 loader 都不要，只要内联 loader</td></tr></tbody></table><p>比如我们在前面加了<code>!!</code>前缀，那么<code>normal</code>, <code>pre</code>, <code>post</code> loader 都不会执行， 所以内联 loader 是比较灵活的，在日常项目中并不推荐使用</p><h2 id="loader-是如何执行的" tabindex="-1">loader 是如何执行的 <a class="header-anchor" href="#loader-是如何执行的" aria-label="Permalink to &quot;loader 是如何执行的&quot;">​</a></h2><p>其实 webpack 为了实现 loader 的功能，单独开发了一个 loader 执行器，也就是<a href="https://www.npmjs.com/package/loader-runner" target="_blank" rel="noreferrer">loader-runnner</a>。下面看个简单的例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { runLoaders } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;loader-runner&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">runLoaders</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource: </span><span style="color:#9ECBFF;">&quot;/abs/path/to/file.txt?query&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 需要处理的文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaders: [</span><span style="color:#9ECBFF;">&quot;/abs/path/to/loader.js&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// loader文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    context: { minimize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// loader上下文，可通过this获取</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">processResource</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resourcePath</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    readResource: fs.readFile.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(fs)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 处理后的文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { runLoaders } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;loader-runner&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">runLoaders</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    resource: </span><span style="color:#032F62;">&quot;/abs/path/to/file.txt?query&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 需要处理的文件路径</span></span>
<span class="line"><span style="color:#24292E;">    loaders: [</span><span style="color:#032F62;">&quot;/abs/path/to/loader.js&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// loader文件路径</span></span>
<span class="line"><span style="color:#24292E;">    context: { minimize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// loader上下文，可通过this获取</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">processResource</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">, </span><span style="color:#E36209;">resourcePath</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    readResource: fs.readFile.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(fs)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 处理后的文件内容</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>在执行 runLoaders 过后，会获取到文件最终的内容。上面的例子在执行后，会经过如下的流程。</p><ol><li>按照<code>post -&gt; inline -&gt; normal -&gt; pre</code>顺序， <code>从左到右</code>执行相同类型的<code>loader.pitch</code></li><li>按照<code>pre -&gt; normal -&gt; inline -&gt; post</code>顺序， <code>从右到左</code>执行相同类型的<code>loader</code></li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a162416559644448c6d1438c7967ae0~tplv-k3u1fbpfcp-watermark.image?" alt="未命名文件 (12).png"></p><blockquote><p>pitch 和 normal 执行顺序完全相反，pitch 先执行</p></blockquote><h3 id="pitch-loader" tabindex="-1">pitch loader <a class="header-anchor" href="#pitch-loader" aria-label="Permalink to &quot;pitch loader&quot;">​</a></h3><p>看了上面 loader 执行的过程，大家可能又比较疑惑<code>pitch loader</code>是什么。其实在开发 Loader 时，我们可以在导出的函数上添加一个  <code>pitch</code>  函数，就像下面这样：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;normal-loader1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">remainingRequest</span><span style="color:#6A737D;"> 剩余需要执行的pitch loader</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">precedingRequest</span><span style="color:#6A737D;"> 已经执行过得pitch loader</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">data</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">loader.</span><span style="color:#B392F0;">pitch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">remainingRequest</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">precedingRequest</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(remainingRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(precedingRequest);</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;normal-loader1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> source;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">remainingRequest</span><span style="color:#6A737D;"> 剩余需要执行的pitch loader</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">precedingRequest</span><span style="color:#6A737D;"> 已经执行过得pitch loader</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{*}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">data</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">loader.</span><span style="color:#6F42C1;">pitch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">remainingRequest</span><span style="color:#24292E;">, </span><span style="color:#E36209;">precedingRequest</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(remainingRequest);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(precedingRequest);</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader;</span></span></code></pre></div><p>当文件经过该 loader 处理时，pitch 会先执行，并打印出下面内容</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\code\\pre</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1.js</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\code\\pre</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2.js</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\code\\webpack</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">demo\\src\\test.js  </span><span style="color:#6A737D;">// 剩余需要执行的pitch loader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\code\\post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1.js</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\code\\post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2.js</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">D</span><span style="color:#E1E4E8;">:\\code\\normal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1.js </span><span style="color:#6A737D;">// 已经执行过得pitch loader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{} </span><span style="color:#6A737D;">// 空对象</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\code\\pre</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1.js</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\code\\pre</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2.js</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\code\\webpack</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">demo\\src\\test.js  </span><span style="color:#6A737D;">// 剩余需要执行的pitch loader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\code\\post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1.js</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\code\\post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2.js</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">D</span><span style="color:#24292E;">:\\code\\normal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1.js </span><span style="color:#6A737D;">// 已经执行过得pitch loader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">{} </span><span style="color:#6A737D;">// 空对象</span></span></code></pre></div><p>再测试下一开始的例子，将会打印下面的内容</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// pitch 优先执行了，并且是从post开始</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">normal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">normal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">pre</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">pre</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2 pitch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">pre</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2</span></span>
<span class="line"><span style="color:#E1E4E8;">pre</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1</span></span>
<span class="line"><span style="color:#E1E4E8;">normal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2</span></span>
<span class="line"><span style="color:#E1E4E8;">normal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// pitch 优先执行了，并且是从post开始</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2 pitch</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2 pitch</span></span>
<span class="line"><span style="color:#24292E;">normal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">normal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2 pitch</span></span>
<span class="line"><span style="color:#24292E;">pre</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">pre</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2 pitch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">pre</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2</span></span>
<span class="line"><span style="color:#24292E;">pre</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1</span></span>
<span class="line"><span style="color:#24292E;">normal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2</span></span>
<span class="line"><span style="color:#24292E;">normal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1</span></span></code></pre></div><h3 id="pitch-loader-的熔断机制" tabindex="-1">pitch loader 的熔断机制 <a class="header-anchor" href="#pitch-loader-的熔断机制" aria-label="Permalink to &quot;pitch loader 的熔断机制&quot;">​</a></h3><p>当 pitch 返回一个<code>非空</code>的值时，将会跳过后面<code>pitch loader</code>和<code>normal loader</code>的执行</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;normal-loader1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">loader.</span><span style="color:#B392F0;">pitch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">remainingRequest</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">precedingRequest</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;normal-loader1 pitch&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;let a = 0&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这里返回了非空值</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;normal-loader1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> source;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">loader.</span><span style="color:#6F42C1;">pitch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">remainingRequest</span><span style="color:#24292E;">, </span><span style="color:#E36209;">precedingRequest</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;normal-loader1 pitch&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;let a = 0&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这里返回了非空值</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader;</span></span></code></pre></div><p>我们在<code>normal-loader1</code>的 pitch 函数中返回了非空值测试下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">normal</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1 pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2</span></span>
<span class="line"><span style="color:#E1E4E8;">inline</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader2</span></span>
<span class="line"><span style="color:#E1E4E8;">post</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">loader1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2 pitch</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2 pitch</span></span>
<span class="line"><span style="color:#24292E;">normal</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1 pitch</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2</span></span>
<span class="line"><span style="color:#24292E;">inline</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader2</span></span>
<span class="line"><span style="color:#24292E;">post</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">loader1</span></span></code></pre></div><p>可以看到 loader 只执行到了<code>normal-loader1 pitch</code>, <code>normal-loader1</code>自身的 loader 也不会执行。 并且<code>normal-loader1 pitch</code>的返回值，将作为<code>inline-loader2</code>的<code>source</code>参数（<strong>大家注意下面红色箭头</strong>）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2940e87b4ec247b48816f160cb34c488~tplv-k3u1fbpfcp-watermark.image?" alt="未命名文件 (13).png"></p><h2 id="loader-上下文" tabindex="-1">loader 上下文 <a class="header-anchor" href="#loader-上下文" aria-label="Permalink to &quot;loader 上下文&quot;">​</a></h2><p>我们再回到前面的例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { runLoaders } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;loader-runner&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">runLoaders</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource: </span><span style="color:#9ECBFF;">&quot;/abs/path/to/file.txt?query&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 需要处理的文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaders: [</span><span style="color:#9ECBFF;">&quot;/abs/path/to/loader.js&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// loader文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    context: { minimize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// loader上下文，可通过this获取</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">processResource</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resourcePath</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    readResource: fs.readFile.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(fs)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 处理后的文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { runLoaders } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;loader-runner&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">runLoaders</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    resource: </span><span style="color:#032F62;">&quot;/abs/path/to/file.txt?query&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 需要处理的文件路径</span></span>
<span class="line"><span style="color:#24292E;">    loaders: [</span><span style="color:#032F62;">&quot;/abs/path/to/loader.js&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// loader文件路径</span></span>
<span class="line"><span style="color:#24292E;">    context: { minimize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// loader上下文，可通过this获取</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">processResource</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">, </span><span style="color:#E36209;">resourcePath</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    readResource: fs.readFile.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(fs)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 处理后的文件内容</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>大家会发现有一个<code>context</code>属性，那它是干嘛的呢。下面举个简单的例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, source); </span><span style="color:#6A737D;">// 等同于this.callback</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, source); </span><span style="color:#6A737D;">// 等同于this.callback</span></span>
<span class="line"><span style="color:#24292E;">  }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码，我们通过<code>this</code>调用了<code>async</code>方法，获取一个<code>callback</code>, 这种方式可以让我们在 Loader 中实现<code>异步操作</code>。</p><p>什么是 loader 上下文呢，简单来讲就是<code>this</code>, loader 的 this 上有许多变量和函数，能方便我们获取当前需要处理的文件，或者异步处理文件内容。原理也很简单, 就是通过 apply 来实现</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">loader.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(loaderContext, args);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">loader.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(loaderContext, args);</span></span></code></pre></div><h3 id="loader-runner-自带的上下文属性" tabindex="-1">loader-runner 自带的上下文属性 <a class="header-anchor" href="#loader-runner-自带的上下文属性" aria-label="Permalink to &quot;loader-runner 自带的上下文属性&quot;">​</a></h3><p>其实 loader 上下文的属性可以分为<code>loader-runner内置</code>的上下文属性 和 <code>webpack内置</code>的上下文属性，什么意思呢？<strong>抛开 webpack 这个构建工具，如我们只是单纯使用<code>loader-runner</code>它将包含下面这些上下文属性</strong>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resource; </span><span style="color:#6A737D;">// 需要处理的资源路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.request; </span><span style="color:#6A737D;">// 完整的请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.loaders; </span><span style="color:#6A737D;">// loader对象数组</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.readResource; </span><span style="color:#6A737D;">// 读取资源的方法，默认fs.readFile</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.loaderIndex; </span><span style="color:#6A737D;">// 当前正在执行的loader索引</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.callback; </span><span style="color:#6A737D;">// 回调方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.async; </span><span style="color:#6A737D;">// 异步方法，返回一个回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.remainingRequest; </span><span style="color:#6A737D;">// 剩余请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.currentRequest; </span><span style="color:#6A737D;">// 当前请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, previousRequest; </span><span style="color:#6A737D;">// 已经处理过得请求</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data; </span><span style="color:#6A737D;">// 当前loader的公共数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loader</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resource; </span><span style="color:#6A737D;">// 需要处理的资源路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.request; </span><span style="color:#6A737D;">// 完整的请求</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.loaders; </span><span style="color:#6A737D;">// loader对象数组</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.readResource; </span><span style="color:#6A737D;">// 读取资源的方法，默认fs.readFile</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.loaderIndex; </span><span style="color:#6A737D;">// 当前正在执行的loader索引</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.callback; </span><span style="color:#6A737D;">// 回调方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.async; </span><span style="color:#6A737D;">// 异步方法，返回一个回调函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.remainingRequest; </span><span style="color:#6A737D;">// 剩余请求</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.currentRequest; </span><span style="color:#6A737D;">// 当前请求</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, previousRequest; </span><span style="color:#6A737D;">// 已经处理过得请求</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data; </span><span style="color:#6A737D;">// 当前loader的公共数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> source;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader;</span></span></code></pre></div><h3 id="webpack-的-loader-上下文属性" tabindex="-1">webpack 的 loader 上下文属性 <a class="header-anchor" href="#webpack-的-loader-上下文属性" aria-label="Permalink to &quot;webpack 的 loader 上下文属性&quot;">​</a></h3><p>前面我们知道在执行<code>runLoaders</code>方法时，可以传一个<code>自己的context</code>，最终会和内置的上下文属性合并。我们直接来看下 webpack 的源码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack\\lib\\NormalModule.js</span></span>
<span class="line"><span style="color:#B392F0;">doBuild</span><span style="color:#E1E4E8;">(options, compilation, resolver, fs, callback) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 创建loader上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">createLoaderContext</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolver,</span></span>
<span class="line"><span style="color:#E1E4E8;">    options,</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation,</span></span>
<span class="line"><span style="color:#E1E4E8;">    fs</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 执行Loader</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      resource: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.resource,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaders: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.loaders,</span></span>
<span class="line"><span style="color:#E1E4E8;">      context: loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      readResource: fs.readFile.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(fs)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack\\lib\\NormalModule.js</span></span>
<span class="line"><span style="color:#6F42C1;">doBuild</span><span style="color:#24292E;">(options, compilation, resolver, fs, callback) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 创建loader上下文</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">createLoaderContext</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    resolver,</span></span>
<span class="line"><span style="color:#24292E;">    options,</span></span>
<span class="line"><span style="color:#24292E;">    compilation,</span></span>
<span class="line"><span style="color:#24292E;">    fs</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 执行Loader</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runLoaders</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">      resource: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.resource,</span></span>
<span class="line"><span style="color:#24292E;">      loaders: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.loaders,</span></span>
<span class="line"><span style="color:#24292E;">      context: loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      readResource: fs.readFile.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(fs)</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>loaderContext 源码如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// webpack\\lib\\NormalModule.js</span></span>
<span class="line"><span style="color:#B392F0;">createLoaderContext</span><span style="color:#E1E4E8;">(resolver, options, compilation, fs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ..</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        version: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">emitWarning</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">warning</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">emitError</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// TODO remove in webpack 5</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">exec</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">filename</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">emitFile</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sourceMap</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">assetInfo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        rootContext: options.context,</span></span>
<span class="line"><span style="color:#E1E4E8;">        webpack: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sourceMap: </span><span style="color:#F97583;">!!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.useSourceMap,</span></span>
<span class="line"><span style="color:#E1E4E8;">        mode: options.mode </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;production&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        _module: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        _compilation: compilation,</span></span>
<span class="line"><span style="color:#E1E4E8;">        _compiler: compilation.compiler,</span></span>
<span class="line"><span style="color:#E1E4E8;">        fs: fs</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    compilation.hooks.normalModuleLoader.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(loaderContext, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// webpack\\lib\\NormalModule.js</span></span>
<span class="line"><span style="color:#6F42C1;">createLoaderContext</span><span style="color:#24292E;">(resolver, options, compilation, fs) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ..</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        version: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">emitWarning</span><span style="color:#24292E;">: </span><span style="color:#E36209;">warning</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">emitError</span><span style="color:#24292E;">: </span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">: </span><span style="color:#E36209;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// TODO remove in webpack 5</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">exec</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">filename</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#E36209;">context</span><span style="color:#24292E;">, </span><span style="color:#E36209;">request</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getResolve</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">emitFile</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">, </span><span style="color:#E36209;">content</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sourceMap</span><span style="color:#24292E;">, </span><span style="color:#E36209;">assetInfo</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        rootContext: options.context,</span></span>
<span class="line"><span style="color:#24292E;">        webpack: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        sourceMap: </span><span style="color:#D73A49;">!!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.useSourceMap,</span></span>
<span class="line"><span style="color:#24292E;">        mode: options.mode </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;production&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        _module: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        _compilation: compilation,</span></span>
<span class="line"><span style="color:#24292E;">        _compiler: compilation.compiler,</span></span>
<span class="line"><span style="color:#24292E;">        fs: fs</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">    compilation.hooks.normalModuleLoader.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(loaderContext, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>从上面的代码可以知道<code>normalModuleLoader hook</code>可以方便的获取到 loaderContext, 并且<code>扩展loader功能</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">compiler.hooks.compilation.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;LoaderPlugin&quot;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compilation.hooks.normalModuleLoader.</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;LoaderPlugin&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 扩展loaderContext</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">compiler.hooks.compilation.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;LoaderPlugin&quot;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">compilation</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compilation.hooks.normalModuleLoader.</span><span style="color:#6F42C1;">tap</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;LoaderPlugin&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">, </span><span style="color:#E36209;">module</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 扩展loaderContext</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>另外，关于 webpack 中<code>loaderContext</code>的属性用法，大家感兴趣可以看下</p><p><strong><a href="https://www.webpackjs.com/api/loaders/#loader-%E4%B8%8A%E4%B8%8B%E6%96%87" target="_blank" rel="noreferrer">Webpack 中文文档</a></strong></p><h2 id="实现-loader-runner" tabindex="-1">实现 loader-runner <a class="header-anchor" href="#实现-loader-runner" aria-label="Permalink to &quot;实现 loader-runner&quot;">​</a></h2><p>前面介绍了<code>loader-runner</code>用法，不如趁热打铁实现一波~， 实现起来也是非常简单的, 先来看下整体流程图</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9940abf03e2940b89596cac5bc05b60e~tplv-k3u1fbpfcp-watermark.image?" alt="loader-runner流程图.png"></p><p>在实现之前我们先来回顾下<code>runLoaders</code>用法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { runLoaders } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;loader-runner&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">runLoaders</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource: </span><span style="color:#9ECBFF;">&quot;/abs/path/to/file.txt?query&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 需要处理的文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaders: [</span><span style="color:#9ECBFF;">&quot;/abs/path/to/loader.js&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// loader文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    context: { minimize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// loader上下文，可通过this获取</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">processResource</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resourcePath</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    readResource: fs.readFile.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(fs)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 处理后的文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { runLoaders } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;loader-runner&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">runLoaders</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    resource: </span><span style="color:#032F62;">&quot;/abs/path/to/file.txt?query&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 需要处理的文件路径</span></span>
<span class="line"><span style="color:#24292E;">    loaders: [</span><span style="color:#032F62;">&quot;/abs/path/to/loader.js&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// loader文件路径</span></span>
<span class="line"><span style="color:#24292E;">    context: { minimize: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }, </span><span style="color:#6A737D;">// loader上下文，可通过this获取</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">processResource</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">, </span><span style="color:#E36209;">resourcePath</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">    readResource: fs.readFile.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(fs)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 处理后的文件内容</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="_1-初始化-loadercontext" tabindex="-1">1. 初始化 loaderContext <a class="header-anchor" href="#_1-初始化-loadercontext" aria-label="Permalink to &quot;1. 初始化 loaderContext&quot;">​</a></h3><p>先来实现初始化逻辑</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createLoaderObject</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取loader函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> normal </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(loader);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取pitch函数</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pitch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> normal.pitch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果为true loader接收的是Buffer，否则是字符串</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> raw </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> normal.raw;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: loader,</span></span>
<span class="line"><span style="color:#E1E4E8;">    normal,</span></span>
<span class="line"><span style="color:#E1E4E8;">    pitch,</span></span>
<span class="line"><span style="color:#E1E4E8;">    raw,</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: {}, </span><span style="color:#6A737D;">// 每个loader可以携带一个自定义的数据对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    pitchExecuted: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// pitch是否执行</span></span>
<span class="line"><span style="color:#E1E4E8;">    normalExecuted: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// normal是否执行</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runLoaders</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">finalCallback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">resource</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 资源路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">loaders</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [], </span><span style="color:#6A737D;">// loader配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, </span><span style="color:#6A737D;">// 上下文对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">readResource</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.readFile,</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderObjects</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaders.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(createLoaderObject);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> context;</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.resource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resource;</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.loaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderObjects;</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.readResource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> readResource;</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.loaderIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 当前正在执行的Loader索引</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 调用它会执行下一个loader</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.callback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 默认Loader是同步的</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.async </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义request getter</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(loaderContext, </span><span style="color:#9ECBFF;">&quot;request&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// loader1!loader2!loader3!./a.js</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> loader.path)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义remainingRequest getter</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(loaderContext, </span><span style="color:#9ECBFF;">&quot;remainingRequest&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(loaderContext.loaderIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> loader.path)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义currentRequest getter</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(loaderContext, </span><span style="color:#9ECBFF;">&quot;currentRequest&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(loaderContext.loaderIndex)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> loader.path)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义previousRequest getter</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(loaderContext, </span><span style="color:#9ECBFF;">&quot;previousRequest&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, loaderContext.loaderIndex)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> loader.path)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">concat</span><span style="color:#E1E4E8;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 定义data getter</span></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(loaderContext, </span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext.loaders[loaderContext.loaderIndex];</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> processOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    resourceBuffer: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 本次要读取的资源文件Buffer</span></span>
<span class="line"><span style="color:#E1E4E8;">    readResource,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 迭代执行pitch</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">iteratePitchingLoader</span><span style="color:#E1E4E8;">(processOptions, loaderContext, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 最终的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    finalCallback </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">finalCallback</span><span style="color:#E1E4E8;">(err, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        result,</span></span>
<span class="line"><span style="color:#E1E4E8;">        resourceBuffer: processOptions.resourceBuffer,</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.runLoaders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runLoaders;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createLoaderObject</span><span style="color:#24292E;">(</span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取loader函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> normal </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(loader);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取pitch函数</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pitch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> normal.pitch;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果为true loader接收的是Buffer，否则是字符串</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> raw </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> normal.raw;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    path: loader,</span></span>
<span class="line"><span style="color:#24292E;">    normal,</span></span>
<span class="line"><span style="color:#24292E;">    pitch,</span></span>
<span class="line"><span style="color:#24292E;">    raw,</span></span>
<span class="line"><span style="color:#24292E;">    data: {}, </span><span style="color:#6A737D;">// 每个loader可以携带一个自定义的数据对象</span></span>
<span class="line"><span style="color:#24292E;">    pitchExecuted: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// pitch是否执行</span></span>
<span class="line"><span style="color:#24292E;">    normalExecuted: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// normal是否执行</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runLoaders</span><span style="color:#24292E;">(</span><span style="color:#E36209;">options</span><span style="color:#24292E;">, </span><span style="color:#E36209;">finalCallback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">resource</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 资源路径</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">loaders</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [], </span><span style="color:#6A737D;">// loader配置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, </span><span style="color:#6A737D;">// 上下文对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">readResource</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.readFile,</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> options;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderObjects</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaders.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(createLoaderObject);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loaderContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> context;</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.resource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resource;</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.loaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaderObjects;</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.readResource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> readResource;</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.loaderIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 当前正在执行的Loader索引</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 调用它会执行下一个loader</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.callback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 默认Loader是同步的</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.async </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义request getter</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(loaderContext, </span><span style="color:#032F62;">&quot;request&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// loader1!loader2!loader3!./a.js</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> loader.path)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义remainingRequest getter</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(loaderContext, </span><span style="color:#032F62;">&quot;remainingRequest&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(loaderContext.loaderIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> loader.path)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义currentRequest getter</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(loaderContext, </span><span style="color:#032F62;">&quot;currentRequest&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(loaderContext.loaderIndex)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> loader.path)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义previousRequest getter</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(loaderContext, </span><span style="color:#032F62;">&quot;previousRequest&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext.loaders</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, loaderContext.loaderIndex)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> loader.path)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">concat</span><span style="color:#24292E;">(loaderContext.resource)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 定义data getter</span></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(loaderContext, </span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext.loaders[loaderContext.loaderIndex];</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> processOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    resourceBuffer: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 本次要读取的资源文件Buffer</span></span>
<span class="line"><span style="color:#24292E;">    readResource,</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 迭代执行pitch</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">iteratePitchingLoader</span><span style="color:#24292E;">(processOptions, loaderContext, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 最终的回调</span></span>
<span class="line"><span style="color:#24292E;">    finalCallback </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">finalCallback</span><span style="color:#24292E;">(err, {</span></span>
<span class="line"><span style="color:#24292E;">        result,</span></span>
<span class="line"><span style="color:#24292E;">        resourceBuffer: processOptions.resourceBuffer,</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.runLoaders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runLoaders;</span></span></code></pre></div><p>上面的代码中，主要做了这么几件事</p><ul><li>为每个 loader 创建 loader 对象</li><li>基于传入的<code>context</code>，再初始化一些内置上下文</li><li>定义一些<code>request</code>的<code>getter</code>，因为这样才能根据<code>loaderIndex</code>实时获取到当前<code>正在执行loader</code>的 request 信息</li><li>迭代 pitch</li></ul><p>下面我们详细看下<code>iteratePitchingLoader</code>的实现</p><h3 id="_2-iteratepitchingloader" tabindex="-1">2. iteratePitchingLoader <a class="header-anchor" href="#_2-iteratepitchingloader" aria-label="Permalink to &quot;2. iteratePitchingLoader&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iteratePitchingLoader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">processOptions</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 从左向右执行，越界了，就可以读取文件了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loaderContext.loaderIndex </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> loaderContext.loaders.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processResource</span><span style="color:#E1E4E8;">(processOptions, loaderContext, pitchingCallback);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取当前要执行的loader</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> currentLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderContext.loaders[loaderContext.loaderIndex];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 没有pitch的情况会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentLoader.pitchExecuted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaderContext.loaderIndex</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iteratePitchingLoader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentLoader.pitch;</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentLoader.pitchExecuted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 没有pitch的情况会执行</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">fn) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iteratePitchingLoader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runSyncOrAsync</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    fn,</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext.remainingRequest,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext.previousRequest,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext.data,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// pitch返回值不为空 跳过后续loader， 掉头执行前一个Loader的normal</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (args.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> args.</span><span style="color:#B392F0;">some</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> e)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        loaderContext.loaderIndex</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">iterateNormalLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">          loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">          args,</span></span>
<span class="line"><span style="color:#E1E4E8;">          pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iteratePitchingLoader</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">          loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">          pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iteratePitchingLoader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">processOptions</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 从左向右执行，越界了，就可以读取文件了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loaderContext.loaderIndex </span><span style="color:#D73A49;">&gt;=</span><span style="color:#24292E;"> loaderContext.loaders.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processResource</span><span style="color:#24292E;">(processOptions, loaderContext, pitchingCallback);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取当前要执行的loader</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> currentLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaderContext.loaders[loaderContext.loaderIndex];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 没有pitch的情况会执行</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentLoader.pitchExecuted) {</span></span>
<span class="line"><span style="color:#24292E;">    loaderContext.loaderIndex</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iteratePitchingLoader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      processOptions,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentLoader.pitch;</span></span>
<span class="line"><span style="color:#24292E;">  currentLoader.pitchExecuted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 没有pitch的情况会执行</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">fn) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iteratePitchingLoader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      processOptions,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runSyncOrAsync</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    fn,</span></span>
<span class="line"><span style="color:#24292E;">    loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext.remainingRequest,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext.previousRequest,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext.data,</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// pitch返回值不为空 跳过后续loader， 掉头执行前一个Loader的normal</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (args.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> args.</span><span style="color:#6F42C1;">some</span><span style="color:#24292E;">((</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> e)) {</span></span>
<span class="line"><span style="color:#24292E;">        loaderContext.loaderIndex</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">iterateNormalLoaders</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          processOptions,</span></span>
<span class="line"><span style="color:#24292E;">          loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">          args,</span></span>
<span class="line"><span style="color:#24292E;">          pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iteratePitchingLoader</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">          processOptions,</span></span>
<span class="line"><span style="color:#24292E;">          loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">          pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上面的代码主要做了这几件事</p><ul><li>从左向右执行，判断是否越界了，超过就代表就可以读取文件了（调用<code>processResource</code>方法），同时也代表<code>pitch</code>都<code>没有返回值</code></li><li>没有 pitch 的情况, 继续向后迭代，并使<code>loaderIndex++</code></li><li>存在<code>pitch</code>, 就调用<code>runSyncOrAsync</code></li></ul><h3 id="_3-runsyncorasync" tabindex="-1">3. runSyncOrAsync <a class="header-anchor" href="#_3-runsyncorasync" aria-label="Permalink to &quot;3. runSyncOrAsync&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runSyncOrAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">runCallback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isSync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">runCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  loaderContext.</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    isSync </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> loaderContext.callback;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(loaderContext, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isSync) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">runCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runSyncOrAsync</span><span style="color:#24292E;">(</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#24292E;">, </span><span style="color:#E36209;">runCallback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> isSync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  loaderContext.</span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">runCallback</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args);</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  loaderContext.</span><span style="color:#6F42C1;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    isSync </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> loaderContext.callback;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(loaderContext, args);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (isSync) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">runCallback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, result);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>runSyncOrAsync</code>实现比较简单，只是在<code>loaderContext</code>上挂载了一些回调方法。其实最后执行的都是<code>loaderContext.callback</code>。 在执行完上面的内容后，会通过<code>runCallback</code>拿到返回结果，并判断结果是否为空，如果为空就继续迭代。否则就开始迭代<code>normal loader</code></p><h3 id="_4-iteratenormalloaders" tabindex="-1">4. iterateNormalLoaders <a class="header-anchor" href="#_4-iteratenormalloaders" aria-label="Permalink to &quot;4. iterateNormalLoaders&quot;">​</a></h3><p>看完上面 iteratePitchingLoader 的实现后，其实大家也能猜到这个方法的实现了，其实就是反过来迭代了。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">convertArgs</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">raw</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (raw </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Buffer.</span><span style="color:#B392F0;">isBuffer</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">raw </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Buffer.</span><span style="color:#B392F0;">isBuffer</span><span style="color:#E1E4E8;">(args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iterateNormalLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">processOptions</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果超出左边边界，就调用结束回调</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loaderContext.loaderIndex </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pitchingCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 获取当前loader</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> currentLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderContext.loaders[loaderContext.loaderIndex];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (currentLoader.normalExecuted) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaderContext.loaderIndex</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iterateNormalLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      args,</span></span>
<span class="line"><span style="color:#E1E4E8;">      pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> normalFn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentLoader.normal;</span></span>
<span class="line"><span style="color:#E1E4E8;">  currentLoader.normalExecuted </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">convertArgs</span><span style="color:#E1E4E8;">(args, currentLoader.raw);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 执行normal loader</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">runSyncOrAsync</span><span style="color:#E1E4E8;">(normalFn, loaderContext, args, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">returnArgs</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iterateNormalLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      returnArgs,</span></span>
<span class="line"><span style="color:#E1E4E8;">      pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">processResource</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">processOptions</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">loaderContext</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">pitchingCallback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 调用readResource 读取文件内容，读取完成后，拿到文件内容向左迭代</span></span>
<span class="line"><span style="color:#E1E4E8;">  processOptions.</span><span style="color:#B392F0;">readResource</span><span style="color:#E1E4E8;">(loaderContext.resource, (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resourceBuffer</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    processOptions.resourceBuffer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> resourceBuffer;</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaderContext.loaderIndex</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 迭代执行normal loader</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">iterateNormalLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      processOptions,</span></span>
<span class="line"><span style="color:#E1E4E8;">      loaderContext,</span></span>
<span class="line"><span style="color:#E1E4E8;">      [resourceBuffer],</span></span>
<span class="line"><span style="color:#E1E4E8;">      pitchingCallback</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">convertArgs</span><span style="color:#24292E;">(</span><span style="color:#E36209;">args</span><span style="color:#24292E;">, </span><span style="color:#E36209;">raw</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (raw </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">Buffer.</span><span style="color:#6F42C1;">isBuffer</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])) {</span></span>
<span class="line"><span style="color:#24292E;">    args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">raw </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Buffer.</span><span style="color:#6F42C1;">isBuffer</span><span style="color:#24292E;">(args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])) {</span></span>
<span class="line"><span style="color:#24292E;">    args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> args[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iterateNormalLoaders</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">processOptions</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">args</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果超出左边边界，就调用结束回调</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loaderContext.loaderIndex </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pitchingCallback</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 获取当前loader</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> currentLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loaderContext.loaders[loaderContext.loaderIndex];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (currentLoader.normalExecuted) {</span></span>
<span class="line"><span style="color:#24292E;">    loaderContext.loaderIndex</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iterateNormalLoaders</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      processOptions,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      args,</span></span>
<span class="line"><span style="color:#24292E;">      pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> normalFn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentLoader.normal;</span></span>
<span class="line"><span style="color:#24292E;">  currentLoader.normalExecuted </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">convertArgs</span><span style="color:#24292E;">(args, currentLoader.raw);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 执行normal loader</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">runSyncOrAsync</span><span style="color:#24292E;">(normalFn, loaderContext, args, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">returnArgs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iterateNormalLoaders</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      processOptions,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      returnArgs,</span></span>
<span class="line"><span style="color:#24292E;">      pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">processResource</span><span style="color:#24292E;">(</span><span style="color:#E36209;">processOptions</span><span style="color:#24292E;">, </span><span style="color:#E36209;">loaderContext</span><span style="color:#24292E;">, </span><span style="color:#E36209;">pitchingCallback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 调用readResource 读取文件内容，读取完成后，拿到文件内容向左迭代</span></span>
<span class="line"><span style="color:#24292E;">  processOptions.</span><span style="color:#6F42C1;">readResource</span><span style="color:#24292E;">(loaderContext.resource, (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">, </span><span style="color:#E36209;">resourceBuffer</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    processOptions.resourceBuffer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> resourceBuffer;</span></span>
<span class="line"><span style="color:#24292E;">    loaderContext.loaderIndex</span><span style="color:#D73A49;">--</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 迭代执行normal loader</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">iterateNormalLoaders</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      processOptions,</span></span>
<span class="line"><span style="color:#24292E;">      loaderContext,</span></span>
<span class="line"><span style="color:#24292E;">      [resourceBuffer],</span></span>
<span class="line"><span style="color:#24292E;">      pitchingCallback</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>以上就是<code>loader-runner</code>的执行过程，是不是非常简单~，源码已放入<a href="https://github.com/fyhhub/loader-runner" target="_blank" rel="noreferrer">github</a></p><h2 id="预告" tabindex="-1">预告 <a class="header-anchor" href="#预告" aria-label="Permalink to &quot;预告&quot;">​</a></h2><p>下一篇我将基于本文内容，分析一下<strong>vue-loader</strong>源码，大家敬请期待</p>`,94),e=[o];function c(r,t,E,y,i,d){return n(),a("div",null,e)}const A=s(p,[["render",c]]);export{u as __pageData,A as default};
