import{_ as e,o,c as a,Q as n}from"./chunks/framework.3d945e71.js";const k=JSON.parse('{"title":"Webpack 的 Tree-Shaking 原理","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/webpack/Webpack原理/Webpack的Tree-Shaking原理.md","filePath":"frontend-engineering/webpack/Webpack原理/Webpack的Tree-Shaking原理.md","lastUpdated":1697009812000}'),t={name:"frontend-engineering/webpack/Webpack原理/Webpack的Tree-Shaking原理.md"},i=n('<h1 id="webpack-的-tree-shaking-原理" tabindex="-1">Webpack 的 Tree-Shaking 原理 <a class="header-anchor" href="#webpack-的-tree-shaking-原理" aria-label="Permalink to &quot;Webpack 的 Tree-Shaking 原理&quot;">​</a></h1><h2 id="一、flagdependencyexportsplugin" tabindex="-1">一、FlagDependencyExportsPlugin <a class="header-anchor" href="#一、flagdependencyexportsplugin" aria-label="Permalink to &quot;一、FlagDependencyExportsPlugin&quot;">​</a></h2><p>finish 阶段触发 finishModules Hook</p><ol><li>遍历模块树</li><li>遍历模块下所有的<code>HarmonyExportXXXDependency 依赖</code>，并记录到 <code>exportsSpecsFromDependencies</code> 的 Map 对象(module =&gt; export deps)中</li><li>遍历所有 export dep，调用<code>ExportsInfo</code>对象（注意这里是 Exports）上的<code>getExportInfo</code>方法, 并创建<code>ExportInfo</code>对象, 建立<code>exportsInfo</code>和<code>exportInfo</code>的相互关系。</li><li>以上动作完成后，moduleGraph 上每个模块的 exports 都包含其导出信息</li></ol><h2 id="二、flagdependencyusageplugin" tabindex="-1">二、FlagDependencyUsagePlugin <a class="header-anchor" href="#二、flagdependencyusageplugin" aria-label="Permalink to &quot;二、FlagDependencyUsagePlugin&quot;">​</a></h2><p>seal 阶段触发 optimizeDependencies Hook</p><ol><li>从入口模块遍历模块树</li><li>获取模块的<code>exportsInfo</code>对象，遍历其内部的<code>exportInfo</code>对象</li><li><code>setUsedConditionally</code> 方法在<code>_usedInRuntime</code>中记录 export 是如何被使用, 最终存储在 exportInfo._usedInRuntime</li></ol><h2 id="三、生成模板阶段" tabindex="-1">三、生成模板阶段 <a class="header-anchor" href="#三、生成模板阶段" aria-label="Permalink to &quot;三、生成模板阶段&quot;">​</a></h2><p>HarmonyExportSpecifierDependency.Template 在模板生成时，会根据导出是否使用，创建不同的<code>HarmonyExportInitFragment</code></p><ol><li>获取 used（导出变量名是否被使用）</li><li>根据模块是否使用的情况，分别创建<code>HarmonyExportInitFragment</code>对象，保存到<code>initFragments</code>中</li><li>在模板渲染时，遍历 initFragment，生成代码</li></ol><h2 id="四、删除无用代码" tabindex="-1">四、删除无用代码 <a class="header-anchor" href="#四、删除无用代码" aria-label="Permalink to &quot;四、删除无用代码&quot;">​</a></h2><p>最终未被使用的代码，将不会被<code>__webpack_exports__</code>导出，并被<code>Terser</code>去除</p>',12),r=[i];function c(d,p,l,s,h,g){return o(),a("div",null,r)}const u=e(t,[["render",c]]);export{k as __pageData,u as default};
