import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.3d945e71.js";const F=JSON.parse('{"title":"webpack 动态加载原理","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/webpack/Webpack原理/webpack动态加载原理.md","filePath":"frontend-engineering/webpack/Webpack原理/webpack动态加载原理.md","lastUpdated":1700358838000}'),p={name:"frontend-engineering/webpack/Webpack原理/webpack动态加载原理.md"},o=l(`<h1 id="webpack-动态加载原理" tabindex="-1">webpack 动态加载原理 <a class="header-anchor" href="#webpack-动态加载原理" aria-label="Permalink to &quot;webpack 动态加载原理&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在 vue 中我们经常用到动态导入页面组件，那么它是如何实现的呢，本文将通过简单的案例，快速了解实现原理</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./test&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fn.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./test&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fn.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// test.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>打包后的代码包含两个文件 <code>bundle.js</code> 和 <code>0.js</code></p><h2 id="_1-模块加载" tabindex="-1">1. 模块加载 <a class="header-anchor" href="#_1-模块加载" aria-label="Permalink to &quot;1. 模块加载&quot;">​</a></h2><p>webpack 通过<code>__webpack_require__</code>加载模块代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">moduleId</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果模块已经加载，直接返回模块导出</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(installedModules[moduleId]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> installedModules[moduleId].exports;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 模块导出和模块信息</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> module </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedModules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		i: moduleId,</span></span>
<span class="line"><span style="color:#E1E4E8;">		l: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		exports: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 执行模块代码</span></span>
<span class="line"><span style="color:#E1E4E8;">	modules[moduleId].</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, __webpack_require__)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.l </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 标记模块已经加载完成</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">__webpack_require__</span><span style="color:#24292E;">(</span><span style="color:#E36209;">moduleId</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果模块已经加载，直接返回模块导出</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(installedModules[moduleId]) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> installedModules[moduleId].exports;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 模块导出和模块信息</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> module </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedModules[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		i: moduleId,</span></span>
<span class="line"><span style="color:#24292E;">		l: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		exports: {}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 执行模块代码</span></span>
<span class="line"><span style="color:#24292E;">	modules[moduleId].</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, __webpack_require__)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.l </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 标记模块已经加载完成</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">__webpack_require__</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;index.js&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">__webpack_require__</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;index.js&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>然后执行<code>index.js</code>编译后的代码，如下。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span></span>
<span class="line"><span style="color:#E1E4E8;">    __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  __webpack_require__.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;./src/test.js&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fn.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  [</span></span>
<span class="line"><span style="color:#24292E;">    __webpack_require__.</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  __webpack_require__.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;./src/test.js&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fn.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div><h2 id="_2-jsonp-动态加载-script" tabindex="-1">2. jsonp 动态加载 script <a class="header-anchor" href="#_2-jsonp-动态加载-script" aria-label="Permalink to &quot;2. jsonp 动态加载 script&quot;">​</a></h2><p>先一步步来，看下<code>__webpack_require__.e</code>这个方法，它是最先调用的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">__webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requireEnsure</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunkId</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promises </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> installedChunkData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果这个chunk已经加载过了 就不需要加载了</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (installedChunkData </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 0 means &quot;already installed&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (installedChunkData) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      promises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunkData[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 为这个chunk创建一个promise</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> promise </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 记录这个chunk对应promise的resolve和reject方法</span></span>
<span class="line"><span style="color:#E1E4E8;">        installedChunkData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [resolve, reject];</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// promises数组里添加这个chunk对应的promise</span></span>
<span class="line"><span style="color:#E1E4E8;">      promises.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">((installedChunkData[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> promise));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// ============== 动态创建script =================</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#E1E4E8;">      script.charset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;utf-8&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      script.timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">120</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (__webpack_require__.nc) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        script.</span><span style="color:#B392F0;">setAttribute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nonce&quot;</span><span style="color:#E1E4E8;">, __webpack_require__.nc);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      script.src </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jsonpScriptSrc</span><span style="color:#E1E4E8;">(chunkId);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// create error before stack unwound to get useful stacktrace later</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> error </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// =================================================</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">onScriptComplete</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// avoid mem leaks in IE.</span></span>
<span class="line"><span style="color:#E1E4E8;">        script.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">clearTimeout</span><span style="color:#E1E4E8;">(timeout);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunk </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> installedChunks[chunkId];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (chunk) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> errorType </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">              event </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (event.type </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;load&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;missing&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> event.type);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> realSrc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.target </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> event.target.src;</span></span>
<span class="line"><span style="color:#E1E4E8;">            error.message </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;Loading chunk &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              chunkId </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot; failed.</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">(&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              errorType </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              realSrc </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            error.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ChunkLoadError&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            error.type </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errorType;</span></span>
<span class="line"><span style="color:#E1E4E8;">            error.request </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> realSrc;</span></span>
<span class="line"><span style="color:#E1E4E8;">            chunk[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">](error);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">          installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onScriptComplete</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&quot;timeout&quot;</span><span style="color:#E1E4E8;">, target: script });</span></span>
<span class="line"><span style="color:#E1E4E8;">      }, </span><span style="color:#79B8FF;">120000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      script.onerror </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> script.onload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#E1E4E8;">      document.head.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(promises);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">__webpack_require__.</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requireEnsure</span><span style="color:#24292E;">(</span><span style="color:#E36209;">chunkId</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> promises </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> installedChunkData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedChunks[chunkId];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果这个chunk已经加载过了 就不需要加载了</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (installedChunkData </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 0 means &quot;already installed&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (installedChunkData) {</span></span>
<span class="line"><span style="color:#24292E;">      promises.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(installedChunkData[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 为这个chunk创建一个promise</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> promise </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 记录这个chunk对应promise的resolve和reject方法</span></span>
<span class="line"><span style="color:#24292E;">        installedChunkData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [resolve, reject];</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// promises数组里添加这个chunk对应的promise</span></span>
<span class="line"><span style="color:#24292E;">      promises.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">((installedChunkData[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> promise));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// ============== 动态创建script =================</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#24292E;">      script.charset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;utf-8&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      script.timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">120</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (__webpack_require__.nc) {</span></span>
<span class="line"><span style="color:#24292E;">        script.</span><span style="color:#6F42C1;">setAttribute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nonce&quot;</span><span style="color:#24292E;">, __webpack_require__.nc);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      script.src </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jsonpScriptSrc</span><span style="color:#24292E;">(chunkId);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// create error before stack unwound to get useful stacktrace later</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> error </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// =================================================</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">onScriptComplete</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// avoid mem leaks in IE.</span></span>
<span class="line"><span style="color:#24292E;">        script.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> script.onload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timeout);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> chunk </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> installedChunks[chunkId];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chunk </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (chunk) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> errorType </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">              event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (event.type </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;load&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;missing&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> event.type);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> realSrc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.target </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> event.target.src;</span></span>
<span class="line"><span style="color:#24292E;">            error.message </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;Loading chunk &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              chunkId </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot; failed.</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">(&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              errorType </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              realSrc </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#032F62;">&quot;)&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            error.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ChunkLoadError&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            error.type </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errorType;</span></span>
<span class="line"><span style="color:#24292E;">            error.request </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> realSrc;</span></span>
<span class="line"><span style="color:#24292E;">            chunk[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">](error);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">          installedChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      };</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">onScriptComplete</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&quot;timeout&quot;</span><span style="color:#24292E;">, target: script });</span></span>
<span class="line"><span style="color:#24292E;">      }, </span><span style="color:#005CC5;">120000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      script.onerror </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> script.onload </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> onScriptComplete;</span></span>
<span class="line"><span style="color:#24292E;">      document.head.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(promises);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>总结一下，上述代码做的事情</p><ul><li>如果 chunk 没有被加载过，会为这个 chunk<code>创建一个promise对象</code></li><li>将 promise 对象存在<code>promises数组</code>中</li><li>将 promise 的<code>resolve 和 reject</code>存在<code>installedChunks[chunkId]</code>中</li></ul><h2 id="_3-执行异步脚本" tabindex="-1">3. 执行异步脚本 <a class="header-anchor" href="#_3-执行异步脚本" aria-label="Permalink to &quot;3. 执行异步脚本&quot;">​</a></h2><p>经过上面的过程，会动态加载<code>0.js</code>的脚本代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;./src/test.js&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">__webpack_exports__</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#FFAB70;">__webpack_require__</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;use strict&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">eval</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;__webpack_require__.r(__webpack_exports__);</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;default&quot;, function() { return func; });</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">function func() {</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">  return 1;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n\\n</span><span style="color:#9ECBFF;">//# sourceURL=webpack:///./src/test.js?&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/***/</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(window[</span><span style="color:#032F62;">&quot;webpackJsonp&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window[</span><span style="color:#032F62;">&quot;webpackJsonp&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;./src/test.js&quot;</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">module</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">__webpack_exports__</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#E36209;">__webpack_require__</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;use strict&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">eval</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;__webpack_require__.r(__webpack_exports__);</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;default&quot;, function() { return func; });</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">function func() {</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">  return 1;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n\\n</span><span style="color:#032F62;">//# sourceURL=webpack:///./src/test.js?&#39;</span></span>
<span class="line"><span style="color:#24292E;">      );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/***/</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span></code></pre></div><p>可以看到 window 上有一个<code>webpackJsonp</code>数组，那么这个东西是从哪里来的呢？，我们来看下面的代码。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> jsonpArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> oldJsonpFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonpArray.push.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(jsonpArray);</span></span>
<span class="line"><span style="color:#E1E4E8;">jsonpArray.push </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> webpackJsonpCallback;</span></span>
<span class="line"><span style="color:#E1E4E8;">jsonpArray </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jsonpArray.</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> jsonpArray.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(jsonpArray[i]);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> parentJsonpFunction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldJsonpFunction;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> jsonpArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (window[</span><span style="color:#032F62;">&quot;webpackJsonp&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window[</span><span style="color:#032F62;">&quot;webpackJsonp&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> oldJsonpFunction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jsonpArray.push.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(jsonpArray);</span></span>
<span class="line"><span style="color:#24292E;">jsonpArray.push </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> webpackJsonpCallback;</span></span>
<span class="line"><span style="color:#24292E;">jsonpArray </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jsonpArray.</span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> jsonpArray.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) </span><span style="color:#6F42C1;">webpackJsonpCallback</span><span style="color:#24292E;">(jsonpArray[i]);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> parentJsonpFunction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> oldJsonpFunction;</span></span></code></pre></div><p>其实一开始初始化时已经覆盖实现了<code>webpackJsonp.push</code>方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window[</span><span style="color:#9ECBFF;">&quot;webpackJsonp&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> []).</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// test.js引入的模块代码</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等价于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">([[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">],{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// test.js引入的模块代码</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(window[</span><span style="color:#032F62;">&quot;webpackJsonp&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window[</span><span style="color:#032F62;">&quot;webpackJsonp&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> []).</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">([[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// test.js引入的模块代码</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 等价于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">webpackJsonpCallback</span><span style="color:#24292E;">([[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">],{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// test.js引入的模块代码</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>下面再看看<code>webpackJsonpCallback</code>代码的实现</p><h2 id="_4-webpackjsonpcallback" tabindex="-1">4. webpackJsonpCallback <a class="header-anchor" href="#_4-webpackjsonpcallback" aria-label="Permalink to &quot;4. webpackJsonpCallback&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">webpackJsonpCallback</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// chunkid</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> chunkIds </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// chunkid对应的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moreModules </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> moduleId,</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkId,</span></span>
<span class="line"><span style="color:#E1E4E8;">    i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolves </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> chunkIds.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunkId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chunkIds[i];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(installedChunks, chunkId) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">      installedChunks[chunkId]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 收集chunk对应的resolve方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      resolves.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(installedChunks[chunkId][</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 标记该chunk已经加载</span></span>
<span class="line"><span style="color:#E1E4E8;">    installedChunks[chunkId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (moduleId </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> moreModules) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.hasOwnProperty.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(moreModules, moduleId)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 添加chunk模块，到全局modules对象中</span></span>
<span class="line"><span style="color:#E1E4E8;">      modules[moduleId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> moreModules[moduleId];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (parentJsonpFunction) </span><span style="color:#B392F0;">parentJsonpFunction</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 依次执行chunk对应promise的resolve方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (resolves.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolves.</span><span style="color:#B392F0;">shift</span><span style="color:#E1E4E8;">()();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// bundle.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">webpackJsonpCallback</span><span style="color:#24292E;">(</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// chunkid</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> chunkIds </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// chunkid对应的模块</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moreModules </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> moduleId,</span></span>
<span class="line"><span style="color:#24292E;">    chunkId,</span></span>
<span class="line"><span style="color:#24292E;">    i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    resolves </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> chunkIds.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    chunkId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chunkIds[i];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(installedChunks, chunkId) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">      installedChunks[chunkId]</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 收集chunk对应的resolve方法</span></span>
<span class="line"><span style="color:#24292E;">      resolves.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(installedChunks[chunkId][</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 标记该chunk已经加载</span></span>
<span class="line"><span style="color:#24292E;">    installedChunks[chunkId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (moduleId </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> moreModules) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Object</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.hasOwnProperty.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(moreModules, moduleId)) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 添加chunk模块，到全局modules对象中</span></span>
<span class="line"><span style="color:#24292E;">      modules[moduleId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> moreModules[moduleId];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (parentJsonpFunction) </span><span style="color:#6F42C1;">parentJsonpFunction</span><span style="color:#24292E;">(data);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 依次执行chunk对应promise的resolve方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (resolves.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    resolves.</span><span style="color:#6F42C1;">shift</span><span style="color:#24292E;">()();</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>还是总结一下上面代码的过程</p><ul><li>收集 chunk 对应的 resolve 方法, 前面执行<code>__webpack_require__.e</code>时放在了<code>installedChunks[chunkId]</code>里</li><li>将异步 chunk 下的所有模块 添加到 全局 modules</li><li>依次执行 chunk 对应 promise 的 resolve 方法</li></ul><h2 id="_5-执行异步模块代码" tabindex="-1">5. 执行异步模块代码 <a class="header-anchor" href="#_5-执行异步模块代码" aria-label="Permalink to &quot;5. 执行异步模块代码&quot;">​</a></h2><p>回到一开始<code>index.js</code>的代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span></span>
<span class="line"><span style="color:#E1E4E8;">    __webpack_require__.</span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  __webpack_require__.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;./src/test.js&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fn.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  [</span></span>
<span class="line"><span style="color:#24292E;">    __webpack_require__.</span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  __webpack_require__.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;./src/test.js&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fn.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}));</span></span></code></pre></div><p>经过上面的步骤，此时 promise 已经 resolve 了，<code>__webpack_require__.bind(null, &quot;./src/test.js&quot;)</code> 会被执行， 此时异步模块的代码已经在<code>modules</code>上了，所以可以直接加载。</p><p>最后，执行 fn 方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fn.</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fn.</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">());</span></span></code></pre></div><h2 id="流程图" tabindex="-1">流程图 <a class="header-anchor" href="#流程图" aria-label="Permalink to &quot;流程图&quot;">​</a></h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ef4ee3b49a8473a870421ed1201b98e~tplv-k3u1fbpfcp-watermark.image?" alt="webpack动态加载流程 (1).png"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>webpack 动态 import 的实现还是比较简单的，具体细节大家可以自己翻阅下打包后的代码~</p>`,40),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const h=s(p,[["render",c]]);export{F as __pageData,h as default};
