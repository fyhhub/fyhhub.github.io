import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.3d945e71.js";const A=JSON.parse('{"title":"线程同步：Atomic 原子类型与内存顺序","description":"","frontmatter":{},"headers":[],"relativePath":"rust-learn/5.多线程/4.线程同步：Atomic 原子类型与内存顺序.md","filePath":"rust-learn/5.多线程/4.线程同步：Atomic 原子类型与内存顺序.md","lastUpdated":1712884440000}'),p={name:"rust-learn/5.多线程/4.线程同步：Atomic 原子类型与内存顺序.md"},o=l(`<h1 id="线程同步-atomic-原子类型与内存顺序" tabindex="-1">线程同步：Atomic 原子类型与内存顺序 <a class="header-anchor" href="#线程同步-atomic-原子类型与内存顺序" aria-label="Permalink to &quot;线程同步：Atomic 原子类型与内存顺序&quot;">​</a></h1><p><code>Mutex</code>用起来简单，但是无法并发读，<code>RwLock</code>可以并发读，但是使用场景较为受限且性能不够，那么有没有一种全能性选手呢？ 那就是<code>Atomic</code></p><p><strong>从 Rust1.34 版本后，就正式支持原子类型。原子指的是一系列不可被 CPU 上下文交换的机器指令，这些指令组合在一起就形成了原子操作。在多核 CPU 下，当某个 CPU 核心开始运行原子操作时，会先暂停其它 CPU 内核对内存的操作，以保证原子操作不会被其它 CPU 内核所干扰。</strong></p><p><strong>由于原子操作是通过指令提供的支持，因此它的性能相比锁和消息传递会好很多。相比较于锁而言，原子类型不需要开发者处理加锁和释放锁的问题，同时支持修改，读取等操作，还具备较高的并发性能，几乎所有的语言都支持原子类型。</strong></p><p>可以看出原子类型是无锁类型，但是无锁不代表无需等待，因为原子类型内部使用了CAS循环，当大量的冲突发生时，该等待还是得等待！但是总归比锁要好。</p><h2 id="一、使用-atomic-作为全局变量" tabindex="-1">一、使用 Atomic 作为全局变量 <a class="header-anchor" href="#一、使用-atomic-作为全局变量" aria-label="Permalink to &quot;一、使用 Atomic 作为全局变量&quot;">​</a></h2><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">ops</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Sub</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">sync</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">atomic</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">AtomicU64</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Ordering</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">thread</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">self</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">JoinHandle</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">time</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Instant</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">N_TIMES</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">N_THREADS</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">usize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">R</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicU64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicU64</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add_n_times</span><span style="color:#E1E4E8;">(n</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JoinHandle</span><span style="color:#E1E4E8;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">thread</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">n {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">R</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">fetch_add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Ordering</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Relaxed</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Instant</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">mut</span><span style="color:#E1E4E8;"> threads </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vec</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">with_capacity</span><span style="color:#E1E4E8;">(N_THREADS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _ </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">..</span><span style="color:#E1E4E8;">N_THREADS {</span></span>
<span class="line"><span style="color:#E1E4E8;">        threads</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">add_n_times</span><span style="color:#E1E4E8;">(N_TIMES));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> thread </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> threads {</span></span>
<span class="line"><span style="color:#E1E4E8;">        thread</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assert_eq!</span><span style="color:#E1E4E8;">(N_TIMES </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> N_THREADS </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u64</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">R</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Ordering</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Relaxed</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;{:?}&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">Instant</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">sub</span><span style="color:#E1E4E8;">(s));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">ops</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Sub</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">sync</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">atomic</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">AtomicU64</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Ordering</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">thread</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">self</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">JoinHandle</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">time</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Instant</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">N_TIMES</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">N_THREADS</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">usize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">R</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicU64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicU64</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add_n_times</span><span style="color:#24292E;">(n</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JoinHandle</span><span style="color:#24292E;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">thread</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">n {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">R</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">fetch_add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Relaxed</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Instant</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">mut</span><span style="color:#24292E;"> threads </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vec</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">with_capacity</span><span style="color:#24292E;">(N_THREADS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _ </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">..</span><span style="color:#24292E;">N_THREADS {</span></span>
<span class="line"><span style="color:#24292E;">        threads</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">add_n_times</span><span style="color:#24292E;">(N_TIMES));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> thread </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> threads {</span></span>
<span class="line"><span style="color:#24292E;">        thread</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assert_eq!</span><span style="color:#24292E;">(N_TIMES </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> N_THREADS </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u64</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">R</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Relaxed</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;{:?}&quot;</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">Instant</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">sub</span><span style="color:#24292E;">(s));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>以上代码启动了数个线程，每个线程都在疯狂对全局变量进行加 1 操作, 最后将它与线程数 * 加1次数进行比较，如果发生了因为多个线程同时修改导致了脏数据，那么这两个必将不相等。好在，它没有让我们失望，不仅快速的完成了任务，而且保证了 100%的并发安全性。</strong></p><p><strong>Atomic的值具有内部可变性，你无需将其声明为mut：</strong></p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">sync</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Mutex</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">sync</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">atomic</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">Ordering</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">AtomicU64</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u64</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Mutex</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    n</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">count </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AtomicU64</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    n</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">fetch_add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Ordering</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Relaxed</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">sync</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Mutex</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">sync</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">atomic</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">Ordering</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">AtomicU64</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u64</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Mutex</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    n</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">count </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AtomicU64</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    n</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">fetch_add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Relaxed</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这里有一个奇怪的枚举成员<code>Ordering::Relaxed</code>, 看上去很像是排序作用，但是我们并没有做排序操作啊？<code>实际上它用于控制原子操作使用的内存顺序</code>。</p><h4 id="限定内存顺序的-5-个规则" tabindex="-1"><a href="https://course.rs/advance/concurrency-with-threads/sync2.html#%E9%99%90%E5%AE%9A%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E7%9A%84-5-%E4%B8%AA%E8%A7%84%E5%88%99" target="_blank" rel="noreferrer">限定内存顺序的 5 个规则</a> <a class="header-anchor" href="#限定内存顺序的-5-个规则" aria-label="Permalink to &quot;[限定内存顺序的 5 个规则](https://course.rs/advance/concurrency-with-threads/sync2.html#%E9%99%90%E5%AE%9A%E5%86%85%E5%AD%98%E9%A1%BA%E5%BA%8F%E7%9A%84-5-%E4%B8%AA%E8%A7%84%E5%88%99)&quot;">​</a></h4><p>在理解了内存顺序可能存在的改变后，你就可以明白为什么 Rust 提供了<code>Ordering::Relaxed</code>用于限定内存顺序了，事实上，该枚举有 5 个成员:</p><ul><li><strong>Relaxed</strong>， 这是最宽松的规则，它对编译器和 CPU 不做任何限制，可以乱序</li><li><strong>Release 释放</strong>，设定内存屏障(Memory barrier)，保证它之前的操作永远在它之前，但是它后面的操作可能被重排到它前面</li><li><strong>Acquire 获取</strong>, 设定内存屏障，保证在它之后的访问永远在它之后，但是它之前的操作却有可能被重排到它后面，往往和<code>Release</code>在不同线程中联合使用</li><li><strong>AcqRel</strong>, 是 <em>Acquire</em> 和 <em>Release</em> 的结合，同时拥有它们俩提供的保证。比如你要对一个 <code>atomic</code> 自增 1，同时希望该操作之前和之后的读取或写入操作不会被重新排序</li><li><strong>SeqCst 顺序一致性</strong>， <code>SeqCst</code>就像是<code>AcqRel</code>的加强版，它不管原子操作是属于读取还是写入的操作，只要某个线程有用到<code>SeqCst</code>的原子操作，线程中该<code>SeqCst</code>操作前的数据操作绝对不会被重新排在该<code>SeqCst</code>操作之后，且该<code>SeqCst</code>操作后的数据操作也绝对不会被重新排在<code>SeqCst</code>操作前。</li></ul><h2 id="多线程中使用-atomic" tabindex="-1">多线程中使用 Atomic <a class="header-anchor" href="#多线程中使用-atomic" aria-label="Permalink to &quot;多线程中使用 Atomic&quot;">​</a></h2><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">sync</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Arc</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">sync</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">atomic</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">AtomicUsize</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Ordering</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{hint, thread};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> spinlock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Arc</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">AtomicUsize</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> spinlock_clone </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Arc</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">spinlock);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> thread </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">thread</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">move||</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        spinlock_clone</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">store</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Ordering</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">SeqCst</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 等待其它线程释放锁</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> spinlock</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Ordering</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">SeqCst</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">hint</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">spin_loop</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(panic) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thread</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Thread had an error: {:?}&quot;</span><span style="color:#E1E4E8;">, panic);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">sync</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Arc</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">sync</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">atomic</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">AtomicUsize</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Ordering</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{hint, thread};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> spinlock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arc</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">AtomicUsize</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> spinlock_clone </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arc</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">spinlock);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> thread </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">thread</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">move||</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        spinlock_clone</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">store</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">SeqCst</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 等待其它线程释放锁</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> spinlock</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Ordering</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">SeqCst</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">hint</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">spin_loop</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(panic) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thread</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Thread had an error: {:?}&quot;</span><span style="color:#24292E;">, panic);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,16),e=[o];function c(t,r,y,E,i,F){return n(),a("div",null,e)}const C=s(p,[["render",c]]);export{A as __pageData,C as default};
