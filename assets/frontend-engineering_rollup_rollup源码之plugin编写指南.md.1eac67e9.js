import{_ as a,o as l,c as p,Q as n,k as s}from"./chunks/framework.3d945e71.js";const A=JSON.parse('{"title":"rollup 源码之 plugin 编写指南","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/rollup/rollup源码之plugin编写指南.md","filePath":"frontend-engineering/rollup/rollup源码之plugin编写指南.md","lastUpdated":1697421979000}'),o={name:"frontend-engineering/rollup/rollup源码之plugin编写指南.md"},e=n(`<h1 id="rollup-源码之-plugin-编写指南" tabindex="-1">rollup 源码之 plugin 编写指南 <a class="header-anchor" href="#rollup-源码之-plugin-编写指南" aria-label="Permalink to &quot;rollup 源码之 plugin 编写指南&quot;">​</a></h1><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><p>[[toc]]</p><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>rollup 作为一款轻量的打包编译工具，在我们日常的工具库开发中使用非常广泛，但是对于它的插件编写，从目前来看官网上对于插件的介绍几乎都是英文，学习起来也不是很友好, 例子也相对较少，所以整理一篇文章来学习也是不错的。除此之外，作为使用最广泛的 webpack，它的插件编写也比较简单和清晰的，那它和 rollup 中的插件使用又有什么区别呢。下面将借助流程图 并搭配一些 rollup 源码来讲解。</p><h2 id="插件执行" tabindex="-1">插件执行 <a class="header-anchor" href="#插件执行" aria-label="Permalink to &quot;插件执行&quot;">​</a></h2><p>我们知道<code>wepback</code>执行插件是借助了<code>tapable</code>用于同步串行、并行，异步串行并行等方式来执行插件，那 rollup 其实自己实现一套简易的类似<code>tapable</code>的功能。大家可以定位到源码中<code>src/utils/PluginDriver.ts</code>文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginDriver</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookFirst</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookFirstSync</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookParallel</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookReduceArg0</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookReduceArg0Sync</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookReduceValue</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookReduceValueSync</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hookSeqSync</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PluginDriver</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookFirst</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookFirstSync</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookParallel</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookReduceArg0</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookReduceArg0Sync</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookReduceValue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookReduceValueSync</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hookSeqSync</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>下面分别介绍这些方法，都有什么作用，相信大家都通过方法名看出了具体作用了~</p><ul><li><p><strong>hookFirst</strong>: 异步串行，出现第一个返回值不为空的插件，就停止执行,类似<code>tapable</code>的<code>AsyncSeriesBailHook</code></p></li><li><p><strong>hookFirstSync</strong>: 同步串行，出现第一个返回值不为空的插件，就停止执行，类似<code>tapable</code>的<code>SyncBailHook</code></p></li><li><p><strong>hookParallel</strong>： 异步并行 Promise.all，类似<code>tapable</code>的<code>AsyncParallelHook</code></p></li><li><p><strong>hookReduceArg0</strong>: 异步串行，把上一个 hook 的返回值作为下一个 hook 的参数，如果返回为空就停止执行，并返回最后的值, 类似<code>tapable</code>的<code>AsyncSeriesWaterfallHook</code></p></li><li><p><strong>hookReduceArg0Sync</strong>：同步串行，把上一个 hook 的返回值作为下一个 hook 的参数，如果返回为空就停止执行，并返回最后的值, 类似<code>tapable</code>的<code>SyncWaterfallHook</code></p></li><li><p><strong>hookReduceValue</strong>: 异步串行，传入一个初始值 value，上一个 hook 处理好 value 后的返回值作为下一个 hook 的参数</p></li><li><p><strong>hookReduceValueSync</strong>: 同步串行，传入一个初始值 value，上一个 hook 处理好 value 后的返回值作为下一个 hook 的参数</p></li><li><p><strong>hookSeq</strong>: 异步串行，忽略返回值，类似<code>tapable</code>的<code>SyncHook</code></p></li><li><p><strong>hookSeqSync</strong>: 同步串行，忽略返回值类似<code>tapable</code>的<code>AsyncSeriesHook</code></p></li></ul><p>通过上面的介绍，大家听过大概知道了 rollup 的插件是如何执行的。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>我们先从一段代码开始</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rollup</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;rollup&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  input: </span><span style="color:#9ECBFF;">&quot;./src/app.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outputOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  file: </span><span style="color:#9ECBFF;">&quot;bundle.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  format: </span><span style="color:#9ECBFF;">&quot;cjs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第一步</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">bundle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> rollup.</span><span style="color:#B392F0;">rollup</span><span style="color:#E1E4E8;">(inputOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第二步</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">(outputOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 第三步</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> bundle.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(outputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rollup</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;rollup&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;path&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inputOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  input: </span><span style="color:#032F62;">&quot;./src/app.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">outputOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  file: </span><span style="color:#032F62;">&quot;bundle.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  format: </span><span style="color:#032F62;">&quot;cjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 第一步</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">bundle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> rollup.</span><span style="color:#6F42C1;">rollup</span><span style="color:#24292E;">(inputOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 第二步</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">code</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">map</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bundle.</span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">(outputOptions);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 第三步</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> bundle.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(outputOptions);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="_1-build-阶段" tabindex="-1">1. build 阶段 <a class="header-anchor" href="#_1-build-阶段" aria-label="Permalink to &quot;1. build 阶段&quot;">​</a></h2><h3 id="options-hook" tabindex="-1">options Hook <a class="header-anchor" href="#options-hook" aria-label="Permalink to &quot;options Hook&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">开始 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">获取inputOptions </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">获取插件数组 </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">异步串行</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">options Hook</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">经过插件处理后的inputOptions </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">合并inputOptions和defaultInputOptions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style a fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">开始 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">获取inputOptions </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">获取插件数组 </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">异步串行</span><span style="color:#24292E;">|</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">options Hook</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">经过插件处理后的inputOptions </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">合并inputOptions和defaultInputOptions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style a fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><blockquote><p>注意：options hook 会被异步串行执行</p></blockquote><p><strong>插件示例</strong></p><p>参数：inputOptions</p><p>上下文：</p>`,21),c=s("ul",null,[s("li",{"rollupVersion,":"",watchMode:""},"meta:")],-1),t=n(`<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;options hook&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;">(inputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.meta.rollupVersion) </span><span style="color:#6A737D;">// 获取rollup版本信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.meta.watchMode)     </span><span style="color:#6A737D;">// 获取watchMode</span></span>
<span class="line"><span style="color:#E1E4E8;">        inputOptions.input </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 修改入口文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> inputOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;options hook&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">options</span><span style="color:#24292E;">(inputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.meta.rollupVersion) </span><span style="color:#6A737D;">// 获取rollup版本信息</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.meta.watchMode)     </span><span style="color:#6A737D;">// 获取watchMode</span></span>
<span class="line"><span style="color:#24292E;">        inputOptions.input </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./src/index.js&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 修改入口文件路径</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> inputOptions</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="buildstart-hook" tabindex="-1">buildStart Hook <a class="header-anchor" href="#buildstart-hook" aria-label="Permalink to &quot;buildStart Hook&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TB</span></span>
<span class="line"><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new Graph</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span></span>
<span class="line"><span style="color:#F97583;">subgraph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Graph初始化</span></span>
<span class="line"><span style="color:#FFAB70;">b</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new PathTracker</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new PluginDriver</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new GlobalScope</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new ModuleLoader</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#FFAB70;">e </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookParallel 异步并行</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">buildStart Hook</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">g</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">graph.build</span><span style="color:#F97583;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style f fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TB</span></span>
<span class="line"><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new Graph</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span></span>
<span class="line"><span style="color:#D73A49;">subgraph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Graph初始化</span></span>
<span class="line"><span style="color:#E36209;">b</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new PathTracker</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new PluginDriver</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new GlobalScope</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">e</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new ModuleLoader</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#E36209;">e </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookParallel 异步并行</span><span style="color:#24292E;">|</span><span style="color:#E36209;">f</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">buildStart Hook</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">g</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">graph.build</span><span style="color:#D73A49;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style f fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><p>可以看到在要执行<code>graph.build</code>之前，除了创建一些重要对象之外，还执行了<code>buildStart Hook</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">graph.pluginDriver.</span><span style="color:#B392F0;">hookParallel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;buildStart&quot;</span><span style="color:#E1E4E8;">, [inputOptions]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">graph.pluginDriver.</span><span style="color:#6F42C1;">hookParallel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;buildStart&quot;</span><span style="color:#24292E;">, [inputOptions]);</span></span></code></pre></div><p><strong>插件示例</strong></p><p>参数：<code>inputOptions</code></p><blockquote><p>注意这里的 inputOptions 是经过合并处理过后的</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;buildStart&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">buildStart</span><span style="color:#E1E4E8;">(inputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可通过引用类型 直接修改</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputOptions.xx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xx</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;buildStart&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">buildStart</span><span style="color:#24292E;">(inputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可通过引用类型 直接修改</span></span>
<span class="line"><span style="color:#24292E;">    inputOptions.xx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xx</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="resolveid-hook" tabindex="-1">resolveId Hook <a class="header-anchor" href="#resolveid-hook" aria-label="Permalink to &quot;resolveId Hook&quot;">​</a></h3><p>下面进入解析入口文件路径阶段</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">graph.build</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">normalizeEntryModules </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">规范入口配置</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">loadEntryModule </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">开始加载入口模块</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">resolveId </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">hookFirst 异步串行可中断</span><span style="color:#E1E4E8;">| </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">resolveId Hook</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">返回处理后的路径resolveIdResult</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style b fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">graph.build</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">normalizeEntryModules </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">|</span><span style="color:#E36209;">规范入口配置</span><span style="color:#24292E;">|</span><span style="color:#E36209;">loadEntryModule </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">|</span><span style="color:#E36209;">开始加载入口模块</span><span style="color:#24292E;">|</span><span style="color:#E36209;">resolveId </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">|</span><span style="color:#E36209;">hookFirst 异步串行可中断</span><span style="color:#24292E;">| </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">resolveId Hook</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">返回处理后的路径resolveIdResult</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style b fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><p>经过 rollup 内部的路径处理和<code>resolveId Hook</code>的处理，我们拿到了完整的入口文件路径。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pluginResult</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> pluginDriver.</span><span style="color:#B392F0;">hookFirst</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;resolveId&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  [source, importer, { custom: customOptions }],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  skip</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pluginResult</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> pluginDriver.</span><span style="color:#6F42C1;">hookFirst</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;resolveId&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  [source, importer, { custom: customOptions }],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  skip</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p><strong>插件示例</strong></p><p>参数：</p><ul><li>id 文件路径</li><li>importer 可指定当前解析目录</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 乞丐版的alias插件</span></span>
<span class="line"><span style="color:#6A737D;">// 第一种写法</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;resolveId&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolveId</span><span style="color:#E1E4E8;">(id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fullPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@&#39;</span><span style="color:#E1E4E8;">, path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> id.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二种</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;resolveId&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolveId</span><span style="color:#E1E4E8;">(id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fullPath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> id.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@&#39;</span><span style="color:#E1E4E8;">, path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;src&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      id: id.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> fullPath </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      meta: xxx, </span><span style="color:#6A737D;">// 模块meta信息</span></span>
<span class="line"><span style="color:#E1E4E8;">      moduleSideEffects: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 设置当前模块是否有副作用</span></span>
<span class="line"><span style="color:#E1E4E8;">      syntheticNamedExports: xxx </span><span style="color:#6A737D;">// 默认为false,用法可参考 https://rollupjs.org/guide/en/#synthetic-named-exports</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 乞丐版的alias插件</span></span>
<span class="line"><span style="color:#6A737D;">// 第一种写法</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;resolveId&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolveId</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fullPath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@&#39;</span><span style="color:#24292E;">, path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> id.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> fullPath </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fullPath </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.js&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 第二种</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;resolveId&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolveId</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fullPath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> id.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@&#39;</span><span style="color:#24292E;">, path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;src&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      id: id.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> fullPath </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> fullPath </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;.js&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      meta: xxx, </span><span style="color:#6A737D;">// 模块meta信息</span></span>
<span class="line"><span style="color:#24292E;">      moduleSideEffects: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 设置当前模块是否有副作用</span></span>
<span class="line"><span style="color:#24292E;">      syntheticNamedExports: xxx </span><span style="color:#6A737D;">// 默认为false,用法可参考 https://rollupjs.org/guide/en/#synthetic-named-exports</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>resolveId Hook</code>也是比较常用的 hook，需要注意的是，如果有插件返回了值，那么后续所有插件的<code>resolveId</code>都不会被执行。</p><h3 id="load-hook" tabindex="-1">load Hook <a class="header-anchor" href="#load-hook" aria-label="Permalink to &quot;load Hook&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">resolveIdResult </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">addDefaultsToResolvedId统一结果为对象</span><span style="color:#F97583;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">subgraph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchModule</span></span>
<span class="line"><span style="color:#FFAB70;">a </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span></span>
<span class="line"><span style="color:#FFAB70;">b</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new Module</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookFirst 异步串行可中断</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">c</span></span>
<span class="line"><span style="color:#F97583;">subgraph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addModuleSource</span></span>
<span class="line"><span style="color:#FFAB70;">c</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">load Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#FFAB70;">c </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">获取到经过load hook处理的代码source</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style c fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">resolveIdResult </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">addDefaultsToResolvedId统一结果为对象</span><span style="color:#D73A49;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">subgraph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchModule</span></span>
<span class="line"><span style="color:#E36209;">a </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span></span>
<span class="line"><span style="color:#E36209;">b</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new Module</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookFirst 异步串行可中断</span><span style="color:#24292E;">|</span><span style="color:#E36209;">c</span></span>
<span class="line"><span style="color:#D73A49;">subgraph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addModuleSource</span></span>
<span class="line"><span style="color:#E36209;">c</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">load Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#E36209;">c </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">获取到经过load hook处理的代码source</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style c fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><p>拿到上一个<code>resolveId hook</code>处理的路径后，就要进入读取入口文件的步骤了，这一步 rollup 给了我们很大权力，我们可以任意修改文件内容。但是要注意，每个文件只会被一个插件的<code>load Hook</code>处理，因为它是以<code>hookFirst</code>来执行的。另外，如果你没有返回值，rollup 会自动读取文件。</p><p><strong>插件示例</strong></p><p>参数：</p><ul><li>id 文件完整路径</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在所有文件前面添加注释</span></span>
<span class="line"><span style="color:#6A737D;">// 写法1</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/*这是一段注释*/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> content.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 写法2</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;load&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">(id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 读取文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 也可以对代码进行转换 生成等操作</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(content)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">generate</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        code: </span><span style="color:#9ECBFF;">&#39;/*这是一段注释*/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> content.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在所有文件前面添加注释</span></span>
<span class="line"><span style="color:#6A737D;">// 写法1</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;load&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取文件内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/*这是一段注释*/&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> content.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 写法2</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;load&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">(id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 读取文件内容</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fs.</span><span style="color:#6F42C1;">readFileSync</span><span style="color:#24292E;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 也可以对代码进行转换 生成等操作</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(content)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">generate</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        code: </span><span style="color:#032F62;">&#39;/*这是一段注释*/&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> content.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="transform-hook" tabindex="-1">transform Hook <a class="header-anchor" href="#transform-hook" aria-label="Permalink to &quot;transform Hook&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">source </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookReduceArg0 异步串行</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">transform Hook</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">b</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">ast,map,code</span><span style="color:#F97583;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style a fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">source </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookReduceArg0 异步串行</span><span style="color:#24292E;">|</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">transform Hook</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">b</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">ast,map,code</span><span style="color:#D73A49;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style a fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><p>关于这个 Hook 想必大家都猜到了，可以对代码进行转换。关于这块的代码示例简单介绍就可以了~，大家自行发挥~。</p><p><strong>插件示例</strong></p><p>参数</p><ul><li>code</li><li>id</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 写法1</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;transform&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(code, id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        code,</span></span>
<span class="line"><span style="color:#E1E4E8;">        map,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ast</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//写法2</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;transform&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(code, id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 写法1</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;transform&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(code, id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        code,</span></span>
<span class="line"><span style="color:#24292E;">        map,</span></span>
<span class="line"><span style="color:#24292E;">        ast</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//写法2</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;transform&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(code, id) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>接下来就进入<code>AST</code>的创建阶段了</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">transform Hook</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">{</span><span style="color:#9ECBFF;">是否返回ast</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">是</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">使用transofrm Hook返回的ast</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">否</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">使用默认编译工具acorn</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">d </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">ast</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">e </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">ast</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">f </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">创建ast上下文 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">g</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new ModuleScope</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">h</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new NamespaceVariable</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">i</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">创建根ast节点new Program</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">递归整个ast树并创建每个节点</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">transform Hook</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">{</span><span style="color:#032F62;">是否返回ast</span><span style="color:#D73A49;">}</span></span>
<span class="line"><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">是</span><span style="color:#24292E;">|</span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">使用transofrm Hook返回的ast</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">否</span><span style="color:#24292E;">|</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">使用默认编译工具acorn</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">d </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">f</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">ast</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">e </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">f</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">ast</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">f </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">创建ast上下文 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">g</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new ModuleScope</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">h</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new NamespaceVariable</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">i</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">创建根ast节点new Program</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">递归整个ast树并创建每个节点</span></span></code></pre></div><p>上面的步骤其实递归了整个 ast 树，并为每个类型节点都创建了对应的<code>节点类</code>，对于它内部做了什么，本文不做讨论。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c33f6f9b5f3415cbad05acadf1c09ad~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="moduleparsed-hook" tabindex="-1">moduleParsed Hook <a class="header-anchor" href="#moduleparsed-hook" aria-label="Permalink to &quot;moduleParsed Hook&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">addModuleSource </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookParallel 异步并行</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">moduleParsed Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style a fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">addModuleSource </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookParallel 异步并行</span><span style="color:#24292E;">|</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">moduleParsed Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style a fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><p>在解析完模块后，我们能通过这个 hook 来获取模块的信息</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pluginDriver.</span><span style="color:#B392F0;">hookParallel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;moduleParsed&quot;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.info]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pluginDriver.</span><span style="color:#6F42C1;">hookParallel</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;moduleParsed&quot;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">.info]);</span></span></code></pre></div><p><strong>插件示例</strong></p><p>参数</p><ul><li>module.info 模块信息</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: string, </span><span style="color:#6A737D;">// 模块路径</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">code</span><span style="color:#E1E4E8;">: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 模块代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ast</span><span style="color:#E1E4E8;">: ESTree.Program, </span><span style="color:#6A737D;">// 模块ast</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isEntry</span><span style="color:#E1E4E8;">: boolean, </span><span style="color:#6A737D;">// 是否是入口模块</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isExternal</span><span style="color:#E1E4E8;">: boolean, </span><span style="color:#6A737D;">// 是否是外部模块</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">importedIds</span><span style="color:#E1E4E8;">: string[], </span><span style="color:#6A737D;">// 被此模块导入的所有模块id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">importers</span><span style="color:#E1E4E8;">: string[], </span><span style="color:#6A737D;">// 有哪些模块id 导入了该模块</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dynamicallyImportedIds</span><span style="color:#E1E4E8;">: string[], </span><span style="color:#6A737D;">// 通过import(xx)导入的所有模块id</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dynamicImporters</span><span style="color:#E1E4E8;">: string[], </span><span style="color:#6A737D;">// 有哪些模块通过import(xx)导入此模块</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">implicitlyLoadedAfterOneOf</span><span style="color:#E1E4E8;">: string[], </span><span style="color:#6A737D;">// emitChunk会用到</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">implicitlyLoadedBefore</span><span style="color:#E1E4E8;">: string[],  </span><span style="color:#6A737D;">// emitChunk会用到</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hasModuleSideEffects</span><span style="color:#E1E4E8;">: boolean </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;no-treeshake&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 模块是否有副作用</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">meta</span><span style="color:#E1E4E8;">: {[plugin: string]: any} </span><span style="color:#6A737D;">// 模块元信息</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">syntheticNamedExports</span><span style="color:#E1E4E8;">: boolean </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> string </span><span style="color:#6A737D;">// https://rollupjs.org/guide/en/#synthetic-named-exports</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: string, </span><span style="color:#6A737D;">// 模块路径</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">code</span><span style="color:#24292E;">: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 模块代码</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ast</span><span style="color:#24292E;">: ESTree.Program, </span><span style="color:#6A737D;">// 模块ast</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isEntry</span><span style="color:#24292E;">: boolean, </span><span style="color:#6A737D;">// 是否是入口模块</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isExternal</span><span style="color:#24292E;">: boolean, </span><span style="color:#6A737D;">// 是否是外部模块</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">importedIds</span><span style="color:#24292E;">: string[], </span><span style="color:#6A737D;">// 被此模块导入的所有模块id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">importers</span><span style="color:#24292E;">: string[], </span><span style="color:#6A737D;">// 有哪些模块id 导入了该模块</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dynamicallyImportedIds</span><span style="color:#24292E;">: string[], </span><span style="color:#6A737D;">// 通过import(xx)导入的所有模块id</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dynamicImporters</span><span style="color:#24292E;">: string[], </span><span style="color:#6A737D;">// 有哪些模块通过import(xx)导入此模块</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">implicitlyLoadedAfterOneOf</span><span style="color:#24292E;">: string[], </span><span style="color:#6A737D;">// emitChunk会用到</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">implicitlyLoadedBefore</span><span style="color:#24292E;">: string[],  </span><span style="color:#6A737D;">// emitChunk会用到</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">hasModuleSideEffects</span><span style="color:#24292E;">: boolean </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;no-treeshake&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 模块是否有副作用</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">meta</span><span style="color:#24292E;">: {[plugin: string]: any} </span><span style="color:#6A737D;">// 模块元信息</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">syntheticNamedExports</span><span style="color:#24292E;">: boolean </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> string </span><span style="color:#6A737D;">// https://rollupjs.org/guide/en/#synthetic-named-exports</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;moduleParsed&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">moduleParsed</span><span style="color:#E1E4E8;">(info) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(info);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;moduleParsed&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">moduleParsed</span><span style="color:#24292E;">(info) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(info);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>获取到模块信息之后，<code>rollup</code>将会根据模块的依赖树递归，重复以上的步骤，过程如下</p><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">moduleParsed Hook</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">subgraph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch依赖模块</span></span>
<span class="line"><span style="color:#FFAB70;">b</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">循环模块sources</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">c</span><span style="color:#F97583;">{</span><span style="color:#9ECBFF;">resolveIds是否解析过该source</span><span style="color:#F97583;">}</span></span>
<span class="line"><span style="color:#FFAB70;">c </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">否</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">resolveId</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">c </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">是</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">g</span></span>
<span class="line"><span style="color:#FFAB70;">d </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookFirst 异步串行可中断</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">resolveId Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">f </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">g</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">resolveIdResult</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#FFAB70;">g </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">递归执行fetchModule</span></span>
<span class="line"><span style="color:#FFAB70;">style a fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span>
<span class="line"><span style="color:#FFAB70;">style f fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">moduleParsed Hook</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">subgraph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch依赖模块</span></span>
<span class="line"><span style="color:#E36209;">b</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">循环模块sources</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">c</span><span style="color:#D73A49;">{</span><span style="color:#032F62;">resolveIds是否解析过该source</span><span style="color:#D73A49;">}</span></span>
<span class="line"><span style="color:#E36209;">c </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">否</span><span style="color:#24292E;">|</span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">resolveId</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">c </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">是</span><span style="color:#24292E;">|</span><span style="color:#E36209;">g</span></span>
<span class="line"><span style="color:#E36209;">d </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookFirst 异步串行可中断</span><span style="color:#24292E;">|</span><span style="color:#E36209;">f</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">resolveId Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">f </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">g</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">resolveIdResult</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#E36209;">g </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">递归执行fetchModule</span></span>
<span class="line"><span style="color:#E36209;">style a fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span>
<span class="line"><span style="color:#E36209;">style f fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><h2 id="_2-generate-阶段" tabindex="-1">2.generate 阶段 <a class="header-anchor" href="#_2-generate-阶段" aria-label="Permalink to &quot;2.generate 阶段&quot;">​</a></h2><blockquote><p>时间原因，流程图后续补充</p></blockquote><h3 id="renderstart、banner、footer、intro、outro-hook" tabindex="-1">renderStart、banner、footer、intro、outro Hook <a class="header-anchor" href="#renderstart、banner、footer、intro、outro-hook" aria-label="Permalink to &quot;renderStart、banner、footer、intro、outro Hook&quot;">​</a></h3><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TD</span></span>
<span class="line"><span style="color:#FFAB70;">bundle</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new Bundle</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#FFAB70;">设置要输出的assets模块 </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookParallel</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">renderStart Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">a </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">chunk</span></span>
<span class="line"><span style="color:#F97583;">subgraph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">生成Chunk对象</span></span>
<span class="line"><span style="color:#FFAB70;">chunk</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">new Chunk</span><span style="color:#F97583;">)</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">link</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">link dependencies</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"><span style="color:#FFAB70;">link </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">createAddons</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">subgraph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#FFAB70;">all</span></span>
<span class="line"><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookReduceValue</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">c</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">banner Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookReduceValue</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">d</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">footer Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookReduceValue</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">intro Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#FFAB70;">b </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> |</span><span style="color:#FFAB70;">hookReduceValue</span><span style="color:#E1E4E8;">|</span><span style="color:#FFAB70;">f</span><span style="color:#F97583;">(</span><span style="color:#9ECBFF;">outro Hook</span><span style="color:#F97583;">)</span></span>
<span class="line"><span style="color:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">style a fill</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">bbf</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">f66</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-width</span><span style="color:#E1E4E8;">:</span><span style="color:#FFAB70;">2px</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">:#</span><span style="color:#FFAB70;">fff</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">stroke-dasharray</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">5 5</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">graph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TD</span></span>
<span class="line"><span style="color:#E36209;">bundle</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new Bundle</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#E36209;">设置要输出的assets模块 </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookParallel</span><span style="color:#24292E;">|</span><span style="color:#E36209;">a</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">renderStart Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">a </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">chunk</span></span>
<span class="line"><span style="color:#D73A49;">subgraph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">生成Chunk对象</span></span>
<span class="line"><span style="color:#E36209;">chunk</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">new Chunk</span><span style="color:#D73A49;">)</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">link</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">link dependencies</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"><span style="color:#E36209;">link </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">createAddons</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">subgraph</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">.</span><span style="color:#E36209;">all</span></span>
<span class="line"><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookReduceValue</span><span style="color:#24292E;">|</span><span style="color:#E36209;">c</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">banner Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookReduceValue</span><span style="color:#24292E;">|</span><span style="color:#E36209;">d</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">footer Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookReduceValue</span><span style="color:#24292E;">|</span><span style="color:#E36209;">e</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">intro Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#E36209;">b </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> |</span><span style="color:#E36209;">hookReduceValue</span><span style="color:#24292E;">|</span><span style="color:#E36209;">f</span><span style="color:#D73A49;">(</span><span style="color:#032F62;">outro Hook</span><span style="color:#D73A49;">)</span></span>
<span class="line"><span style="color:#D73A49;">end</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E36209;">style a fill</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">bbf</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">f66</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-width</span><span style="color:#24292E;">:</span><span style="color:#E36209;">2px</span><span style="color:#24292E;">,</span><span style="color:#E36209;">color</span><span style="color:#24292E;">:#</span><span style="color:#E36209;">fff</span><span style="color:#24292E;">,</span><span style="color:#E36209;">stroke-dasharray</span><span style="color:#24292E;">: </span><span style="color:#E36209;">5 5</span></span></code></pre></div><p><strong>插件示例</strong></p><ul><li><p><strong>renderStart</strong></p><p>参数：inputOptions, outputOptions</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;renderStart&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">renderStart</span><span style="color:#E1E4E8;">(inputOptions, outputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(outputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(inputOptions);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;renderStart&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">renderStart</span><span style="color:#24292E;">(inputOptions, outputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(outputOptions);</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(inputOptions);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre></div></li><li><p><strong>banner、footer、intro、outro Hook</strong></p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outputOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  banner: </span><span style="color:#9ECBFF;">&quot;banner&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  footer: </span><span style="color:#9ECBFF;">&quot;footer&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">intro</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;intro&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  outro: </span><span style="color:#9ECBFF;">&quot;outro&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">outputOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  banner: </span><span style="color:#032F62;">&quot;banner&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  footer: </span><span style="color:#032F62;">&quot;footer&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">intro</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;intro&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  outro: </span><span style="color:#032F62;">&quot;outro&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在创建完 chunk 后，就会进入 chunk 的优化渲染阶段了，做的事情其实也比较简单，就是调用了所有 ast 节点的<code>render</code>方法，然后会把<code>included</code>为 false 的节点代码删除，也就是我们常说的<code>tree shaking</code>。</p><h3 id="renderdynamicimport" tabindex="-1">renderDynamicImport <a class="header-anchor" href="#renderdynamicimport" aria-label="Permalink to &quot;renderDynamicImport&quot;">​</a></h3><p><strong>插件示例</strong></p><p>参数：</p><pre><code>{
    customResolution: string | null
    format: string, // cjs/es等
    moduleId: string,  // import的模块路径
    targetModuleId: string | null // 被import的模块路径
}
</code></pre><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// plugin</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;dynamic-import-polyfill&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderDynamicImport</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      left: </span><span style="color:#9ECBFF;">&quot;dynamicImportPolyfill(&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      right: </span><span style="color:#9ECBFF;">&quot;, i<wbr>mport.meta.url)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// input</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./lib.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// output</span></span>
<span class="line"><span style="color:#B392F0;">dynamicImportPolyfill</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./lib.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// plugin</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">plugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;dynamic-import-polyfill&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderDynamicImport</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      left: </span><span style="color:#032F62;">&quot;dynamicImportPolyfill(&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      right: </span><span style="color:#032F62;">&quot;, i<wbr>mport.meta.url)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// input</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./lib.js&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// output</span></span>
<span class="line"><span style="color:#6F42C1;">dynamicImportPolyfill</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./lib.js&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.url);</span></span></code></pre></div><h3 id="augmentchunkhash" tabindex="-1">augmentChunkHash <a class="header-anchor" href="#augmentchunkhash" aria-label="Permalink to &quot;augmentChunkHash&quot;">​</a></h3><p><strong>插件示例</strong></p><p>参数：chunkInfo</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">code</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dynamicImports</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">exports</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">facadeModuleId</span><span style="color:#E1E4E8;">: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fileName</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">implicitlyLoadedBefore</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">imports</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">importedBindings</span><span style="color:#E1E4E8;">: {[imported: string]: string[]},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isDynamicEntry</span><span style="color:#E1E4E8;">: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isEntry</span><span style="color:#E1E4E8;">: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isImplicitEntry</span><span style="color:#E1E4E8;">: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">: SourceMap </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">modules</span><span style="color:#E1E4E8;">: {  </span><span style="color:#6A737D;">// chunk所包含的模块</span></span>
<span class="line"><span style="color:#E1E4E8;">    [id: string]: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      renderedExports: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">      removedExports: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">      renderedLength: number,</span></span>
<span class="line"><span style="color:#E1E4E8;">      originalLength: number,</span></span>
<span class="line"><span style="color:#E1E4E8;">      code: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">referencedFiles</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;chunk&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">code</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dynamicImports</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">exports</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">facadeModuleId</span><span style="color:#24292E;">: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fileName</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">implicitlyLoadedBefore</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">imports</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">importedBindings</span><span style="color:#24292E;">: {[imported: string]: string[]},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isDynamicEntry</span><span style="color:#24292E;">: boolean,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isEntry</span><span style="color:#24292E;">: boolean,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isImplicitEntry</span><span style="color:#24292E;">: boolean,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">: SourceMap </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {  </span><span style="color:#6A737D;">// chunk所包含的模块</span></span>
<span class="line"><span style="color:#24292E;">    [id: string]: {</span></span>
<span class="line"><span style="color:#24292E;">      renderedExports: string[],</span></span>
<span class="line"><span style="color:#24292E;">      removedExports: string[],</span></span>
<span class="line"><span style="color:#24292E;">      renderedLength: number,</span></span>
<span class="line"><span style="color:#24292E;">      originalLength: number,</span></span>
<span class="line"><span style="color:#24292E;">      code: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">referencedFiles</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;chunk&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;augmentChunkHash&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">augmentChunkHash</span><span style="color:#E1E4E8;">(chunkInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(chunkInfo.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 生成唯一值以更新chunkName</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;augmentChunkHash&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">augmentChunkHash</span><span style="color:#24292E;">(chunkInfo) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(chunkInfo.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 生成唯一值以更新chunkName</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="resolveimportmeta" tabindex="-1">resolveImportMeta <a class="header-anchor" href="#resolveimportmeta" aria-label="Permalink to &quot;resolveImportMeta&quot;">​</a></h3><p>参数：</p><ul><li>property <code>meta.xxx</code></li><li>模块和 chunk id<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkId, moduleId, format;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  chunkId, moduleId, format;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.testKey)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;resolveImportMeta&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolveImportMeta</span><span style="color:#E1E4E8;">(property, {moduleId}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (property </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;testKey&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`new URL(&#39;\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">relative</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">process</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">cwd</span><span style="color:#9ECBFF;">(), </span><span style="color:#E1E4E8;">moduleId</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}&#39;, document.baseURI).href\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// a.js</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.testKey)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;resolveImportMeta&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolveImportMeta</span><span style="color:#24292E;">(property, {moduleId}) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (property </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;testKey&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`new URL(&#39;\${</span><span style="color:#24292E;">path</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">relative</span><span style="color:#032F62;">(</span><span style="color:#24292E;">process</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">cwd</span><span style="color:#032F62;">(), </span><span style="color:#24292E;">moduleId</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}&#39;, document.baseURI).href\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="resolvefileurl" tabindex="-1">resolveFileUrl <a class="header-anchor" href="#resolvefileurl" aria-label="Permalink to &quot;resolveFileUrl&quot;">​</a></h3><p><strong>插件示例</strong></p><p>参数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  chunkId, fileName, format, moduleId, referenceId, relativePath;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  chunkId, fileName, format, moduleId, referenceId, relativePath;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;resolveFileUrl&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolveFileUrl</span><span style="color:#E1E4E8;">({fileName}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`new URL(&#39;\${</span><span style="color:#E1E4E8;">fileName</span><span style="color:#9ECBFF;">}&#39;, document.baseURI).href\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;resolveFileUrl&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolveFileUrl</span><span style="color:#24292E;">({fileName}) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`new URL(&#39;\${</span><span style="color:#24292E;">fileName</span><span style="color:#032F62;">}&#39;, document.baseURI).href\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="renderchunk" tabindex="-1">renderChunk <a class="header-anchor" href="#renderchunk" aria-label="Permalink to &quot;renderChunk&quot;">​</a></h3><p><strong>插件示例</strong></p><p>参数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  code, </span><span style="color:#6A737D;">// chunk代码</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunk, </span><span style="color:#6A737D;">// chunk的一些信息</span></span>
<span class="line"><span style="color:#E1E4E8;">    options; </span><span style="color:#6A737D;">// outputOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  code, </span><span style="color:#6A737D;">// chunk代码</span></span>
<span class="line"><span style="color:#24292E;">    chunk, </span><span style="color:#6A737D;">// chunk的一些信息</span></span>
<span class="line"><span style="color:#24292E;">    options; </span><span style="color:#6A737D;">// outputOptions</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 写法1</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;renderChunk&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderChunk</span><span style="color:#E1E4E8;">({ code }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// change cdoe</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        code,</span></span>
<span class="line"><span style="color:#E1E4E8;">        map</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 写法2</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;renderChunk&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderChunk</span><span style="color:#E1E4E8;">({ code }) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// change cdoe</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/*注释*/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> code</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 写法1</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;renderChunk&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderChunk</span><span style="color:#24292E;">({ code }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// change cdoe</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        code,</span></span>
<span class="line"><span style="color:#24292E;">        map</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 写法2</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;renderChunk&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderChunk</span><span style="color:#24292E;">({ code }) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// change cdoe</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/*注释*/&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> code</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="generatebundle" tabindex="-1">generateBundle <a class="header-anchor" href="#generatebundle" aria-label="Permalink to &quot;generateBundle&quot;">​</a></h3><p><strong>插件示例</strong></p><p>参数：</p><ul><li><p>outputOptions</p></li><li><p>ChunkInfo or AssetInfo</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// AssetInfo</span></span>
<span class="line"><span style="color:#B392F0;">moduleId</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fileName</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Uint8Array,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;asset&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ChunkInfo</span></span>
<span class="line"><span style="color:#B392F0;">moduleId</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">code</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dynamicImports</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">exports</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">facadeModuleId</span><span style="color:#E1E4E8;">: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fileName</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">implicitlyLoadedBefore</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">imports</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">importedBindings</span><span style="color:#E1E4E8;">: {[imported: string]: string[]},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isDynamicEntry</span><span style="color:#E1E4E8;">: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isEntry</span><span style="color:#E1E4E8;">: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">isImplicitEntry</span><span style="color:#E1E4E8;">: boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">: SourceMap </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">modules</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    [id: string]: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      renderedExports: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">      removedExports: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">      renderedLength: number,</span></span>
<span class="line"><span style="color:#E1E4E8;">      originalLength: number,</span></span>
<span class="line"><span style="color:#E1E4E8;">      code: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">referencedFiles</span><span style="color:#E1E4E8;">: string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;chunk&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// AssetInfo</span></span>
<span class="line"><span style="color:#6F42C1;">moduleId</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fileName</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">source</span><span style="color:#24292E;">: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Uint8Array,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;asset&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ChunkInfo</span></span>
<span class="line"><span style="color:#6F42C1;">moduleId</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">code</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dynamicImports</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">exports</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">facadeModuleId</span><span style="color:#24292E;">: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fileName</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">implicitlyLoadedBefore</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">imports</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">importedBindings</span><span style="color:#24292E;">: {[imported: string]: string[]},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isDynamicEntry</span><span style="color:#24292E;">: boolean,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isEntry</span><span style="color:#24292E;">: boolean,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">isImplicitEntry</span><span style="color:#24292E;">: boolean,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">: SourceMap </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">modules</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    [id: string]: {</span></span>
<span class="line"><span style="color:#24292E;">      renderedExports: string[],</span></span>
<span class="line"><span style="color:#24292E;">      removedExports: string[],</span></span>
<span class="line"><span style="color:#24292E;">      renderedLength: number,</span></span>
<span class="line"><span style="color:#24292E;">      originalLength: number,</span></span>
<span class="line"><span style="color:#24292E;">      code: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">referencedFiles</span><span style="color:#24292E;">: string[],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;chunk&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;generateBundle&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">generateBundle</span><span style="color:#E1E4E8;">(options, info) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> info[</span><span style="color:#9ECBFF;">&#39;app.js&#39;</span><span style="color:#E1E4E8;">]  </span><span style="color:#6A737D;">// 直接删除app.js chunk最后不会生成</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;generateBundle&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">generateBundle</span><span style="color:#24292E;">(options, info) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> info[</span><span style="color:#032F62;">&#39;app.js&#39;</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;">// 直接删除app.js chunk最后不会生成</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="writebundle" tabindex="-1">writeBundle <a class="header-anchor" href="#writebundle" aria-label="Permalink to &quot;writeBundle&quot;">​</a></h3><p>与<code>generateBundle</code>相似， 但是此时 chunk 已经生成，无法修改</p><h2 id="插件上下文" tabindex="-1">插件上下文 <a class="header-anchor" href="#插件上下文" aria-label="Permalink to &quot;插件上下文&quot;">​</a></h2><p>在 rollup 中每个插件都有自己的插件上下文，他具体又有什么用呢举个例子</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">private runHookSync&lt;</span><span style="color:#B392F0;">H</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SyncPluginHooks</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">plugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.plugins[pluginIndex];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> plugin[hookName];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#FFAB70;">if</span><span style="color:#E1E4E8;"> (!</span><span style="color:#FFAB70;">hook</span><span style="color:#E1E4E8;">) return undefined as any;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pluginContexts[pluginIndex];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (hookContext) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            context </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hookContext</span><span style="color:#E1E4E8;">(context, plugin);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> hook </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throwInvalidHookError</span><span style="color:#E1E4E8;">(hookName, plugin.name);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 关键看这里通过apply将插件的this指向了context</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (hook </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(context, args);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throwPluginError</span><span style="color:#E1E4E8;">(err, plugin.name, { hook: hookName });</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">private runHookSync&lt;</span><span style="color:#6F42C1;">H</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SyncPluginHooks</span><span style="color:#24292E;">&gt;(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">plugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.plugins[pluginIndex];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">const</span><span style="color:#24292E;"> </span><span style="color:#E36209;">hook</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> plugin[hookName];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#E36209;">if</span><span style="color:#24292E;"> (!</span><span style="color:#E36209;">hook</span><span style="color:#24292E;">) return undefined as any;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pluginContexts[pluginIndex];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (hookContext) {</span></span>
<span class="line"><span style="color:#24292E;">            context </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hookContext</span><span style="color:#24292E;">(context, plugin);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> hook </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throwInvalidHookError</span><span style="color:#24292E;">(hookName, plugin.name);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 关键看这里通过apply将插件的this指向了context</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (hook </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(context, args);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (err) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throwPluginError</span><span style="color:#24292E;">(err, plugin.name, { hook: hookName });</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>至于<code>context</code>是什么，大家可以定位到<code>src/utils/PluginContext.ts</code>文件中</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">context</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addWatchFile</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#E1E4E8;">    cache: cacheInstance,</span></span>
<span class="line"><span style="color:#E1E4E8;">    emitAsset: </span><span style="color:#B392F0;">getDeprecatedContextHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    emitChunk: </span><span style="color:#B392F0;">getDeprecatedContextHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    emitFile: fileEmitter.emitFile,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    getAssetFileName: </span><span style="color:#B392F0;">getDeprecatedContextHandler</span><span style="color:#E1E4E8;">(...),</span></span>
<span class="line"><span style="color:#E1E4E8;">    getChunkFileName: </span><span style="color:#B392F0;">getDeprecatedContextHandler</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    getFileName: fileEmitter.getFileName,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getModuleIds</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> graph.modulesById.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    getModuleInfo: graph.getModuleInfo,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getWatchFiles</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(graph.watchFiles),</span></span>
<span class="line"><span style="color:#E1E4E8;">    isExternal: </span><span style="color:#B392F0;">getDeprecatedContextHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    meta: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rollupVersion,</span></span>
<span class="line"><span style="color:#E1E4E8;">        watchMode: graph.watchMode</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">moduleIds</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> graph.modulesById.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">wrappedModuleIds</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    parse: graph.contextParse,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">importer</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">custom</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">skipSelf</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">BLANK</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> graph.moduleLoader.</span><span style="color:#B392F0;">resolveId</span><span style="color:#E1E4E8;">(source, importer, custom, skipSelf </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> pidx </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    resolveId: </span><span style="color:#B392F0;">getDeprecatedContextHandler</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    setAssetSource: fileEmitter.setAssetSource,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">warning</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">context</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PluginContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addWatchFile</span><span style="color:#24292E;">(</span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {},</span></span>
<span class="line"><span style="color:#24292E;">    cache: cacheInstance,</span></span>
<span class="line"><span style="color:#24292E;">    emitAsset: </span><span style="color:#6F42C1;">getDeprecatedContextHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    emitChunk: </span><span style="color:#6F42C1;">getDeprecatedContextHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    emitFile: fileEmitter.emitFile,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#E36209;">err</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    getAssetFileName: </span><span style="color:#6F42C1;">getDeprecatedContextHandler</span><span style="color:#24292E;">(...),</span></span>
<span class="line"><span style="color:#24292E;">    getChunkFileName: </span><span style="color:#6F42C1;">getDeprecatedContextHandler</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    getFileName: fileEmitter.getFileName,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getModuleIds</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> graph.modulesById.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    getModuleInfo: graph.getModuleInfo,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getWatchFiles</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(graph.watchFiles),</span></span>
<span class="line"><span style="color:#24292E;">    isExternal: </span><span style="color:#6F42C1;">getDeprecatedContextHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    meta: {</span></span>
<span class="line"><span style="color:#24292E;">        rollupVersion,</span></span>
<span class="line"><span style="color:#24292E;">        watchMode: graph.watchMode</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">get</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">moduleIds</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">moduleIds</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> graph.modulesById.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">wrappedModuleIds</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    parse: graph.contextParse,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#E36209;">source</span><span style="color:#24292E;">, </span><span style="color:#E36209;">importer</span><span style="color:#24292E;">, { </span><span style="color:#E36209;">custom</span><span style="color:#24292E;">, </span><span style="color:#E36209;">skipSelf</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">BLANK</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> graph.moduleLoader.</span><span style="color:#6F42C1;">resolveId</span><span style="color:#24292E;">(source, importer, custom, skipSelf </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> pidx </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    resolveId: </span><span style="color:#6F42C1;">getDeprecatedContextHandler</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">    setAssetSource: fileEmitter.setAssetSource,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">warning</span><span style="color:#24292E;">) {}</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>也就是说我们可以在插件中直接通过<code>this.xxx</code>来调用上面的方法。他们都可以在各个 hook 中进行调用。下面进行介绍</p><h3 id="addwatchfile" tabindex="-1">addWatchFile <a class="header-anchor" href="#addwatchfile" aria-label="Permalink to &quot;addWatchFile&quot;">​</a></h3><p>用于动态添加对文件的监听，可以在<code>buildStart</code>、<code>load</code>、<code>resolveId</code>和<code>transform</code>中使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;addWatchFile&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 监听a.js文件的变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addWatchFile</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a.js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;addWatchFile&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 监听a.js文件的变化</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">addWatchFile</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a.js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="emitfile" tabindex="-1">emitFile <a class="header-anchor" href="#emitfile" aria-label="Permalink to &quot;emitFile&quot;">​</a></h3><p><a href="https://rollupjs.org/guide/en/#thisemitfileemittedfile-emittedchunk--emittedasset--string" target="_blank" rel="noreferrer">文档地址</a></p><p>发射一个文件到最后的打包中，并且会返回一个<code>referenceId</code>,支持两种对象传参</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;chunk&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fileName</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  implicitlyLoadedAfterOneOf</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string[],</span></span>
<span class="line"><span style="color:#E1E4E8;">  importer</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  preserveSignature</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;strict&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;allow-extension&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;exports-only&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// EmittedAsset</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;asset&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fileName</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string,</span></span>
<span class="line"><span style="color:#E1E4E8;">  source</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Uint8Array</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;chunk&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">: string,</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  fileName</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  implicitlyLoadedAfterOneOf</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string[],</span></span>
<span class="line"><span style="color:#24292E;">  importer</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  preserveSignature</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;strict&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;allow-extension&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;exports-only&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// EmittedAsset</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;asset&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  fileName</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string,</span></span>
<span class="line"><span style="color:#24292E;">  source</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Uint8Array</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="error" tabindex="-1">error <a class="header-anchor" href="#error" aria-label="Permalink to &quot;error&quot;">​</a></h3><p>参数：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">load</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 抛出错误并显示 几行几列</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error message&#39;</span><span style="color:#E1E4E8;">), { column: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, line: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">load</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 抛出错误并显示 几行几列</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error message&#39;</span><span style="color:#24292E;">), { column: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, line: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="getcombinedsourcemap" tabindex="-1">getCombinedSourcemap <a class="header-anchor" href="#getcombinedsourcemap" aria-label="Permalink to &quot;getCombinedSourcemap&quot;">​</a></h3><p>用于获取 sourceMap，并且只能在<code>transform hook</code>中使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;getCombinedSourcemap&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 获取sourceMap</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getCombinedSourcemap</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;getCombinedSourcemap&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 获取sourceMap</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getCombinedSourcemap</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="getfilename" tabindex="-1">getFileName <a class="header-anchor" href="#getfilename" aria-label="Permalink to &quot;getFileName&quot;">​</a></h3><p>获取通过<code>this.emitFile</code>文件发出的块或资源的文件名。文件名将相对于<code>outputOptions.dir</code>。</p><h3 id="getmoduleids" tabindex="-1">getModuleIds <a class="header-anchor" href="#getmoduleids" aria-label="Permalink to &quot;getModuleIds&quot;">​</a></h3><p>获取所有模块完整路径,需要注意的是，它返回的是个迭代器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;getModuleIds&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderStart</span><span style="color:#E1E4E8;">(outputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getModuleIds</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// get id</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;getModuleIds&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderStart</span><span style="color:#24292E;">(outputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getModuleIds</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// get id</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="getmoduleinfo" tabindex="-1">getModuleInfo <a class="header-anchor" href="#getmoduleinfo" aria-label="Permalink to &quot;getModuleInfo&quot;">​</a></h3><p>获取模块 info, 例如可以搭配<code>getModuleIds</code>使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;getModuleInfo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderStart</span><span style="color:#E1E4E8;">(outputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getModuleIds</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">moduleInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getModuleInfo</span><span style="color:#E1E4E8;">(id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;getModuleInfo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderStart</span><span style="color:#24292E;">(outputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getModuleIds</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">moduleInfo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getModuleInfo</span><span style="color:#24292E;">(id)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="getwatchfiles" tabindex="-1">getWatchFiles <a class="header-anchor" href="#getwatchfiles" aria-label="Permalink to &quot;getWatchFiles&quot;">​</a></h3><p>获取所有被监听变化的文件路径 id, 包括通过<code>addWatchFile</code>添加的文件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;getWatchFiles&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">renderStart</span><span style="color:#E1E4E8;">(outputOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">watchIds</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getWatchFiles</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;getWatchFiles&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">renderStart</span><span style="color:#24292E;">(outputOptions) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">watchIds</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getWatchFiles</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h3><p>用于编译代码，并返回 ast</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;parse&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(code) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(code)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// transform ast</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;parse&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(code) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(code)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// transform ast</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="resolve" tabindex="-1">resolve <a class="header-anchor" href="#resolve" aria-label="Permalink to &quot;resolve&quot;">​</a></h3><p>用于解析传入参数的完整路径,以及其他参数，它会经过所有的<code>resolveId hook</code>处理</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;parse&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">buildStart</span><span style="color:#E1E4E8;">(code) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        id, </span><span style="color:#6A737D;">// 要解析的文件路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        importer, </span><span style="color:#6A737D;">// 基于哪个目录解析</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            skipSelf: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否跳过resolveId Hook</span></span>
<span class="line"><span style="color:#E1E4E8;">            custom: {} </span><span style="color:#6A737D;">// 用户自定义参数，会传给每个resolveId Hook</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;parse&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">buildStart</span><span style="color:#24292E;">(code) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        id, </span><span style="color:#6A737D;">// 要解析的文件路径</span></span>
<span class="line"><span style="color:#24292E;">        importer, </span><span style="color:#6A737D;">// 基于哪个目录解析</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            skipSelf: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否跳过resolveId Hook</span></span>
<span class="line"><span style="color:#24292E;">            custom: {} </span><span style="color:#6A737D;">// 用户自定义参数，会传给每个resolveId Hook</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="setassetsource" tabindex="-1">setAssetSource <a class="header-anchor" href="#setassetsource" aria-label="Permalink to &quot;setAssetSource&quot;">​</a></h3><p>设置 assets 资源的代码，例如我们通过<code>this.emitFile</code>发射一个文件，返回了 referanceId，可以通过这个 id 修改资源代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setAssetSource</span><span style="color:#E1E4E8;">(referenceId: string, source: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Uint8Array) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">setAssetSource</span><span style="color:#24292E;">(referenceId: string, source: string </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> Uint8Array) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span></span></code></pre></div>`,126),r=[e,c,t];function E(y,i,F,d,u,h){return l(),p("div",null,r)}const B=a(o,[["render",E]]);export{A as __pageData,B as default};
