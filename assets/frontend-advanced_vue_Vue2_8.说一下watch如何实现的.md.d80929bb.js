import{_ as e,o as a,c as t,Q as c}from"./chunks/framework.3d945e71.js";const w=JSON.parse('{"title":"8.说一下 watch 如何实现的","description":"","frontmatter":{"order":8},"headers":[],"relativePath":"frontend-advanced/vue/Vue2/8.说一下watch如何实现的.md","filePath":"frontend-advanced/vue/Vue2/8.说一下watch如何实现的.md","lastUpdated":1730984667000}'),o={name:"frontend-advanced/vue/Vue2/8.说一下watch如何实现的.md"},r=c('<h1 id="_8-说一下-watch-如何实现的" tabindex="-1">8.说一下 watch 如何实现的 <a class="header-anchor" href="#_8-说一下-watch-如何实现的" aria-label="Permalink to &quot;8.说一下 watch 如何实现的&quot;">​</a></h1><h2 id="核心答案" tabindex="-1">核心答案 <a class="header-anchor" href="#核心答案" aria-label="Permalink to &quot;核心答案&quot;">​</a></h2><ol><li>不管任何形式的 watch 最终都会调用<code>$watch</code></li><li>$watch 依赖响应式系统的<code>Watcher</code>，首先会创建一个<code>user watcher</code>, 初始化时会调用 getter，触发响应式变量依赖收集</li><li>当修改响应式变量，触发 setter，最终会调用用户回调</li></ol>',3),_=[r];function d(n,h,s,i,l,u){return a(),t("div",null,_)}const p=e(o,[["render",d]]);export{w as __pageData,p as default};
