import{_ as e,o as a,c as r,Q as t}from"./chunks/framework.3d945e71.js";const m=JSON.parse('{"title":"prefetch和preload","description":"","frontmatter":{},"headers":[],"relativePath":"frontend-engineering/前端性能优化/网络优化/prefetch和preload.md","filePath":"frontend-engineering/前端性能优化/网络优化/prefetch和preload.md","lastUpdated":1712235783000}'),o={name:"frontend-engineering/前端性能优化/网络优化/prefetch和preload.md"},p=t('<h1 id="prefetch和preload" tabindex="-1">prefetch和preload <a class="header-anchor" href="#prefetch和preload" aria-label="Permalink to &quot;prefetch和preload&quot;">​</a></h1><h2 id="preload-提前加载" tabindex="-1">preload 提前加载 <a class="header-anchor" href="#preload-提前加载" aria-label="Permalink to &quot;preload 提前加载&quot;">​</a></h2><p>优先级：高</p><p>preload 顾名思义就是一种预加载的方式，它通过声明向浏览器声明一个需要提前加载的资源，当资源真正被使用的时候立即执行，就无需等待网络的消耗。</p><h2 id="prefetch" tabindex="-1">prefetch <a class="header-anchor" href="#prefetch" aria-label="Permalink to &quot;prefetch&quot;">​</a></h2><p>优先级：低</p><p>prefetch 会告诉浏览器未来可能会使用到的某个资源，浏览器就会在闲时去加载对应的资源。</p>',7),n=[p];function d(c,l,h,i,f,s){return a(),r("div",null,n)}const u=e(o,[["render",d]]);export{m as __pageData,u as default};
