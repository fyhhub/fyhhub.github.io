import{_ as l,o as n,c as e,Q as t}from"./chunks/framework.968e3df4.js";const h=JSON.parse('{"title":"3.npm install 的执行流程","description":"","frontmatter":{},"headers":[],"relativePath":"interview/面试题合集/3.npm install的执行流程.md","filePath":"interview/面试题合集/3.npm install的执行流程.md","lastUpdated":1693926354000}'),s={name:"interview/面试题合集/3.npm install的执行流程.md"},a=t('<h1 id="_3-npm-install-的执行流程" tabindex="-1">3.npm install 的执行流程 <a class="header-anchor" href="#_3-npm-install-的执行流程" aria-label="Permalink to &quot;3.npm install 的执行流程&quot;">​</a></h1><p>输入 npm install 命令并敲下回车后，会经历下面的几个阶段:</p><ol><li><p><strong>执行工程自身 preinstall</strong>, 当前 npm 工程如果定义了 preinstall 钩子，此时会被执行</p></li><li><p><strong>确定首层依赖模块</strong>, 也就是 dependencies 和 devDependencies 属性中直接指定的模块, npm 会开启多进程从每个首层依赖模块开始逐步寻找更深层级的节点</p></li><li><p><strong>获取模块</strong>, 获取模块是一个递归的过程，分为以下几步：</p></li></ol><ul><li><code>获取模块信息</code>: 在下载一个模块之前，首先要明确其版本，这是因为 package.json 中往往是 semantic version(语义化版本 semver)。此时如果版本描述文件中有该模块信息直接拿即可，如果没有则从仓库中获取。如 package.json 中某个包的版本是 ^1.1.0,npm 就会去仓库中获取符合 1.1.0 形式的版本</li><li><code>获取模块实体</code>: 上一步会获取到模块的压缩包地址(resolved 字段)，npm 会用此地址检查本地缓存，缓存中有就直接拿，如果没有则从仓库中下载。</li><li><code>查找该模块依赖</code>: 如果有依赖就回到第一步，如果没有就停止</li></ul><ol start="4"><li><strong>模块扁平化</strong></li></ol><p>上一步获取到的是一棵完整的依赖树，其中可能包含大量重复模块。比如 A 模块依赖 lodash，B 模块同样依赖 lodash。在 npm3 以前会严格按照依赖树的结构进行安装，因为会造成模块冗余。</p><p>从 npm3 开始默认加入了一个 dedupe 的过程。它会遍历所有的节点，逐个将模块放在根节点下面，也就是 node_modules 的第一层。当发现有重复模块时，则将其丢弃。</p><p>这里需要对重复模块进行一个定义，它指的是模块名相同且语义化版本兼容。每个语义化版本都对应一段版本允许范围，如果两个模块的版本允许范围存在交集，那么就可以得到一个兼容版本，而不必版本号完全一致，这可以使更多冗余模块在 dedupe 过程中被去掉。</p><ol start="5"><li><strong>安装模块</strong></li></ol><p>这一步将会更新工程中的 node_modules,并执行模块中的生命周期函数(按照 preinstall、install、postinstall 的顺序)</p><ol start="6"><li><strong>执行工程自身的生命周期</strong></li></ol><p>当前 npm 工程如果定义钩子此时会被执行(按照 install、postinstall、prepublish、prepare 的顺序)。最后一步是生成或更新版本描述文件，npm install 过程完成</p>',12),i=[a];function o(p,r,d,_,c,m){return n(),e("div",null,i)}const u=l(s,[["render",o]]);export{h as __pageData,u as default};
