import{_ as s,o,c as a,Q as l}from"./chunks/framework.3d945e71.js";const k=JSON.parse('{"title":"docker的基本使用","description":"","frontmatter":{},"headers":[],"relativePath":"backend/Docker/docker的基本使用.md","filePath":"backend/Docker/docker的基本使用.md","lastUpdated":1731060708000}'),e={name:"backend/Docker/docker的基本使用.md"},p=l(`<h1 id="docker的基本使用" tabindex="-1">docker的基本使用 <a class="header-anchor" href="#docker的基本使用" aria-label="Permalink to &quot;docker的基本使用&quot;">​</a></h1><h2 id="_1-docker命令汇总" tabindex="-1">1. docker命令汇总 <a class="header-anchor" href="#_1-docker命令汇总" aria-label="Permalink to &quot;1. docker命令汇总&quot;">​</a></h2><p>Docker 提供了各种命令来管理容器、镜像、网络、卷以及其他 Docker 相关的操作。以下是一些常见的 Docker 命令以及它们的用途：</p><p><strong>容器命令:</strong></p><ol><li><p><code>docker run</code>: 创建并启动一个容器。</p></li><li><p><code>docker start</code>: 启动一个已经创建的容器。</p></li><li><p><code>docker stop</code>: 停止一个正在运行的容器。</p></li><li><p><code>docker restart</code>: 重启一个容器。</p></li><li><p><code>docker pause</code>: 暂停一个容器的执行。</p></li><li><p><code>docker unpause</code>: 恢复一个暂停的容器。</p></li><li><p><code>docker exec</code>: 在正在运行的容器中执行命令。</p></li><li><p><code>docker attach</code>: 连接到正在运行的容器的标准输入、输出和错误流。</p></li><li><p><code>docker rm</code>: 删除一个或多个容器。</p></li><li><p><code>docker ps</code>: 列出正在运行的容器。</p></li><li><p><code>docker ps -a</code>: 列出所有容器，包括已停止的容器。</p></li></ol><p><strong>镜像命令:</strong></p><ol start="12"><li><p><code>docker images</code> 或 <code>docker image ls</code>: 列出本地存储的 Docker 镜像。</p></li><li><p><code>docker pull</code>: 拉取一个 Docker 镜像到本地。</p></li><li><p><code>docker push</code>: 推送一个本地镜像到 Docker 镜像仓库。</p></li><li><p><code>docker build</code>: 基于 Dockerfile 创建一个新的 Docker 镜像。</p></li><li><p><code>docker rmi</code>: 删除一个或多个本地 Docker 镜像。</p></li></ol><p><strong>网络命令:</strong></p><ol start="17"><li><p><code>docker network ls</code>: 列出 Docker 网络。</p></li><li><p><code>docker network create</code>: 创建一个新的 Docker 网络。</p></li><li><p><code>docker network connect</code>: 将容器连接到一个网络。</p></li><li><p><code>docker network disconnect</code>: 将容器从一个网络断开连接。</p></li></ol><p><strong>卷命令:</strong></p><ol start="21"><li><p><code>docker volume ls</code>: 列出 Docker 卷。</p></li><li><p><code>docker volume create</code>: 创建一个新的 Docker 卷。</p></li><li><p><code>docker volume rm</code>: 删除一个或多个 Docker 卷。</p></li></ol><p><strong>系统和信息命令:</strong></p><ol start="24"><li><p><code>docker version</code>: 显示 Docker 版本信息。</p></li><li><p><code>docker info</code>: 显示 Docker 系统信息。</p></li><li><p><code>docker inspect</code>: 获取有关容器、镜像、卷、网络等的详细信息。</p></li><li><p><code>docker logs</code>: 获取容器的日志。</p></li><li><p><code>docker events</code>: 显示 Docker 事件流。</p></li></ol><p>这些是一些常见的 Docker 命令，Docker 还提供了许多其他命令和选项，用于执行更多复杂的操作和配置。你可以在终端中输入 <code>docker --help</code> 或 <code>docker &lt;command&gt; --help</code> 来获取有关特定命令的详细帮助信息。</p><h2 id="_2-镜像" tabindex="-1">2. 镜像 <a class="header-anchor" href="#_2-镜像" aria-label="Permalink to &quot;2. 镜像&quot;">​</a></h2><h3 id="_2-1-拉取镜像" tabindex="-1">2.1 拉取镜像 <a class="header-anchor" href="#_2-1-拉取镜像" aria-label="Permalink to &quot;2.1 拉取镜像&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拉取最新版本镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx:1.21</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拉取指定版本</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">registry.example.com/my-image</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 拉取指定仓库的镜像</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拉取最新版本镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx:1.21</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拉取指定版本</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">registry.example.com/my-image</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 拉取指定仓库的镜像</span></span></code></pre></div><h3 id="_2-2-查看镜像" tabindex="-1">2.2 查看镜像 <a class="header-anchor" href="#_2-2-查看镜像" aria-label="Permalink to &quot;2.2 查看镜像&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">images</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">images</span></span></code></pre></div><h3 id="_2-3-删除镜像" tabindex="-1">2.3 删除镜像 <a class="header-anchor" href="#_2-3-删除镜像" aria-label="Permalink to &quot;2.3 删除镜像&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rmi</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 删除镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rmi</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">镜像id</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 指定镜像id后，删除镜像</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nginx</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 删除镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">镜像id</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 指定镜像id后，删除镜像</span></span></code></pre></div><h2 id="_3-容器" tabindex="-1">3. 容器 <a class="header-anchor" href="#_3-容器" aria-label="Permalink to &quot;3. 容器&quot;">​</a></h2><h3 id="_3-1-启动容器" tabindex="-1">3.1 启动容器 <a class="header-anchor" href="#_3-1-启动容器" aria-label="Permalink to &quot;3.1 启动容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> [选项] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">镜像名称</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [选项] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">镜像名称</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><ul><li><code>[选项]</code> 是可选的容器运行选项，如端口映射、卷挂载等。</li><li><code>&lt;镜像名称&gt;</code> 是要使用的 Docker 镜像的名称。</li></ul><ol><li><p><code>-d</code> 或 <code>--detach</code>: 以后台（守护进程）模式运行容器，使容器在后台运行，不占用当前终端会话。</p></li><li><p><code>--name &lt;容器名称&gt;</code>: 为容器指定一个自定义的名称。</p></li><li><p><code>-p &lt;主机端口&gt;:&lt;容器端口&gt;</code>: 将容器的端口映射到主机的端口，允许从主机访问容器内的服务。</p></li><li><p><code>-v &lt;主机路径&gt;:&lt;容器路径&gt;</code>: 挂载卷，将主机文件或目录挂载到容器内，以实现数据持久性或共享数据。</p></li><li><p><code>-e</code> 或 <code>--env</code>: 设置容器的环境变量，可以用来配置容器内应用程序的行为,例如：</p></li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">VAR1=value1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">VAR2=value2</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">VAR3=value3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_image</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">VAR1=value1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">VAR2=value2</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">VAR3=value3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_image</span></span></code></pre></div><ol start="6"><li><p><code>--rm</code>: 当容器停止时自动删除容器。通常用于临时容器，以避免在容器停止后留下未使用的容器。</p></li><li><p><code>--network &lt;网络名称&gt;</code>: 将容器连接到指定的 Docker 网络，允许容器之间进行通信。</p></li><li><p><code>--link &lt;容器名称或ID&gt;:&lt;别名&gt;</code>: 连接到其他容器，使容器能够通过别名访问其他容器的服务。</p></li><li><p><code>-i</code> 或 <code>--interactive</code>: 保持容器的标准输入（stdin）打开，通常与 <code>-t</code> 一起使用以获得交互式 shell。</p></li><li><p><code>-t</code> 或 <code>--tty</code>: 分配一个伪终端（tty），通常与 <code>-i</code> 一起使用以获得交互式 shell。</p></li><li><p><code>--entrypoint &lt;覆盖默认入口命令&gt;</code>: 覆盖容器的默认入口命令。</p></li><li><p><code>--user &lt;用户名或UID&gt;</code>: 指定容器中运行应用程序的用户。</p></li><li><p><code>--workdir &lt;工作目录&gt;</code>: 设置容器中应用程序的工作目录。</p></li><li><p><code>-c</code> 或 <code>--cpu-shares</code>: 为容器分配 CPU 资源的权重。</p></li><li><p><code>--memory</code>: 限制容器使用的内存量。</p></li><li><p><code>--restart &lt;策略&gt;</code>: 配置容器的重启策略，包括无、总是、故障时等选项。</p></li></ol><p><strong>启动一个nginx</strong></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8081</span><span style="color:#9ECBFF;">:80</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/tmp/nginx-temp:/usr/share/nginx/html</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;NGINX_TEST=123&quot;</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">nginx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8081</span><span style="color:#032F62;">:80</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/tmp/nginx-temp:/usr/share/nginx/html</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;NGINX_TEST=123&quot;</span><span style="color:#24292E;">  </span><span style="color:#032F62;">nginx</span></span></code></pre></div><h3 id="_3-2-查看容器" tabindex="-1">3.2 查看容器 <a class="header-anchor" href="#_3-2-查看容器" aria-label="Permalink to &quot;3.2 查看容器&quot;">​</a></h3><p><code>docker ps</code> 命令用于列出容器的信息，包括正在运行的容器。以下是一些常用的 <code>docker ps</code> 命令的用法和选项：</p><ol><li><p><code>-a</code> 或 <code>--all</code>: 列出所有容器，包括已停止的容器。默认情况下，只显示正在运行的容器。</p></li><li><p><code>-q</code> 或 <code>--quiet</code>: 仅显示容器的ID，而不显示容器的详细信息。</p></li><li><p><code>--no-trunc</code>: 显示完整的容器命令，而不截断长命令。</p></li><li><p><code>-n &lt;number&gt;</code>: 仅显示最后N个容器，例如，<code>-n 5</code> 会显示最后5个容器。</p></li><li><p><code>-f</code> 或 <code>--filter</code>: 使用过滤器来过滤容器，例如，<code>-f &quot;status=running&quot;</code> 可以列出状态为运行中的容器。</p></li><li><p><code>--format</code>: 自定义输出格式，允许你定义输出中显示的字段和格式</p></li><li><p><code>--last &lt;number&gt;</code>: 仅显示最后N个容器的信息，类似于 <code>-n</code> 选项，但逆序列出容器。</p></li><li><p><code>--latest</code>, <code>-l</code> 或 <code>--last</code>: 列出最后一个创建的容器，通常是最后一个启动的容器。</p></li><li><p><code>--no-trunc</code>: 显示完整的容器命令，而不截断长命令。</p></li><li><p><code>--size</code>: 显示容器的大小信息，包括文件系统和卷的大小。</p></li></ol><p><strong>查看容器详情</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">inspect</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">容器id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器id</span></span></code></pre></div><h3 id="_3-3-容器交互" tabindex="-1">3.3 容器交互 <a class="header-anchor" href="#_3-3-容器交互" aria-label="Permalink to &quot;3.3 容器交互&quot;">​</a></h3><ul><li><strong>使用 <code>docker exec</code> 进入容器</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">容器ID或名称</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/bin/bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器ID或名称</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/bin/bash</span></span></code></pre></div></li><li><strong>使用 <code>docker attach</code> 连接到容器</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">attach</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">容器ID或名称</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">attach</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器ID或名称</span></span></code></pre></div></li></ul><h3 id="_3-4-停止容器" tabindex="-1">3.4 停止容器 <a class="header-anchor" href="#_3-4-停止容器" aria-label="Permalink to &quot;3.4 停止容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">容器id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器id</span></span></code></pre></div><h3 id="_3-5-启动停止的容器" tabindex="-1">3.5 启动停止的容器 <a class="header-anchor" href="#_3-5-启动停止的容器" aria-label="Permalink to &quot;3.5 启动停止的容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">容器id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器id</span></span></code></pre></div><h3 id="_3-6-删除容器" tabindex="-1">3.6 删除容器 <a class="header-anchor" href="#_3-6-删除容器" aria-label="Permalink to &quot;3.6 删除容器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">容器id</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">容器id</span></span></code></pre></div><h3 id="_3-7-卷操作" tabindex="-1">3.7 卷操作 <a class="header-anchor" href="#_3-7-卷操作" aria-label="Permalink to &quot;3.7 卷操作&quot;">​</a></h3><ol><li>创建 Docker 卷:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_volume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_volume</span></span></code></pre></div><ol start="2"><li>查看Docker卷列表:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span></code></pre></div><ol><li>挂载 Docker 卷到容器:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_volume:/app/data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_image</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_volume:/app/data</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_image</span></span></code></pre></div><p>这将启动一个容器，并将 <code>my_volume</code> 卷挂载到容器内的 <code>/app/data</code> 目录。</p><ol start="4"><li>查看 Docker 卷的详细信息:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">inspect</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_volume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_volume</span></span></code></pre></div><ol start="5"><li>删除 Docker 卷:</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">volume</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_volume</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">volume</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my_volume</span></span></code></pre></div><p>请注意，只有当没有容器使用该卷时才能成功删除。</p><ol start="6"><li><p>卷的持久性: Docker 卷是持久的，这意味着数据在容器被删除后仍然存在，可以供其他容器使用。这使得数据共享和数据持久性成为可能，尤其在容器编排和微服务架构中非常有用。</p></li><li><p>卷的备份和恢复: 你可以使用备份工具或命令来备份 Docker 卷的数据，以便在需要时进行恢复。一种常见的方法是使用 <code>docker cp</code> 命令将卷的数据复制到本地文件系统，然后进行备份。</p></li></ol>`,57),n=[p];function c(t,r,d,i,y,E){return o(),a("div",null,n)}const F=s(e,[["render",c]]);export{k as __pageData,F as default};
