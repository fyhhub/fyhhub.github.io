import{_ as a,o as t,c as l,k as e,a as c}from"./chunks/framework.968e3df4.js";const m=JSON.parse('{"title":"2.简单说一下 webpack 的构建流程","description":"","frontmatter":{},"headers":[],"relativePath":"interview/面试题合集/2.简单说一下webpack的构建流程.md","filePath":"interview/面试题合集/2.简单说一下webpack的构建流程.md","lastUpdated":1693924141000}'),n={name:"interview/面试题合集/2.简单说一下webpack的构建流程.md"},o=e("h1",{id:"_2-简单说一下-webpack-的构建流程",tabindex:"-1"},[c("2.简单说一下 webpack 的构建流程 "),e("a",{class:"header-anchor",href:"#_2-简单说一下-webpack-的构建流程","aria-label":'Permalink to "2.简单说一下 webpack 的构建流程"'},"​")],-1),r=e("p",null,"webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程",-1),i=e("ul",null,[e("li",null,"初始化参数：解析 webpack 配置参数，合并 shell 传入和 webpack.config.js 文件配置的参数，形成最后的配置结果；"),e("li",null,"开始编译：上一步得到的参数初始化 compiler 对象，注册所有配置的插件，插件监听 webpack 构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译；"),e("li",null,"确定入口：从配置的 entry 入口，开始解析文件构建 AST 语法树，找出依赖，递归下去；"),e("li",null,"编译模块：递归中根据文件类型和 loader 配置，调用所有配置的 loader 对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；"),e("li",null,"完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据 entry 或分包配置生成代码块 chunk；"),e("li",null,"输出完成：输出所有的 chunk 到文件系统； compiler vs lation")],-1),s=[o,r,i];function _(p,d,k,u,w,b){return t(),l("div",null,s)}const f=a(n,[["render",_]]);export{m as __pageData,f as default};
