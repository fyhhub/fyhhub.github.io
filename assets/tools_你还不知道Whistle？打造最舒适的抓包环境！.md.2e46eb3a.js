import{_ as t,o,c as p,Q as s,k as e,a}from"./chunks/framework.3d945e71.js";const W=JSON.parse('{"title":"你还不知道Whistle？打造最舒适的抓包环境！","description":"","frontmatter":{},"headers":[],"relativePath":"tools/你还不知道Whistle？打造最舒适的抓包环境！.md","filePath":"tools/你还不知道Whistle？打造最舒适的抓包环境！.md","lastUpdated":1729873804000}'),n={name:"tools/你还不知道Whistle？打造最舒适的抓包环境！.md"},l=s(`<h1 id="你还不知道whistle-打造最舒适的抓包环境" tabindex="-1">你还不知道Whistle？打造最舒适的抓包环境！ <a class="header-anchor" href="#你还不知道whistle-打造最舒适的抓包环境" aria-label="Permalink to &quot;你还不知道Whistle？打造最舒适的抓包环境！&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>大家好，本次分享的内容是Whistle抓包工具。</p><p>其实大家都有各自习惯使用的抓包工具。</p><p>常见的抓包工具，诸如<code>fiddler</code>、<code>charles</code>, 其实都不错，但是一直都不是我心中满意的抓包工具。虽然有些功能确实很强，但是其他方面又比较薄弱（比如mock功能）。再加上版权收费机制，更加劝退了白嫖党。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d0bf8704e5848318f07849b4f8691b1~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>下面我就分享一下<code>whistle</code>的强大功能吧。</p><h2 id="一、安装" tabindex="-1">一、安装 <a class="header-anchor" href="#一、安装" aria-label="Permalink to &quot;一、安装&quot;">​</a></h2><p>开局，先全局安装<code>whistle</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">g whistle</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">g whistle</span></span></code></pre></div><p>下载完成后启动</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">w2 start</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">w2 start</span></span></code></pre></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92ea9d2af4104c39a4573c09145286a4~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>然后就可以打开<code>http://127.0.0.1:8899</code>的本地站点。</p><img width="100%" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/866b18e292e94698b5d305eb3136ae27~tplv-k3u1fbpfcp-watermark.image?"><p>非常nice~ 但是现在还不能抓包，因为还没有安装证书。</p><h3 id="_1-电脑安装证书" tabindex="-1">1. 电脑安装证书 <a class="header-anchor" href="#_1-电脑安装证书" aria-label="Permalink to &quot;1. 电脑安装证书&quot;">​</a></h3><p>想要抓包https请求，那当然得先安装证书了。</p><img width="50%" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f14fdec92604855b738e300a4e78fce~tplv-k3u1fbpfcp-watermark.image?"><p><strong>注意都要勾选</strong></p><img width="50%" src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/625330b7ccd44867b76de5645b0f114d~tplv-k3u1fbpfcp-watermark.image?"><p>由于本人使用的mac电脑，就只给大家展示mac上如何配置，window可以: <a href="https://blog.csdn.net/weixin_42290966/article/details/122673654" target="_blank" rel="noreferrer">参考文章</a></p><p>点击下载后，直接双击打开</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97f153662c074242b4f4a5d95bd94d1e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>输入密码后，找到whistle证书，并设置始终信任 <img width="50%" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/509243ee5b414aa0b1ddb1ac80ec88de~tplv-k3u1fbpfcp-watermark.image?"></p><h3 id="_2-手机安装证书" tabindex="-1">2. 手机安装证书 <a class="header-anchor" href="#_2-手机安装证书" aria-label="Permalink to &quot;2. 手机安装证书&quot;">​</a></h3><p>手机设置代理步骤如下：</p><ol><li>设置代理 电脑ip:端口</li><li>扫描上面的二维码，安装证书</li><li>信任证书（此处由于各个手机型号不同，就不详细说明了，可以自行百度）</li></ol><h2 id="二、ui界面的使用" tabindex="-1">二、UI界面的使用 <a class="header-anchor" href="#二、ui界面的使用" aria-label="Permalink to &quot;二、UI界面的使用&quot;">​</a></h2><h3 id="_1-工具栏" tabindex="-1">1. 工具栏 <a class="header-anchor" href="#_1-工具栏" aria-label="Permalink to &quot;1. 工具栏&quot;">​</a></h3><p>首先我们看一下工具栏有哪些功能：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b7e9e3114f848ca9f67b23b41088f37~tplv-k3u1fbpfcp-watermark.image?" alt="" width="100%"><ul><li><p><strong>record</strong> 开启或关闭请求的记录，如果关闭就看不到请求了</p></li><li><p><strong>import</strong> 可以导入别人发给你的请求记录。实现共享！后面会介绍<code>nohost</code>，功能更加强大。</p></li><li><p><strong>export</strong> 可以导出当前鼠标选中的某个请求记录。</p></li><li><p><strong>clear</strong> 用来清除抓包记录的。</p></li><li><p><strong>replay</strong> 重新发送当前选中的请求</p></li><li><p><strong>compose</strong> 用于修改当前的请求数据</p></li><li><p><strong>setting</strong> 可以设置抓包的展示</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f565991709db4400b6c94ed7a1a7a432~tplv-k3u1fbpfcp-watermark.image?" alt="" width="50%"><p>在<code>Exclude Filter</code>和<code>Include Filter</code>中，支持多种写法</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/url1 /url2 /url3 # 用url过滤</span></span>
<span class="line"><span style="color:#e1e4e8;">   h:header1 header2 # 用header过滤</span></span>
<span class="line"><span style="color:#e1e4e8;">   s:200 # 用状态码过滤</span></span>
<span class="line"><span style="color:#e1e4e8;">   i:11 77 # 用ip过滤</span></span>
<span class="line"><span style="color:#e1e4e8;">   m:get # 用请求方法过滤</span></span>
<span class="line"><span style="color:#e1e4e8;">   b:keyword1 keyword2 # 用请求体或响应体过滤</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/url1 /url2 /url3 # 用url过滤</span></span>
<span class="line"><span style="color:#24292e;">   h:header1 header2 # 用header过滤</span></span>
<span class="line"><span style="color:#24292e;">   s:200 # 用状态码过滤</span></span>
<span class="line"><span style="color:#24292e;">   i:11 77 # 用ip过滤</span></span>
<span class="line"><span style="color:#24292e;">   m:get # 用请求方法过滤</span></span>
<span class="line"><span style="color:#24292e;">   b:keyword1 keyword2 # 用请求体或响应体过滤</span></span></code></pre></div><p><code>h:</code>、<code>m:</code>、<code>s:</code>、<code>i:</code>、<code>b:</code> 分别表示匹配<code>请求响应头</code>、<code>请求方法</code>、<code>响应状态码</code>、<code>ClientIP 及 ServerIP</code>、<code>请求响应内容</code>、<code>其它表示匹配 url(以上匹配都不区分大小写)</code>，同一行内容多个匹配用空格隔开，最多支持 3 个，表示对应的内容要同时匹配这三个关键字，不同行表示或的关系。</p></li><li><p><strong>Files</strong> 可以将请求下载成json文件</p></li><li><p><strong>weinre</strong> 远程调试h5页面，功能有bug，不好用，可忽略</p></li><li><p><strong>https</strong> 下载证书</p></li><li><p><strong>help</strong> 文档</p></li></ul><h3 id="_2-network网络面板" tabindex="-1">2. Network网络面板 <a class="header-anchor" href="#_2-network网络面板" aria-label="Permalink to &quot;2. Network网络面板&quot;">​</a></h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e79476e026a4120aed810d464472853~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>抓包时可以使用下方的筛选工具栏，快速筛选出我们想找的请求，同样支持多种匹配方式：</p><ul><li>默认模糊匹配url筛选</li><li><code>h:keyword</code> 搜索请求头和响应头</li><li><code>c:keyword</code> 搜索内容</li><li><code>p:keyword</code> 搜索请求协议</li><li><code>i:keyword</code> 搜索ip</li><li><code>m:keyword</code> 搜索method</li><li><code>s:keyword</code> 搜索状态码</li></ul><h3 id="_3-右键工具栏" tabindex="-1">3. 右键工具栏 <a class="header-anchor" href="#_3-右键工具栏" aria-label="Permalink to &quot;3. 右键工具栏&quot;">​</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/410b1204c6b142619bef1c2c593a56b3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>whistle除了顶部的工具栏还支持右键工具，特别是<code>拷贝cURL</code>，还有生成二维码都非常方便。下面大概罗列下：</p><ul><li><p><strong>open</strong> 相当于快捷操作，可以打开顶部工具栏或右侧的抓包视图</p></li><li><p><strong>copy</strong> 这个功能是用来拷贝请求中的一些信息，比较有用的是拷贝<code>cURL</code>。</p></li><li><p><strong>file</strong> 可以将请求的一些信息下载成文件</p></li><li><p><strong>remove</strong> 快捷删除其他不必要的请求记录</p></li><li><p><strong>filter</strong> 快捷筛选请求，会被保存到<code>setting</code>的配置里</p></li><li><p><strong>actions</strong> 可以重新发送请求，标记请求等。。</p></li><li><p><strong>import、export</strong> 导入或导出请求文件</p></li><li><p><strong>other</strong> 该功能只有在<code>nohost</code>中才能使用，可以分享请求给其他人，非常方便。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9f0b3fcc5c34ac2b59d83a4aa0d01ec~tplv-k3u1fbpfcp-watermark.image?" alt="" width="50%"></li></ul><p><strong>由于功能较多，推荐大家都上手操作一下！！</strong></p><h3 id="_4-抓包查看" tabindex="-1">4. 抓包查看 <a class="header-anchor" href="#_4-抓包查看" aria-label="Permalink to &quot;4. 抓包查看&quot;">​</a></h3><h4 id="_4-1-请求概览" tabindex="-1">4.1 请求概览 <a class="header-anchor" href="#_4-1-请求概览" aria-label="Permalink to &quot;4.1 请求概览&quot;">​</a></h4><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/305f0d67df54410ba73f34d9a4c646b7~tplv-k3u1fbpfcp-watermark.image?" alt="" width="50%"><p>在这里我们主要可以看到两部分：</p><ol><li><p>请求的概览</p></li><li><p>命中了哪些规则</p><p><strong>这个就非常有用了，能知道你的规则有没有写对，否则不会匹配上</strong></p></li></ol><p>那什么是规则呢？这里先跳过，后面会讲到</p><h4 id="_4-2-请求查看" tabindex="-1">4.2 请求查看 <a class="header-anchor" href="#_4-2-请求查看" aria-label="Permalink to &quot;4.2 请求查看&quot;">​</a></h4><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e48ddb7911ba4e13b3b2d4e2a0aaf84b~tplv-k3u1fbpfcp-watermark.image?" alt="" width="70%"><p>在这里我们能看到请求的所有信息。但是大家注意，可以把鼠标放到请求响应那里，我们会看到右上角有一些小功能。</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41794572a3fd4e83920e25611e6c9922~tplv-k3u1fbpfcp-watermark.image?" alt="" width="70%"><ul><li><p><strong>Copy</strong> 可以直接拷贝响应值</p></li><li><p><strong>Download</strong> 下载响应内容</p></li><li><p><strong>Key</strong></p><p>什么是<code>Key</code>呢？</p><p>首先<strong>whistle</strong>会将你的请求路径中最后一段，设置为这个数据的<code>Key</code>。然后将该数据保存到最左边的<code>Values</code>中。如下图：</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/32a85faf4d4f42e5aaf6396e54c821f4~tplv-k3u1fbpfcp-watermark.image?" alt="" width="100%"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a48d36b771bd4b91b0a22aa01c0bb851~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"><p>这块的作用，后续会讲~</p></li><li><p><strong>Text</strong> 直接展示格式化后的响应文本。推荐大家使用这种模式，不需要手动展开。</p></li></ul><h4 id="_4-3-timeline、composer" tabindex="-1">4.3 Timeline、Composer <a class="header-anchor" href="#_4-3-timeline、composer" aria-label="Permalink to &quot;4.3 Timeline、Composer&quot;">​</a></h4><p>详细用法就不多介绍了，也很简单~</p><ul><li><strong>Timeline</strong> 查看请求时间线</li><li><strong>Composer</strong> 修改请求，并重新发送。</li></ul><h4 id="_4-4-tools" tabindex="-1">4.4 Tools <a class="header-anchor" href="#_4-4-tools" aria-label="Permalink to &quot;4.4 Tools&quot;">​</a></h4><p>Tools的功能就比较强大了，能直接看到页面的console.xx日志、以及一些实用工具。</p><ul><li><strong>Console</strong></li></ul><p>支持查看页面的log日志，但是需要一些配置</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2197c4d1dee0490eb68924e424accc44~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"><p>在你的规则中添加如下代码, 前面是你的页面路径，正常直接填域名就可以了。</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1eeb26b2b02b4d058b44241925b3b1f3~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">www.baidu.com </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">www.baidu.com </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//</span></span></code></pre></div><ul><li><p><strong>Server</strong> 可以查看服务端的日志，一般不用</p></li><li><p><strong>Toolbox</strong></p><p>一些常用工具集合，如二维码生成，编码和解码等</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48a79dd469ec442182686b5efade1eaa~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"></li></ul><h2 id="三、什么是whistle规则" tabindex="-1">三、什么是Whistle规则? <a class="header-anchor" href="#三、什么是whistle规则" aria-label="Permalink to &quot;三、什么是Whistle规则?&quot;">​</a></h2><p><strong>在whistle中，规则是它最为核心的功能，可以实现非常多有用的抓包功能。</strong></p><p>我们可以在<code>Rules</code>中编写规则</p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a462ab66df8e45319b7a8201b112bcc1~tplv-k3u1fbpfcp-watermark.image?" alt="" width="100%"><p>以<code>hosts</code>为例，正常需要找到电脑中的<code>hosts</code>的文件，然后编写映射,然而，在<code>whislte</code>中你可以这么写, 并且实现了同样的效果。如：</p><pre><code>127.0.0.1 www.baidu.com
</code></pre><p>免除了我们找配置文件的麻烦，并且它的强大远不止于此。</p><p>Whistle的规则支持两种写法：</p><ol><li><p><strong>默认方式</strong></p><p>默认是将匹配模式写在左边，操作uri写在右边</p><pre><code> pattern operatorURI
</code></pre><p>whistle将请求url与pattern匹配，如果匹配到就执行operatorURI对应的操作</p></li><li><p><strong>组合方式</strong></p><p>传统hosts的配置对多个域名对于同一个ip可以采用这种方式：</p><pre><code> 127.0.0.1  www.test1.com www.test2.com www.testN.com
</code></pre><p>whistle完全兼容传统hosts配置方式，且支持更多的组合方式：</p><pre><code> # 传统组合方式
 pattern operatorURI1 operatorURI2 operatorURIN

 # 如果pattern部分为路径或域名，且operatorURI为域名或路径
 # 这种情况下也支持一个操作对应多个pattern
 operatorURI pattern1 pattern2 patternN
</code></pre></li></ol><h2 id="四、匹配模式" tabindex="-1">四、匹配模式 <a class="header-anchor" href="#四、匹配模式" aria-label="Permalink to &quot;四、匹配模式&quot;">​</a></h2><p>whistle的匹配模式(<code>pattern</code>)大体可以分成 <strong>域名、路径、正则、通配符匹配</strong>：</p><h3 id="_1-域名匹配" tabindex="-1">1. 域名匹配 <a class="header-anchor" href="#_1-域名匹配" aria-label="Permalink to &quot;1. 域名匹配&quot;">​</a></h3><pre><code># 匹配域名www.test.com下的所有请求，包括http、https、ws、wss，tunnel
www.test.com operatorURI

# 匹配域名www.test.com下的所有http请求
http://www.test.com operatorURI

# 匹配域名www.test.com下的所有https请求
https://www.test.com operatorURI

# 上述匹配也可以限定域名的端口号
www.test.com:8888 operatorURI # 8888端口
www.test.com/ operatorURI # http为80端口，其它443端口
</code></pre><h3 id="_2-路径匹配" tabindex="-1">2. 路径匹配 <a class="header-anchor" href="#_2-路径匹配" aria-label="Permalink to &quot;2. 路径匹配&quot;">​</a></h3><pre><code># 限定请求协议，只能匹配http请求
http://www.test.com/xxx operatorURI
http://www.test.com:8080/xxx operatorURI

# 匹配指定路径下的所有请求
www.test.com/xxx operatorURI
www.test.com:8080/xxx operatorURI
</code></pre><h3 id="_3-正则匹配" tabindex="-1">3. 正则匹配 <a class="header-anchor" href="#_3-正则匹配" aria-label="Permalink to &quot;3. 正则匹配&quot;">​</a></h3><pre><code>#匹配所有请求
* operatorURI

#匹配url里面包含多个关键字的请求，且忽略大小写
/keyword/i operatorURI

# 利用子匹配把url里面的参数带到匹配的操作uri
# 下面正则将把请求里面的文件名称，带到匹配的操作uri
# 最多支持10个子匹配 $0...9，其中$0表示整个请求url，其它跟正则的子匹配一样
/[^?#]/([^/]+).html/ protocol://...$1...
</code></pre><h3 id="_4-通配符匹配" tabindex="-1">4. 通配符匹配 <a class="header-anchor" href="#_4-通配符匹配" aria-label="Permalink to &quot;4. 通配符匹配&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 以www开头</span></span>
<span class="line"><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">www.example.com</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">test</span><span style="color:#6A737D;">/*** referer://http://www.test.com/$1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 限定结束位置，以www开头，以test结尾</span></span>
<span class="line"><span style="color:#6A737D;">^www.example.com/test/***test$ referer://http://www.test.com/$1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 以www开头</span></span>
<span class="line"><span style="color:#D73A49;">^</span><span style="color:#24292E;">www.example.com</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">test</span><span style="color:#6A737D;">/*** referer://http://www.test.com/$1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 限定结束位置，以www开头，以test结尾</span></span>
<span class="line"><span style="color:#6A737D;">^www.example.com/test/***test$ referer://http://www.test.com/$1</span></span></code></pre></div><h2 id="五、whistle常用操作汇总" tabindex="-1">五、Whistle常用操作汇总 <a class="header-anchor" href="#五、whistle常用操作汇总" aria-label="Permalink to &quot;五、Whistle常用操作汇总&quot;">​</a></h2><h3 id="_1-数据mock" tabindex="-1">1. 数据Mock <a class="header-anchor" href="#_1-数据mock" aria-label="Permalink to &quot;1. 数据Mock&quot;">​</a></h3><h4 id="方式1-key-values" tabindex="-1">方式1：Key-Values <a class="header-anchor" href="#方式1-key-values" aria-label="Permalink to &quot;方式1：Key-Values&quot;">​</a></h4><p>创建一个名为resData的Value</p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e33c9fe2d4e14f82892d9a25831b0556~tplv-k3u1fbpfcp-watermark.image?" alt="" width="70%"><p>然后再Rules中编写规则如下： <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5b0bfbaa83045aa8f4f0d3c441ec6a3~tplv-k3u1fbpfcp-watermark.image?" alt="" width="70%"></p><pre><code>/api/getInfo resBody://{resData}
</code></pre><p>在括号中，填写上<code>resData</code>就可以mock你在<code>Values</code>中填写的数据了。</p><p><strong>注意，括号里的名字是自己随便取的，要和Values中的Key对应上</strong></p><h4 id="方式2-模板写法" tabindex="-1">方式2：模板写法 <a class="header-anchor" href="#方式2-模板写法" aria-label="Permalink to &quot;方式2：模板写法&quot;">​</a></h4><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/915dca0e331b4e9490a8dd25026562fb~tplv-k3u1fbpfcp-watermark.image?" alt="" width="80%"><p>直接在规则里面添加\`\`\`反引号，后面跟一个变量名, 就可以定义一个模板变量（<strong>变量名一定要对应上</strong>）</p><h4 id="方式3-模板变量写法" tabindex="-1">方式3：模板变量写法 <a class="header-anchor" href="#方式3-模板变量写法" aria-label="Permalink to &quot;方式3：模板变量写法&quot;">​</a></h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d785ca446aa4903a0104939f10f9846~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>可以看到，我们在模板中使用了一些变量，例如<code>url</code>、<code>port</code>、<code>method</code>。其实这些都是whislte帮我们注入的，也就是说我们能在返回值中，直接引用请求的一些属性参数等。</p><h4 id="方式4-automock插件" tabindex="-1">方式4：automock插件 <a class="header-anchor" href="#方式4-automock插件" aria-label="Permalink to &quot;方式4：automock插件&quot;">​</a></h4><p>虽然上面的mock方式已经够简洁了，但是还不够，我们安装一个插件（注意：如果你是非前端开发者，需要安装<a href="https://nodejs.org/" target="_blank" rel="noreferrer">Node环境</a>）</p><p>首先命令行中全局安装下面的插件：</p><pre><code>npm i -g whistle.automock
</code></pre><p>找到<code>Plugins</code>里的<code>automock</code>并打开</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e910209377143de8731db4d815316a2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c97826a4503497db4a4754e5714f81e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>但是此时还不能使用，你需要去编写规则，我们以掘金为例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">api.juejin.cn</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">automock</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//href</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">/</span><span style="color:#24292E;">api.juejin.cn</span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">automock</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//href</span></span></code></pre></div><blockquote><p>这里我用了正则表达式匹配，你也可以使用前面提到的其他方式</p></blockquote><p>点击打开<code>Mock开关</code>, 然后就可以直接修改响应内容并保存了~ 相关细节大家可以自己摸索</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ac44fdd804142e895bc3ee49b23b6de~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="_2-响应状态码mock" tabindex="-1">2. 响应状态码Mock <a class="header-anchor" href="#_2-响应状态码mock" aria-label="Permalink to &quot;2. 响应状态码Mock&quot;">​</a></h3><pre><code>/api.juejin.cn\\/xxx/ replaceStatus://200
</code></pre><h3 id="_3-修改、替换js" tabindex="-1">3. 修改、替换JS <a class="header-anchor" href="#_3-修改、替换js" aria-label="Permalink to &quot;3. 修改、替换JS&quot;">​</a></h3><h4 id="场景1-添加sourcemap并debug线上原始代码" tabindex="-1">场景1：添加sourcemap并debug线上原始代码 <a class="header-anchor" href="#场景1-添加sourcemap并debug线上原始代码" aria-label="Permalink to &quot;场景1：添加sourcemap并debug线上原始代码&quot;">​</a></h4><p>继续以掘金为例，找到一个js文件资源</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a60090bf6d247deaf3b087bb4007f53~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><pre><code>//# sourceMappingURL=https://xxxx/obj/static/xxxx/e66b202.js.map
</code></pre><p>我们可以为它最后添加sourcemap, <strong>当然, 这里仅仅是个例子，需要你手动build线上的项目，获取到它的sourcemap文件。</strong></p><p><strong>Rules中的配置：</strong></p>`,120),c=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},"# 这一步为js文件插入了sourceMappingURL\n/app\\.990d7bb3\\.js/ jsAppend://`{sourcemap}` \n\n```sourcemap\n//# sourceMappingURL=${url}.map\n```\n\n/app\\.990d7bb3\\.js\\.map/ file://{sourcemapfile}\n")],-1),i=s('<p>其实就两步：</p><ul><li>注入sourceMappingURL注释</li><li>请求sourceMappingURL的文件时，返回对应的map.</li></ul><p>这里需要你在<code>Values</code>创建一个<code>Key</code>, 名为<code>sourcemapfile</code>, 里面填上你的sourcemap代码即可。</p><p>最后的效果如下：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b02c9fcf308406686da85a2f8fa7eac~tplv-k3u1fbpfcp-watermark.image?" alt="" width="100%"><p>然后你就可以愉快的调试线上代码了~</p><h4 id="场景2-修改线上代码查看运行结果" tabindex="-1">场景2：修改线上代码查看运行结果 <a class="header-anchor" href="#场景2-修改线上代码查看运行结果" aria-label="Permalink to &quot;场景2：修改线上代码查看运行结果&quot;">​</a></h4>',7),r=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},"/e66b202\\.js/ jsBody://{source}\n\n```source\n// 这里填写拷贝过来的线上代码， 然后可以直接修改\n```\n")],-1),d=e("h3",{id:"_4-修改、替换css",tabindex:"-1"},[a("4. 修改、替换CSS "),e("a",{class:"header-anchor",href:"#_4-修改、替换css","aria-label":'Permalink to "4. 修改、替换CSS"'},"​")],-1),h=e("h4",{id:"场景1-替换css文件",tabindex:"-1"},[a("场景1：替换CSS文件 "),e("a",{class:"header-anchor",href:"#场景1-替换css文件","aria-label":'Permalink to "场景1：替换CSS文件"'},"​")],-1),u=e("p",null,[a("例如"),e("code",null,"xxx.css"),a("的内容替换为"),e("code",null,"cssContent"),a("中的内容")],-1),m=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},`
/xxx.css/ cssBody://{cssContent}

\`\`\`cssContent
div {
  color: red
}
\`\`\`
`)],-1),b=e("h4",{id:"场景2-添加css内容",tabindex:"-1"},[a("场景2：添加CSS内容 "),e("a",{class:"header-anchor",href:"#场景2-添加css内容","aria-label":'Permalink to "场景2：添加CSS内容"'},"​")],-1),g=e("p",null,[a("使用"),e("code",null,"cssAppend"),a("和"),e("code",null,"cssPrepend"),a("就可以在css代码的后面和前面插入代码。")],-1),f=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},`/xxx.css/ cssAppend://{cssContent}

\`\`\`cssContent
div {
  color: red
}
\`\`\`
`)],-1),k=e("h3",{id:"_5-修改、替换html",tabindex:"-1"},[a("5. 修改、替换HTML "),e("a",{class:"header-anchor",href:"#_5-修改、替换html","aria-label":'Permalink to "5. 修改、替换HTML"'},"​")],-1),w=e("h4",{id:"场景1-注入vconsole",tabindex:"-1"},[a("场景1：注入vConsole "),e("a",{class:"header-anchor",href:"#场景1-注入vconsole","aria-label":'Permalink to "场景1：注入vConsole"'},"​")],-1),y=e("p",null,[a("这里使用了"),e("code",null,"htmlAppend")],-1),_=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},`www.baidu.com htmlAppend://{injectConsole}

\`\`\`injectConsole
<script src="https://unpkg.com/vconsole@latest/dist/vconsole.min.js"><\/script>
<script>
  var vConsole = new window.VConsole();
<\/script>
\`\`\`
`)],-1),j=e("img",{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bb174c0a1b9249d9a00e44daa41ef1d6~tplv-k3u1fbpfcp-watermark.image?",alt:"",width:"100%"},null,-1),v=e("h4",{id:"场景2-注入神策或其他需要尽早执行的sdk",tabindex:"-1"},[a("场景2：注入神策或其他需要尽早执行的SDK "),e("a",{class:"header-anchor",href:"#场景2-注入神策或其他需要尽早执行的sdk","aria-label":'Permalink to "场景2：注入神策或其他需要尽早执行的SDK"'},"​")],-1),x=e("p",null,[a("这里使用了"),e("code",null,"htmlPrepend")],-1),E=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},`juejin.cn htmlPrepend://{injectConsole}

\`\`\`injectConsole
<script src="https://cdn.bootcdn.net/ajax/libs/vConsole/3.14.7/vconsole.min.js"><\/script>
<script>
  var vConsole = new window.VConsole();
<\/script>
\`\`\`
`)],-1),q=e("h3",{id:"_7-请求转发",tabindex:"-1"},[a("7. 请求转发 "),e("a",{class:"header-anchor",href:"#_7-请求转发","aria-label":'Permalink to "7. 请求转发"'},"​")],-1),P=e("h4",{id:"场景1-测试环境代理到本地",tabindex:"-1"},[a("场景1：测试环境代理到本地 "),e("a",{class:"header-anchor",href:"#场景1-测试环境代理到本地","aria-label":'Permalink to "场景1：测试环境代理到本地"'},"​")],-1),C=e("pre",{class:"language-text","copy-code-registered":""},[e("code",{class:"hljs language-bash"},`# 先把请求转到test环境
xxx.dev.cn xxx.test.cn

# 替换dev环境请求中的token
xxx.dev.cn reqHeaders://{testTodev}
\`\`\`testTodev
authorization: 这里可以填写test环境的token
\`\`\`
`)],-1),A=s(`<h3 id="_8-log调试" tabindex="-1">8. log调试 <a class="header-anchor" href="#_8-log调试" aria-label="Permalink to &quot;8. log调试&quot;">​</a></h3><h4 id="方式1-inspect插件" tabindex="-1">方式1：inspect插件 <a class="header-anchor" href="#方式1-inspect插件" aria-label="Permalink to &quot;方式1：inspect插件&quot;">​</a></h4><p>安装<code>inspect</code>插件，可以注入<code>vConsole</code>、<code>mdebug</code>等Log日志工具</p><pre><code>npm i -g whistle.inspect
</code></pre><p>编写规则</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 默认 vConsole</span></span>
<span class="line"><span style="color:#E1E4E8;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 注入vConsole</span></span>
<span class="line"><span style="color:#E1E4E8;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//vConsole</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 注入mdebug</span></span>
<span class="line"><span style="color:#E1E4E8;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//mdebug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 注入eruda</span></span>
<span class="line"><span style="color:#E1E4E8;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//mdebug</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 默认 vConsole</span></span>
<span class="line"><span style="color:#24292E;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 注入vConsole</span></span>
<span class="line"><span style="color:#24292E;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//vConsole</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 注入mdebug</span></span>
<span class="line"><span style="color:#24292E;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//mdebug</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 注入eruda</span></span>
<span class="line"><span style="color:#24292E;">juejin.cn whistle.inspect:</span><span style="color:#6A737D;">//mdebug</span></span></code></pre></div><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f295267ce304c179e128040ca4cd714~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"><h4 id="方式2-log规则" tabindex="-1">方式2：log规则 <a class="header-anchor" href="#方式2-log规则" aria-label="Permalink to &quot;方式2：log规则&quot;">​</a></h4><pre><code>juejin.cn log://
</code></pre><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8768bc2768374503a0ea7756ffab7b9d~tplv-k3u1fbpfcp-watermark.image?" alt="" width="80%"><h4 id="方式3-chii插件" tabindex="-1">方式3：chii插件 <a class="header-anchor" href="#方式3-chii插件" aria-label="Permalink to &quot;方式3：chii插件&quot;">​</a></h4><p>这个插件内置了<code>Chrome DevTools</code>, 可以直接使用chrome调试页面。</p><p>首先安装<code>whistle.chii</code>插件</p><pre><code>npm i -g whistle.chii
</code></pre><p>然后编写规则</p><pre><code>juejin.cn whistle.chii://
</code></pre><p>按如下步骤操作。</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21ef4911443c4df587be3a7513a3caf6~tplv-k3u1fbpfcp-watermark.image?" alt="" width="100%"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff29b6dd0a48439fa332231a24543764~tplv-k3u1fbpfcp-watermark.image?" alt="" width="60%"><p>点击inspect后就能看到调试页面（不支持debug源码）</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d54b666db8f43f280036d587289d8c5~tplv-k3u1fbpfcp-watermark.image?" alt="" width="100%"><h3 id="_9-设置跨域" tabindex="-1">9. 设置跨域 <a class="header-anchor" href="#_9-设置跨域" aria-label="Permalink to &quot;9. 设置跨域&quot;">​</a></h3><p>通过代理，在开发环境中，我们就不需要后端去设置cors了。</p><pre><code>xxx.dev.cn resCors://*
</code></pre><h3 id="_10-延迟返回" tabindex="-1">10. 延迟返回 <a class="header-anchor" href="#_10-延迟返回" aria-label="Permalink to &quot;10. 延迟返回&quot;">​</a></h3><p>延迟1000ms返回</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">xxx.dev.cn</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">api</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">info </span><span style="color:#B392F0;">resDelay</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//10000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">xxx.dev.cn</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">api</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">info </span><span style="color:#6F42C1;">resDelay</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//10000</span></span></code></pre></div><h2 id="六、nohost-抓包调试平台" tabindex="-1">六、Nohost 抓包调试平台 <a class="header-anchor" href="#六、nohost-抓包调试平台" aria-label="Permalink to &quot;六、Nohost 抓包调试平台&quot;">​</a></h2><p>Nohost 是基于 Whistle 实现的环境配置与抓包调试平台支持多账号、多独立环境。现在已经在我们的团队中部署, 效率确实有一定的提高。它的用法我就不多阐述了。下面是github和相关文档：</p><ul><li><a href="https://github.com/Tencent/nohost" target="_blank" rel="noreferrer">github地址</a></li><li><a href="https://nohost.pro/" target="_blank" rel="noreferrer">官方文档</a></li></ul><h3 id="nohost的功能亮点" tabindex="-1">nohost的功能亮点 <a class="header-anchor" href="#nohost的功能亮点" aria-label="Permalink to &quot;nohost的功能亮点&quot;">​</a></h3><p>nohost除了提供了Whislte基础的功能以外，还实现了很多实用的功能，下面来简单介绍一下</p><h4 id="功能1-分享链接" tabindex="-1">功能1：分享链接 <a class="header-anchor" href="#功能1-分享链接" aria-label="Permalink to &quot;功能1：分享链接&quot;">​</a></h4><p>这个功能就很方便了，不管对方是开发还是测试，都可以通过链接获取完整的请求和响应信息</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcd59b9cbbaa43c29c67b6cee3b5c215~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4c17d8f48914fe9804ce611c3463e9e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84f87d2e01d24c65adf004c7b7c8343e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="功能2-共享规则" tabindex="-1">功能2：共享规则 <a class="header-anchor" href="#功能2-共享规则" aria-label="Permalink to &quot;功能2：共享规则&quot;">​</a></h4><p>在<code>Rules</code>中输入<code>@</code>符号，就有相应的提示，能直接使用别人写好的规则，非常方便~</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df9913922fe7425089688af0a067cd43~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://wproxy.org/whistle/" target="_blank" rel="noreferrer">Whistle文档</a></li></ul>`,42),D=[l,c,i,r,d,h,u,m,b,g,f,k,w,y,_,j,v,x,E,q,P,C,A];function T(R,I,S,U,V,F){return o(),p("div",null,D)}const $=t(n,[["render",T]]);export{W as __pageData,$ as default};
